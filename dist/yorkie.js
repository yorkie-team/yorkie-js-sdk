/*!
 * 
 * yorkie-js-sdk for building collaborative editing applications.
 *  - Version: v0.0.9
 *  - Date: 2020-07-18T08:48Z
 *  - Homepage: https://yorkie.dev
 * 
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["yorkie"] = factory();
	else
		root["yorkie"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/yorkie.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/google-protobuf/google-protobuf.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-protobuf/google-protobuf.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, Buffer) {var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},"es6","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");
$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"startsWith");a+="";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},"es6","es3");
$jscomp.polyfill("String.prototype.repeat",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.isDef=function(a){return void 0!==a};goog.isString=function(a){return"string"==typeof a};goog.isBoolean=function(a){return"boolean"==typeof a};
goog.isNumber=function(a){return"number"==typeof a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}};
goog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};
goog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};
goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};
goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
goog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};
COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={"goog.module":!0});goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],!goog.isDefAndNotNull(b))return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};
goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.nullFunction=function(){};
goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE="";goog.TRANSPILER="transpile.js";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return"(function(){"+a+"\n;})();\n"};
goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(goog.isString(a))goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(goog.isString(d)&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,
c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+d+'"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
goog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+"\n//# sourceURL="+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=
goog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return e(a,b,c)};
goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isFunction=function(a){return"function"==goog.typeOf(a)};
goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;
goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(d){}if("undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=
!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};
goog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};
goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if("undefined"!==typeof d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}if("string"!=typeof b&&"symbol"!=typeof b)throw Error("method names provided to goog.base must be a string or a symbol");
e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];f=!1;for(var g=a.constructor.prototype;g;g=Object.getPrototypeOf(g))if(g[b]===d)f=!0;else if(f)return g[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};
COMPILED||(goog.global.COMPILED=COMPILED);goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};
goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};
goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;
a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}
var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";a("es5",function(){return b("[1,].length==1")});a("es6",function(){return f.match(/Edge\/(\d+)(\.\d)*/i)?!1:b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});a("es9",function(){return b("({...rest} = {}), true")});a("es_next",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||
c.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||"es6"!=b||"noModule"in goog.global.document.createElement("script")?!1:!0;throw Error("Unknown language mode: "+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};
this.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=
0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=
function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error("Bad dependency path or symbol: "+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a="goog.require could not find: "+
a,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);
return b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||""})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,
b)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);
break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=
function(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,
b,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=
a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=
function(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=
goog.global.document;if("complete"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?
' nonce="'+goog.getScriptNonce()+'"':"";d='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+c+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+d+">\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement("script");e.defer=goog.Dependency.defer_;e.async=!1;e.type="text/javascript";(d=goog.getScriptNonce())&&e.setAttribute("nonce",d);goog.DebugLoader_.IS_OLD_IE_?
(a.pause(),e.onreadystatechange=function(){if("loaded"==e.readyState||"complete"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),
a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type="module" crossorigin>'+b+"\x3c/script>":'<script type="module" crossorigin src="'+a+'">\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement("script");c.defer=!0;c.async=!1;c.type=
"module";c.setAttribute("crossorigin",!0);var e=goog.getScriptNonce();e&&c.setAttribute("nonce",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=
!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);
a.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_("'+k+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=
goog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),
d)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+b+'");')+"\x3c/script>";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):a.pause();
else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){"interactive"==k.readyState&&(k.onreadystatechange=
l,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},
goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=
function(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,
c,d){b=b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||"es3",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,
b,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||
goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME="";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null;if("undefined"===typeof TrustedTypes||!TrustedTypes.createPolicy)return b;try{b=TrustedTypes.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(c){goog.logToConsole_(c.message)}return b};
goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_=function(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d}else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};
goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};
goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
goog.array.findIndexRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};
goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};
goog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};
goog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};
goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1;var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};
goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};
goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};
goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};
goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};
goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};goog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};
goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};
goog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join(b||"")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};
goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join("")};
goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.string={};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||"",g=b[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==
f[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"};goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
goog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};
goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null;goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;
goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||
"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,
7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase());
goog.i18n.bidi.Format={LRE:"\u202a",RLE:"\u202b",PDF:"\u202c",LRM:"\u200e",RLM:"\u200f"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT="right";goog.i18n.bidi.LEFT="left";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir=function(a,b){return"number"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_="A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0900-\u1fff\u200e\u2c00-\ud801\ud804-\ud839\ud83c-\udbff\uf900-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";goog.i18n.bidi.rtlChars_="\u0591-\u06ef\u06fa-\u08ff\u200f\ud802-\ud803\ud83a-\ud83b\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,""):a};goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};
goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};
goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+"$&"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+a+"</span>"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};
goog.i18n.bidi.enforceLtrInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+a+"</span>"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;
goog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1\u05f3")};goog.i18n.bidi.wordSeparatorRe_=/\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;
goog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};
goog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")};
goog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:a.dir="rtl";break;default:a.removeAttribute("dir")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="";this.trustedURL_=null;this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};
goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};
goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
goog.html.TrustedResourceUrl.unwrapTrustedURL=function(a){return a.trustedURL_?a.trustedURL_:goog.html.TrustedResourceUrl.unwrap(a)};
goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):
encodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.TrustedResourceUrl;b.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY&&(b.trustedURL_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a));return b};
goog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if(goog.isString(c))return c?a+encodeURIComponent(c):"";for(var d in c){var e=c[d];e=goog.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeUrlWrappedValue_="";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"});goog.html.SafeUrl.unwrap=function(a){return goog.html.SafeUrl.unwrapTrustedURL(a).toString()};
goog.html.SafeUrl.unwrapTrustedURL=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SAFE_MIME_TYPE_PATTERN_.test(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.DATA_URL_PATTERN_=/^data:([^,]*);base64,[a-z0-9+\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,"");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,a,b)};
goog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};
goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.SafeUrl;b.privateDoNotAccessOrElseSafeUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(a):a;return b};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,";"),"Last character of style string is not ';': "+a);goog.asserts.assert(goog.string.internal.contains(a,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"});
goog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail("expected object of type SafeStyle, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez";
goog.html.SafeStyle.create=function(a){var b="",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error("Name allows only [-_a-zA-Z0-9], got: "+c);var d=a[c];null!=d&&(d=goog.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+":"+d+";")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};
goog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[a]);return a};
goog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail("String value disallows comments, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail("String value requires balanced quotes, got: "+
a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};
goog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$");goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;goog.html.SafeStyle.FUNCTIONS_RE_=/\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g;goog.html.SafeStyle.COMMENT_RE_=/\/\*/;
goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b="";d=d.replace(/^(['"])(.*)\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};goog.html.SafeStyle.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(a)+")("+c.join(", ")+");")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};
goog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"};
goog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,"\\x3c")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};
goog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,"<"))throw Error("Selector does not allow '<', got: "+a);var c=a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));
a=a+"{"+goog.html.SafeStyle.unwrap(b).replace(/</g,"\\3C ")+"}";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={"(":")","[":"]"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};
goog.html.SafeStyleSheet.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,"<"),"Forbidden '<' character in style sheet string: "+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};
goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"});
goog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName("A");goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR");goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM");goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS");goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET");goog.dom.TagName.AREA=new goog.dom.TagName("AREA");goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE");goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO");goog.dom.TagName.B=new goog.dom.TagName("B");goog.dom.TagName.BASE=new goog.dom.TagName("BASE");goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT");goog.dom.TagName.BDI=new goog.dom.TagName("BDI");goog.dom.TagName.BDO=new goog.dom.TagName("BDO");goog.dom.TagName.BIG=new goog.dom.TagName("BIG");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE");goog.dom.TagName.BODY=new goog.dom.TagName("BODY");
goog.dom.TagName.BR=new goog.dom.TagName("BR");goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON");goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS");goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION");goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER");goog.dom.TagName.CITE=new goog.dom.TagName("CITE");goog.dom.TagName.CODE=new goog.dom.TagName("CODE");goog.dom.TagName.COL=new goog.dom.TagName("COL");goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND");goog.dom.TagName.DATA=new goog.dom.TagName("DATA");goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST");goog.dom.TagName.DD=new goog.dom.TagName("DD");goog.dom.TagName.DEL=new goog.dom.TagName("DEL");goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS");goog.dom.TagName.DFN=new goog.dom.TagName("DFN");goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG");goog.dom.TagName.DIR=new goog.dom.TagName("DIR");goog.dom.TagName.DIV=new goog.dom.TagName("DIV");
goog.dom.TagName.DL=new goog.dom.TagName("DL");goog.dom.TagName.DT=new goog.dom.TagName("DT");goog.dom.TagName.EM=new goog.dom.TagName("EM");goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED");goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION");goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE");goog.dom.TagName.FONT=new goog.dom.TagName("FONT");goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER");goog.dom.TagName.FORM=new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME");goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET");goog.dom.TagName.H1=new goog.dom.TagName("H1");goog.dom.TagName.H2=new goog.dom.TagName("H2");goog.dom.TagName.H3=new goog.dom.TagName("H3");goog.dom.TagName.H4=new goog.dom.TagName("H4");goog.dom.TagName.H5=new goog.dom.TagName("H5");goog.dom.TagName.H6=new goog.dom.TagName("H6");goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD");goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP");goog.dom.TagName.HR=new goog.dom.TagName("HR");goog.dom.TagName.HTML=new goog.dom.TagName("HTML");goog.dom.TagName.I=new goog.dom.TagName("I");goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME");goog.dom.TagName.IMG=new goog.dom.TagName("IMG");goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT");goog.dom.TagName.INS=new goog.dom.TagName("INS");goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX");goog.dom.TagName.KBD=new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN");goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL");goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND");goog.dom.TagName.LI=new goog.dom.TagName("LI");goog.dom.TagName.LINK=new goog.dom.TagName("LINK");goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN");goog.dom.TagName.MAP=new goog.dom.TagName("MAP");goog.dom.TagName.MARK=new goog.dom.TagName("MARK");goog.dom.TagName.MATH=new goog.dom.TagName("MATH");goog.dom.TagName.MENU=new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM");goog.dom.TagName.META=new goog.dom.TagName("META");goog.dom.TagName.METER=new goog.dom.TagName("METER");goog.dom.TagName.NAV=new goog.dom.TagName("NAV");goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT");goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT");goog.dom.TagName.OL=new goog.dom.TagName("OL");goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION");goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT");goog.dom.TagName.P=new goog.dom.TagName("P");goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM");goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE");goog.dom.TagName.PRE=new goog.dom.TagName("PRE");goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS");goog.dom.TagName.Q=new goog.dom.TagName("Q");goog.dom.TagName.RP=new goog.dom.TagName("RP");goog.dom.TagName.RT=new goog.dom.TagName("RT");
goog.dom.TagName.RTC=new goog.dom.TagName("RTC");goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY");goog.dom.TagName.S=new goog.dom.TagName("S");goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP");goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT");goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION");goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT");goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL");goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE");goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE");goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG");goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE");goog.dom.TagName.SUB=new goog.dom.TagName("SUB");goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY");goog.dom.TagName.SUP=new goog.dom.TagName("SUP");goog.dom.TagName.SVG=new goog.dom.TagName("SVG");goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE");goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY");goog.dom.TagName.TD=new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE");goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA");goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT");goog.dom.TagName.TH=new goog.dom.TagName("TH");goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD");goog.dom.TagName.TIME=new goog.dom.TagName("TIME");goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE");goog.dom.TagName.TR=new goog.dom.TagName("TR");goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK");goog.dom.TagName.TT=new goog.dom.TagName("TT");
goog.dom.TagName.U=new goog.dom.TagName("U");goog.dom.TagName.UL=new goog.dom.TagName("UL");goog.dom.TagName.VAR=new goog.dom.TagName("VAR");goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO");goog.dom.TagName.WBR=new goog.dom.TagName("WBR");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};
goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};
goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")};
goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")};
goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};
goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
goog.labs.userAgent.browser.isEdgeChromium()?a(["Edg"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";var c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};
goog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeHtml, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeHtml"};
goog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b="object"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};
goog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};goog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};
goog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error("Invalid tag name <"+a+">.");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+a+"> is not allowed for SafeHtml.");};
goog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:""},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)};
goog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d||"type"==d)throw Error('Cannot set "'+d+'" attribute');}c="";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)};
goog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},b);var c="";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)};
goog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(b||0)+"; url="+a})};
goog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())c=goog.html.SafeHtml.getStyleValue_(c);else{if(/^on/i.test(b))throw Error('Attribute "'+b+'" requires goog.string.Const value, "'+c+'" given.');if(b.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);
else if(goog.isString(c))c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error('Attribute "'+b+'" on tag "'+a+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+c+'" given.');}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert(goog.isString(c)||goog.isNumber(c),"String or number value expected, got "+typeof c+" with value: "+c);return b+'="'+goog.string.internal.htmlEscape(String(c))+'"'};
goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a);a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};goog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};
goog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){goog.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};
goog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e="<"+a+goog.html.SafeHtml.stringifyAttributes(a,b);goog.isDefAndNotNull(c)?goog.isArray(c)||(c=[c]):c=[];goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,"Void tag <"+a+"> does not allow content."),e+=">"):(d=goog.html.SafeHtml.concat(c),e+=">"+goog.html.SafeHtml.unwrap(d)+"</"+a+">",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:
null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,d)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c="";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error('Invalid attribute name "'+d+'".');var e=b[d];goog.isDefAndNotNull(e)&&(c+=" "+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};
goog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=b[e];for(e in c){var f=e.toLowerCase();if(f in a)throw Error('Cannot override "'+f+'" attribute, got "'+e+'" with value "'+c[e]+'"');f in b&&delete d[f];d[e]=c[e]}return d};
goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};
goog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};
goog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};
goog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};
goog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};
goog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};
goog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};
goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};
goog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};
goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};
goog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)};
goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrapTrustedURL(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrapTrustedURL(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrapTrustedURL(b):
goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};
goog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrapTrustedURL(b)};
goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrapTrustedURL(b))};goog.dom.safe.replaceLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrapTrustedURL(b))};
goog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);return(b||goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(a),c?goog.string.Const.unwrap(c):"",d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};
goog.dom.safe.createImageFromBlob=function(a){if(!/^image\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};
goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};
goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;
goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};var d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;"#"==b.charAt(0)&&(b=Number("0"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),
a+" ")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c="\\x",16>b||256<b)c+="0"}else c="\\u",4096>b&&(c+="0");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;
goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};
goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};
goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;
goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};
goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};
goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")};goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")};
goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\/(\S+)/i,
b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||""};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};
goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;
goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.ASSUME_GO2PHONE=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||"","X11")};
goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone();
goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE)return goog.userAgent.getDocumentMode_()}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_="=.";
goog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;
goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||"",b[k]||"")}return c.join("")};
goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};
goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};
goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};
goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};
goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};
jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};
jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|
a)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23)&8388607;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a)>>>0}};
jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=
a;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};
jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};
jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};
jspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};
jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;
jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):"";return b?"0000000".slice(a.length)+a:a}if(2097151>=b)return""+(jspb.BinaryConstants.TWO_TO_32*b+a);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};
jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};
jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};
jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};
jspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join("")};
jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};
jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};
jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16)}return b+'"'};
jspb.utils.debugScalarToTextFormat=function(a){return"string"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d}return b};
jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||"undefined"!=typeof Buffer&&a.constructor===Buffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};
jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};
jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};
jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
jspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=!0};
jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};
jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};
jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=
this.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};
jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};
jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};
jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);
this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];
jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};
jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};
jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type: %s (at position %s)",
a,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};
jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};
jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)};
jspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}while(1)};
jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.")}};
jspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this)};
jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
default:goog.asserts.fail("Invalid field type in readAny()")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};
jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)};
jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};
jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};
jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};
jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};
jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};jspb.BinaryReader.prototype.readSplitVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};
jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};
jspb.BinaryReader.prototype.readSplitFixed64=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};
jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};
jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};
jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};
jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};
jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};
jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};
jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};
jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};
jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};
jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};
jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};jspb.Map.prototype.has=function(a){return a.toString()in this.map_};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};
jspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g)};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};
jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};jspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:goog.isArray(a)};jspb.Message.isExtensionObject_=function(a){return null!==a&&"object"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};
jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};
jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};
jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
else f.binaryWriterFn.call(b,g.fieldIndex,h)}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};
jspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};jspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};
jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};
jspb.Message.bytesAsB64=function(a){if(null==a||"string"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if("string"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};
jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&"string"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};
jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};jspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};
jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};
jspb.Message.setField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};jspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};
jspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"0")};jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):a.array[jspb.Message.getIndex_(a,b)]=null;return a};jspb.Message.addToRepeatedField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};
jspb.Message.setOneofField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};
jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};
jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};jspb.Message.setWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};
jspb.Message.setOneofWrapperField=function(a,b,c,d){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};jspb.Message.setRepeatedWrapperField=function(a,b,c){goog.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};
jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};
jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(goog.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};
jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};
jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};
jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return"number"===typeof a&&isNaN(a)||"number"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&
g.constructor==Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};
jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};
jspb.Message.clone_=function(a){if(goog.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};jspb.Message.messageSetExtensions={};
jspb.Message.messageSetExtensionsBinary={};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};
jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}""==a&&(a="0");return a};
jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};
jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};
jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};
jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};
jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};
jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};
jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert("boolean"===typeof a||"number"===typeof a);this.buffer_.push(a?1:0)};
jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++)}else this.buffer_.push(d>>
12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};
jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};
jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};
jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};
jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};
jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");
break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()")}};
jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};
jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};
jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};
jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};
jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};
jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};
jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};
jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};
jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert("boolean"===typeof b||"number"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};
jspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};
jspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};
jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};
jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};
jspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};
jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};
jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};
jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};
jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};
jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};
jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};
jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};
jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};
jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Export={};exports.Map=jspb.Map;exports.Message=jspb.Message;exports.BinaryReader=jspb.BinaryReader;exports.BinaryWriter=jspb.BinaryWriter;exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo;exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo;exports.exportSymbol=goog.exportSymbol;exports.inherits=goog.inherits;exports.object={extend:goog.object.extend};exports.typeOf=goog.typeOf;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/grpc-web/index.js":
/*!****************************************!*\
  !*** ./node_modules/grpc-web/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)},ba="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this;function ca(a,b){if(b){var c=ba;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b})}}
function da(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ea(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:da(a)}}
ca("Promise",function(a){function b(f){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{f(h.resolve,h.reject)}catch(k){h.reject(k)}}function c(){this.a=null}function d(f){return f instanceof b?f:new b(function(h){h(f)})}if(a)return a;c.prototype.b=function(f){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g()})}this.a.push(f)};var e=ba.setTimeout;c.prototype.c=function(f){e(f,0)};c.prototype.g=function(){for(;this.a&&this.a.length;){var f=this.a;this.a=[];for(var h=0;h<f.length;++h){var k=
f[h];f[h]=null;try{k()}catch(l){this.f(l)}}}this.a=null};c.prototype.f=function(f){this.c(function(){throw f;})};b.prototype.f=function(){function f(l){return function(n){k||(k=!0,l.call(h,n))}}var h=this,k=!1;return{resolve:f(this.m),reject:f(this.g)}};b.prototype.m=function(f){if(f===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(f instanceof b)this.o(f);else{a:switch(typeof f){case "object":var h=null!=f;break a;case "function":h=!0;break a;default:h=!1}h?this.l(f):this.h(f)}};
b.prototype.l=function(f){var h=void 0;try{h=f.then}catch(k){this.g(k);return}"function"==typeof h?this.u(h,f):this.h(f)};b.prototype.g=function(f){this.i(2,f)};b.prototype.h=function(f){this.i(1,f)};b.prototype.i=function(f,h){if(0!=this.b)throw Error("Cannot settle("+f+", "+h+"): Promise already settled in state"+this.b);this.b=f;this.c=h;this.j()};b.prototype.j=function(){if(null!=this.a){for(var f=0;f<this.a.length;++f)g.b(this.a[f]);this.a=null}};var g=new c;b.prototype.o=function(f){var h=this.f();
f.A(h.resolve,h.reject)};b.prototype.u=function(f,h){var k=this.f();try{f.call(h,k.resolve,k.reject)}catch(l){k.reject(l)}};b.prototype.then=function(f,h){function k(u,A){return"function"==typeof u?function(X){try{l(u(X))}catch(Y){n(Y)}}:A}var l,n,Z=new b(function(u,A){l=u;n=A});this.A(k(f,l),k(h,n));return Z};b.prototype.catch=function(f){return this.then(void 0,f)};b.prototype.A=function(f,h){function k(){switch(l.b){case 1:f(l.c);break;case 2:h(l.c);break;default:throw Error("Unexpected state: "+
l.b);}}var l=this;null==this.a?g.b(k):this.a.push(k)};b.resolve=d;b.reject=function(f){return new b(function(h,k){k(f)})};b.race=function(f){return new b(function(h,k){for(var l=ea(f),n=l.next();!n.done;n=l.next())d(n.value).A(h,k)})};b.all=function(f){var h=ea(f),k=h.next();return k.done?d([]):new b(function(l,n){function Z(X){return function(Y){u[X]=Y;A--;0==A&&l(u)}}var u=[],A=0;do u.push(void 0),A++,d(k.value).A(Z(u.length-1),n),k=h.next();while(!k.done)})};return b});var fa=fa||{},m=this||self;
function p(a){return"string"==typeof a}function q(a,b){a=a.split(".");b=b||m;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function r(){}
function t(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function v(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var ha="closure_uid_"+(1E9*Math.random()>>>0),ia=0;function ja(a,b,c){return a.call.apply(a.bind,arguments)}
function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function w(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?w=ja:w=ka;return w.apply(null,arguments)}var la=Date.now||function(){return+new Date};
function x(a,b){function c(){}c.prototype=b.prototype;a.T=b.prototype;a.prototype=new c;a.prototype.constructor=a};function ma(a){switch(a){case 0:return"No Error";case 1:return"Access denied to content document";case 2:return"File not found";case 3:return"Firefox silently errored";case 4:return"Application custom error";case 5:return"An exception occurred";case 6:return"Http response at 400 or 500 level";case 7:return"Request was aborted";case 8:return"Request timed out";case 9:return"The resource is not available offline";default:return"Unrecognized error code"}};function y(a){if(Error.captureStackTrace)Error.captureStackTrace(this,y);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}x(y,Error);y.prototype.name="CustomError";function na(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");y.call(this,c+a[d])}x(na,y);na.prototype.name="AssertionError";function oa(a,b){throw new na("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};function pa(){this.j=null;this.i=[];this.l=0;this.b=qa;this.f=this.a=this.h=0;this.c=null;this.g=0}var qa=0;function ra(a,b,c,d){a.b=3;a.j="The stream is broken @"+a.l+"/"+c+". Error: "+d+". With input:\n"+b;throw Error(a.j);}
function sa(a,b){function c(l){0==l?f.h=l:128==l?f.h=l:ra(f,h,k,"invalid frame byte");f.b=1;f.a=0;f.f=0}function d(l){f.f++;f.a=(f.a<<8)+l;4==f.f&&(f.b=2,f.g=0,"undefined"!==typeof Uint8Array?f.c=new Uint8Array(f.a):f.c=Array(f.a),0==f.a&&g())}function e(l){f.c[f.g++]=l;f.g==f.a&&g()}function g(){var l={};l[f.h]=f.c;f.i.push(l);f.b=qa}for(var f=a,h=b instanceof Array?b:new Uint8Array(b),k=0;k<h.length;){switch(f.b){case 3:ra(f,h,k,"stream already broken");break;case qa:c(h[k]);break;case 1:d(h[k]);
break;case 2:e(h[k]);break;default:throw Error("unexpected parser state: "+f.b);}f.l++;k++}a=f.i;f.i=[];return 0<a.length?a:null};function ta(a){switch(a){case 200:return 0;case 400:return 3;case 401:return 16;case 403:return 7;case 404:return 5;case 409:return 10;case 412:return 9;case 429:return 8;case 499:return 1;case 500:return 2;case 501:return 12;case 503:return 14;case 504:return 4;default:return 2}};var ua=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(p(a))return p(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};function va(a){a:{var b=wa;for(var c=a.length,d=p(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:p(a)?a.charAt(b):a[b]};function xa(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function ya(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}var za="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Aa(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var g=0;g<za.length;g++)c=za[g],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};var Ba=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function z(a,b){return-1!=a.indexOf(b)}function Ca(a,b){return a<b?-1:a>b?1:0};var B;a:{var Da=m.navigator;if(Da){var Ea=Da.userAgent;if(Ea){B=Ea;break a}}B=""};function Fa(a){var b=1;a=a.split(":");for(var c=[];0<b&&a.length;)c.push(a.shift()),b--;a.length&&c.push(a.join(":"));return c};function Ga(){0!=Ha&&(this[ha]||(this[ha]=++ia));this.H=this.H}var Ha=0;Ga.prototype.H=!1;function Ia(a){Ia[" "](a);return a}Ia[" "]=r;function Ja(a,b){var c=Ka;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var La=z(B,"Opera"),C=z(B,"Trident")||z(B,"MSIE"),Ma=z(B,"Edge"),Na=z(B,"Gecko")&&!(z(B.toLowerCase(),"webkit")&&!z(B,"Edge"))&&!(z(B,"Trident")||z(B,"MSIE"))&&!z(B,"Edge"),Oa=z(B.toLowerCase(),"webkit")&&!z(B,"Edge");function Pa(){var a=m.document;return a?a.documentMode:void 0}var Qa;
a:{var Ra="",Sa=function(){var a=B;if(Na)return/rv:([^\);]+)(\)|;)/.exec(a);if(Ma)return/Edge\/([\d\.]+)/.exec(a);if(C)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Oa)return/WebKit\/(\S+)/.exec(a);if(La)return/(?:Version)[ \/]?(\S+)/.exec(a)}();Sa&&(Ra=Sa?Sa[1]:"");if(C){var Ta=Pa();if(null!=Ta&&Ta>parseFloat(Ra)){Qa=String(Ta);break a}}Qa=Ra}var Ka={};
function Ua(a){return Ja(a,function(){for(var b=0,c=Ba(String(Qa)).split("."),d=Ba(String(a)).split("."),e=Math.max(c.length,d.length),g=0;0==b&&g<e;g++){var f=c[g]||"",h=d[g]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==f[0].length&&0==h[0].length)break;b=Ca(0==f[1].length?0:parseInt(f[1],10),0==h[1].length?0:parseInt(h[1],10))||Ca(0==f[2].length,0==h[2].length)||Ca(f[2],h[2]);f=f[3];h=h[3]}while(0==b)}return 0<=b})}var Va;
Va=m.document&&C?Pa():void 0;var Wa=Object.freeze||function(a){return a};var Xa;(Xa=!C)||(Xa=9<=Number(Va));var Ya=Xa,Za=C&&!Ua("9"),$a=function(){if(!m.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{m.addEventListener("test",r,b),m.removeEventListener("test",r,b)}catch(c){}return a}();function D(a,b){this.type=a;this.a=this.target=b}D.prototype.b=function(){};function E(a,b){D.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Na){a:{try{Ia(b.nodeName);var e=!0;break a}catch(g){}e=!1}e||(b=null)}}else"mouseover"==
c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=p(a.pointerType)?a.pointerType:ab[a.pointerType]||"";this.c=a;a.defaultPrevented&&this.b()}}x(E,D);var ab=Wa({2:"touch",3:"pen",4:"mouse"});E.prototype.b=function(){E.T.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Za)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var F="closure_listenable_"+(1E6*Math.random()|0),bb=0;function cb(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.B=e;this.key=++bb;this.s=this.w=!1}function db(a){a.s=!0;a.listener=null;a.proxy=null;a.src=null;a.B=null};function G(a){this.src=a;this.a={};this.b=0}G.prototype.add=function(a,b,c,d,e){var g=a.toString();a=this.a[g];a||(a=this.a[g]=[],this.b++);var f=eb(a,b,d,e);-1<f?(b=a[f],c||(b.w=!1)):(b=new cb(b,this.src,g,!!d,e),b.w=c,a.push(b));return b};function fb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=ua(d,b),g;(g=0<=e)&&Array.prototype.splice.call(d,e,1);g&&(db(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}
function eb(a,b,c,d){for(var e=0;e<a.length;++e){var g=a[e];if(!g.s&&g.listener==b&&g.capture==!!c&&g.B==d)return e}return-1};var gb="closure_lm_"+(1E6*Math.random()|0),hb={},ib=0;function jb(a,b,c,d,e){if(d&&d.once)kb(a,b,c,d,e);else if("array"==t(b))for(var g=0;g<b.length;g++)jb(a,b[g],c,d,e);else c=lb(c),a&&a[F]?a.f.add(String(b),c,!1,v(d)?!!d.capture:!!d,e):mb(a,b,c,!1,d,e)}
function mb(a,b,c,d,e,g){if(!b)throw Error("Invalid event type");var f=v(e)?!!e.capture:!!e,h=H(a);h||(a[gb]=h=new G(a));c=h.add(b,c,d,f,g);if(!c.proxy){d=nb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)$a||(e=f),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(ob(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");ib++}}
function nb(){var a=pb,b=Ya?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function kb(a,b,c,d,e){if("array"==t(b))for(var g=0;g<b.length;g++)kb(a,b[g],c,d,e);else c=lb(c),a&&a[F]?a.f.add(String(b),c,!0,v(d)?!!d.capture:!!d,e):mb(a,b,c,!0,d,e)}
function qb(a,b,c,d,e){if("array"==t(b))for(var g=0;g<b.length;g++)qb(a,b[g],c,d,e);else(d=v(d)?!!d.capture:!!d,c=lb(c),a&&a[F])?(a=a.f,b=String(b).toString(),b in a.a&&(g=a.a[b],c=eb(g,c,d,e),-1<c&&(db(g[c]),Array.prototype.splice.call(g,c,1),0==g.length&&(delete a.a[b],a.b--)))):a&&(a=H(a))&&(b=a.a[b.toString()],a=-1,b&&(a=eb(b,c,d,e)),(c=-1<a?b[a]:null)&&rb(c))}
function rb(a){if("number"!=typeof a&&a&&!a.s){var b=a.src;if(b&&b[F])fb(b.f,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(ob(c),d):b.addListener&&b.removeListener&&b.removeListener(d);ib--;(c=H(b))?(fb(c,a),0==c.b&&(c.src=null,b[gb]=null)):db(a)}}}function ob(a){return a in hb?hb[a]:hb[a]="on"+a}
function sb(a,b,c,d){var e=!0;if(a=H(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var g=b[a];g&&g.capture==c&&!g.s&&(g=tb(g,d),e=e&&!1!==g)}return e}function tb(a,b){var c=a.listener,d=a.B||a.src;a.w&&rb(a);return c.call(d,b)}
function pb(a,b){if(a.s)return!0;if(!Ya){var c=b||q("window.event");b=new E(c,this);var d=!0;if(!(0>c.keyCode||void 0!=c.returnValue)){a:{var e=!1;if(0==c.keyCode)try{c.keyCode=-1;break a}catch(f){e=!0}if(e||void 0==c.returnValue)c.returnValue=!0}c=[];for(e=b.a;e;e=e.parentNode)c.push(e);a=a.type;for(e=c.length-1;0<=e;e--){b.a=c[e];var g=sb(c[e],a,!0,b);d=d&&g}for(e=0;e<c.length;e++)b.a=c[e],g=sb(c[e],a,!1,b),d=d&&g}return d}return tb(a,new E(b,this))}
function H(a){a=a[gb];return a instanceof G?a:null}var ub="__closure_events_fn_"+(1E9*Math.random()>>>0);function lb(a){if("function"==t(a))return a;a[ub]||(a[ub]=function(b){return a.handleEvent(b)});return a[ub]};function I(){Ga.call(this);this.f=new G(this);this.P=this}x(I,Ga);I.prototype[F]=!0;I.prototype.removeEventListener=function(a,b,c,d){qb(this,a,b,c,d)};function J(a,b){a=a.P;var c=b.type||b;if(p(b))b=new D(b,a);else if(b instanceof D)b.target=b.target||a;else{var d=b;b=new D(c,a);Aa(b,d)}a=b.a=a;vb(a,c,!0,b);vb(a,c,!1,b)}
function vb(a,b,c,d){if(b=a.f.a[String(b)]){b=b.concat();for(var e=!0,g=0;g<b.length;++g){var f=b[g];if(f&&!f.s&&f.capture==c){var h=f.listener,k=f.B||f.src;f.w&&fb(a.f,f);e=!1!==h.call(k,d)&&e}}}};function wb(a,b,c){if("function"==t(a))c&&(a=w(a,c));else if(a&&"function"==typeof a.handleEvent)a=w(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:m.setTimeout(a,b||0)};function xb(a,b,c){this.reset(a,b,c,void 0,void 0)}xb.prototype.a=null;var yb=0;xb.prototype.reset=function(a,b,c,d,e){"number"==typeof e||yb++;d||la();delete this.a};function zb(a){this.f=a;this.b=this.c=this.a=null}function K(a,b){this.name=a;this.value=b}K.prototype.toString=function(){return this.name};var Ab=new K("SEVERE",1E3),Bb=new K("CONFIG",700),Cb=new K("FINE",500);function Db(a){if(a.c)return a.c;if(a.a)return Db(a.a);oa("Root logger has no level set.");return null}zb.prototype.log=function(a,b,c){if(a.value>=Db(this).value)for("function"==t(b)&&(b=b()),a=new xb(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};var Eb={},L=null;
function Fb(a){L||(L=new zb(""),Eb[""]=L,L.c=Bb);var b;if(!(b=Eb[a])){b=new zb(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Fb(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Eb[a]=b}return b};function M(a,b){a&&a.log(Cb,b,void 0)};function Gb(){}Gb.prototype.a=null;function Hb(a){var b;(b=a.a)||(b={},Ib(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Jb;function Kb(){}x(Kb,Gb);function Lb(a){return(a=Ib(a))?new ActiveXObject(a):new XMLHttpRequest}function Ib(a){if(!a.b&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.b}Jb=new Kb;function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else a&&Mb(this,a)}N.prototype.f=function(){Nb(this);return this.a.concat()};function Ob(a){a.b={};a.a.length=0;a.c=0}
function Nb(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}N.prototype.get=function(a,b){return O(this.b,a)?this.b[a]:b};N.prototype.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};function Mb(a,b){if(b instanceof N)for(var c=b.f(),d=0;d<c.length;d++)a.set(c[d],b.get(c[d]));else for(c in b)a.set(c,b[c])}
N.prototype.forEach=function(a,b){for(var c=this.f(),d=0;d<c.length;d++){var e=c[d],g=this.get(e);a.call(b,g,e,this)}};function Pb(a){Nb(a);for(var b={},c=0;c<a.a.length;c++){var d=a.a[c];b[d]=a.b[d]}return b}function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var Qb=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function P(a){I.call(this);this.headers=new N;this.v=a||null;this.c=!1;this.G=this.a=null;this.K=this.u="";this.g=0;this.j="";this.i=this.J=this.o=this.I=!1;this.l=0;this.D=null;this.h=Rb;this.F=this.m=!1}x(P,I);var Rb="",Sb=P.prototype,Tb=Fb("goog.net.XhrIo");Sb.b=Tb;var Ub=/^https?$/i,Vb=["POST","PUT"];
function Wb(a,b,c){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.u+"; newUri="+b);a.u=b;a.j="";a.g=0;a.K="POST";a.I=!1;a.c=!0;a.a=a.v?Lb(a.v):Lb(Jb);a.G=a.v?Hb(a.v):Hb(Jb);a.a.onreadystatechange=w(a.L,a);try{M(a.b,Q(a,"Opening Xhr")),a.J=!0,a.a.open("POST",String(b),!0),a.J=!1}catch(g){M(a.b,Q(a,"Error opening Xhr: "+g.message));Xb(a,g);return}b=c||"";c=new N(a.headers);var d=va(c.f()),e=m.FormData&&b instanceof m.FormData;!(0<=ua(Vb,"POST"))||d||e||c.set("Content-Type",
"application/x-www-form-urlencoded;charset=utf-8");c.forEach(function(g,f){this.a.setRequestHeader(f,g)},a);a.h&&(a.a.responseType=a.h);"withCredentials"in a.a&&a.a.withCredentials!==a.m&&(a.a.withCredentials=a.m);try{Yb(a),0<a.l&&(a.F=Zb(a.a),M(a.b,Q(a,"Will abort after "+a.l+"ms if incomplete, xhr2 "+a.F)),a.F?(a.a.timeout=a.l,a.a.ontimeout=w(a.M,a)):a.D=wb(a.M,a.l,a)),M(a.b,Q(a,"Sending request")),a.o=!0,a.a.send(b),a.o=!1}catch(g){M(a.b,Q(a,"Send error: "+g.message)),Xb(a,g)}}
function Zb(a){return C&&Ua(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}function wa(a){return"content-type"==a.toLowerCase()}P.prototype.M=function(){"undefined"!=typeof fa&&this.a&&(this.j="Timed out after "+this.l+"ms, aborting",this.g=8,M(this.b,Q(this,this.j)),J(this,"timeout"),this.abort(8))};function Xb(a,b){a.c=!1;a.a&&(a.i=!0,a.a.abort(),a.i=!1);a.j=b;a.g=5;$b(a);ac(a)}function $b(a){a.I||(a.I=!0,J(a,"complete"),J(a,"error"))}
P.prototype.abort=function(a){this.a&&this.c&&(M(this.b,Q(this,"Aborting")),this.c=!1,this.i=!0,this.a.abort(),this.i=!1,this.g=a||7,J(this,"complete"),J(this,"abort"),ac(this))};P.prototype.L=function(){this.H||(this.J||this.o||this.i?bc(this):this.R())};P.prototype.R=function(){bc(this)};
function bc(a){if(a.c&&"undefined"!=typeof fa)if(a.G[1]&&4==R(a)&&2==S(a))M(a.b,Q(a,"Local request error detected and ignored"));else if(a.o&&4==R(a))wb(a.L,0,a);else if(J(a,"readystatechange"),4==R(a)){M(a.b,Q(a,"Request complete"));a.c=!1;try{var b=S(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var g=String(a.u).match(Qb)[1]||null;if(!g&&m.self&&m.self.location){var f=m.self.location.protocol;g=f.substr(0,
f.length-1)}e=!Ub.test(g?g.toLowerCase():"")}d=e}if(d)J(a,"complete"),J(a,"success");else{a.g=6;try{var h=2<R(a)?a.a.statusText:""}catch(k){M(a.b,"Can not get status: "+k.message),h=""}a.j=h+" ["+S(a)+"]";$b(a)}}finally{ac(a)}}}function ac(a){if(a.a){Yb(a);var b=a.a,c=a.G[0]?r:null;a.a=null;a.G=null;J(a,"ready");try{b.onreadystatechange=c}catch(d){(a=a.b)&&a.log(Ab,"Problem encountered resetting onreadystatechange: "+d.message,void 0)}}}
function Yb(a){a.a&&a.F&&(a.a.ontimeout=null);a.D&&(m.clearTimeout(a.D),a.D=null)}function R(a){return a.a?a.a.readyState:0}function S(a){try{return 2<R(a)?a.a.status:-1}catch(b){return-1}}
function cc(a){try{if(!a.a)return null;if("response"in a.a)return a.a.response;switch(a.h){case Rb:case "text":return a.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.a)return a.a.mozResponseArrayBuffer}var b=a.b;b&&b.log(Ab,"Response type "+a.h+" is not supported on this browser",void 0);return null}catch(c){return M(a.b,"Can not get response: "+c.message),null}}function dc(a,b){if(a.a&&4==R(a))return a=a.a.getResponseHeader(b),null===a?void 0:a}
function ec(a){var b={};a=(a.a&&4==R(a)?a.a.getAllResponseHeaders()||"":"").split("\r\n");for(var c=0;c<a.length;c++)if(!/^[\s\xa0]*$/.test(a[c])){var d=Fa(a[c]),e=d[0];d=d[1];if(p(d)){d=d.trim();var g=b[e]||[];b[e]=g;g.push(d)}}return ya(b,function(f){return f.join(", ")})}function Q(a,b){return b+" ["+a.K+" "+a.u+" "+S(a)+"]"};var fc={},T=null;function gc(a){var b;void 0===b&&(b=0);hc();b=fc[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],g=d+1<a.length,f=g?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|f>>4;f=(f&15)<<2|k>>6;k&=63;h||(k=64,g||(f=64));c.push(b[l],b[e],b[f]||"",b[k]||"")}return c.join("")}function ic(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):z("=.",a[b-1])&&(c=z("=.",a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;jc(a,function(g){d[e++]=g});return d.subarray(0,e)}
function jc(a,b){function c(k){for(;d<a.length;){var l=a.charAt(d++),n=T[l];if(null!=n)return n;if(!/^[\s\xa0]*$/.test(l))throw Error("Unknown base64 encoding at char: "+l);}return k}hc();for(var d=0;;){var e=c(-1),g=c(0),f=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|g>>4);64!=f&&(b(g<<4&240|f>>2),64!=h&&b(f<<6&192|h))}}
function hc(){if(!T){T={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));fc[c]=d;for(var e=0;e<d.length;e++){var g=d[e];void 0===T[g]&&(T[g]=e)}}}};function U(a){this.a=a.O;this.f=this.b=this.c=this.j=this.h=null;this.i=!1;this.g=0;this.l=new pa;var b=this;jb(this.a,"readystatechange",function(){var c=b.a;if(c=c.a?c.a.getResponseHeader("Content-Type"):null){c=c.toLowerCase();if(0==c.lastIndexOf("application/grpc-web-text",0)){c=b.a;try{var d=c.a?c.a.responseText:""}catch(k){M(c.b,"Can not get responseText: "+k.message),d=""}c=d.length-d.length%4;d=d.substr(b.g,c-b.g);if(0==d.length)return;b.g=c;d=ic(d)}else if(0==c.lastIndexOf("application/grpc",
0))d=new Uint8Array(cc(b.a));else return;if(d=sa(b.l,[].slice.call(d)))for(c=0;c<d.length;c++){if(0 in d[c]){var e=d[c][0];e&&(e=b.h(e))&&b.j(e)}if(128 in d[c]&&0<d[c][128].length){e="";for(var g=0;g<d[c][128].length;g++)e+=String.fromCharCode(d[c][128][g]);e=e.trim().split("\r\n");g={};for(var f=0;f<e.length;f++){var h=e[f].indexOf(":");g[e[f].substring(0,h).trim()]=e[f].substring(h+1).trim()}e=g;g=0;f="";"grpc-status"in e&&(g=e["grpc-status"]);"grpc-message"in e&&(f=e["grpc-message"]);b.c&&b.c({code:Number(g),
details:f,metadata:e})}}}});jb(this.a,"complete",function(){var c=b.a.g,d="";if(0!=c){switch(c){case 7:var e=10;break;case 8:e=4;break;case 6:e=ta(S(b.a));break;default:e=14}10==e&&b.i||!b.b||b.b({code:e,message:ma(c)})}else{c=!1;var g=ec(b.a);"grpc-status"in g&&(e=dc(b.a,"grpc-status"),"grpc-message"in g&&(d=dc(b.a,"grpc-message")),0!=Number(e)&&b.b&&(b.b({code:Number(e),message:d,metadata:g}),c=!0),b.c&&b.c({code:Number(e),details:d,metadata:g}));!c&&b.f&&b.f()}})}
U.prototype.C=function(a,b){"data"==a?this.j=b:"status"==a?this.c=b:"end"==a?this.f=b:"error"==a&&(this.b=b);return this};U.prototype.on=U.prototype.C;U.prototype.cancel=function(){this.i=!0;this.a.abort()};U.prototype.cancel=U.prototype.cancel;function kc(a){var b="";xa(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n"});return b}function lc(a,b){a:{for(c in b){var c=!1;break a}c=!0}if(c)return a;c=kc(b);if(p(a)){b=encodeURIComponent("$httpHeaders");c=null!=c?"="+encodeURIComponent(String(c)):"";if(b+=c){c=a.indexOf("#");0>c&&(c=a.length);var d=a.indexOf("?");if(0>d||d>c){d=c;var e=""}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+"&"+b:b:c;a=a[0]+(a[1]?"?"+a[1]:"")+a[2]}return a}a.a("$httpHeaders",c);return a};function V(a){this.a=q("format",a)||"text";this.c=q("suppressCorsPreflight",a)||!1;this.b=q("withCredentials",a)||!1}
V.prototype.N=function(a,b,c,d,e){var g=new P;g.m=this.b;var f=new U({O:g});f.h=d.b;f.C("data",function(h){e(null,h)});f.C("status",function(h){0!=h.code&&e({code:h.code,message:h.details,metadata:h.metadata},null)});f.C("error",function(h){0!=h.code&&e({code:h.code,message:h.message,metadata:h.metadata},null)});Mb(g.headers,c);mc(this,g);this.c&&(c=Pb(g.headers),Ob(g.headers),a=lc(a,c));b=d.a(b);b=nc(b);"text"==this.a?b=gc(b):"binary"==this.a&&(g.h="arraybuffer");Wb(g,a,b);return f};
V.prototype.rpcCall=V.prototype.N;V.prototype.U=function(a,b,c,d){var e=this;return new Promise(function(g,f){e.N(a,b,c,d,function(h,k){h?f(h):g(k)})})};V.prototype.unaryCall=V.prototype.U;V.prototype.S=function(a,b,c,d){var e=new P;e.m=this.b;var g=new U({O:e});g.h=d.b;Mb(e.headers,c);mc(this,e);this.c&&(c=Pb(e.headers),Ob(e.headers),a=lc(a,c));b=d.a(b);b=nc(b);"text"==this.a?b=gc(b):"binary"==this.a&&(e.h="arraybuffer");Wb(e,a,b);return g};V.prototype.serverStreaming=V.prototype.S;
function nc(a){for(var b=a.length,c=[0,0,0,0],d=new Uint8Array(5+b),e=3;0<=e;e--)c[e]=b%256,b>>>=8;d.set(new Uint8Array(c),1);d.set(a,5);return d}
function mc(a,b){"text"==a.a?(b.headers.set("Content-Type","application/grpc-web-text"),b.headers.set("Accept","application/grpc-web-text")):b.headers.set("Content-Type","application/grpc-web+proto");b.headers.set("X-User-Agent","grpc-web-javascript/0.1");b.headers.set("X-Grpc-Web","1");if(O(b.headers.b,"deadline")){a=b.headers.get("deadline");a=Math.round(a-(new Date).getTime());var c=b.headers;O(c.b,"deadline")&&(delete c.b.deadline,c.c--,c.a.length>2*c.c&&Nb(c));Infinity===a&&(a=0);0<a&&b.headers.set("grpc-timeout",
a+"m")}};var W=module.exports;W.AbstractClientBase={MethodInfo:function(a,b,c,d){this.name=d;this.a=b;this.b=c}};W.GrpcWebClientBase=V;W.StatusCode={OK:0,CANCELLED:1,UNKNOWN:2,INVALID_ARGUMENT:3,DEADLINE_EXCEEDED:4,NOT_FOUND:5,ALREADY_EXISTS:6,PERMISSION_DENIED:7,UNAUTHENTICATED:16,RESOURCE_EXHAUSTED:8,FAILED_PRECONDITION:9,ABORTED:10,OUT_OF_RANGE:11,UNIMPLEMENTED:12,INTERNAL:13,UNAVAILABLE:14,DATA_LOSS:15};W.MethodDescriptor=function(a,b,c,d,e,g){this.name=a;this.a=e;this.b=g};
W.MethodType={UNARY:"unary",SERVER_STREAMING:"server_streaming"};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/api/converter.ts":
/*!******************************!*\
  !*** ./src/api/converter.ts ***!
  \******************************/
/*! exports provided: converter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "converter", function() { return converter; });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/error */ "./src/util/error.ts");
/* harmony import */ var _document_time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document/time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../document/operation/set_operation */ "./src/document/operation/set_operation.ts");
/* harmony import */ var _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../document/operation/add_operation */ "./src/document/operation/add_operation.ts");
/* harmony import */ var _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../document/operation/move_operation */ "./src/document/operation/move_operation.ts");
/* harmony import */ var _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../document/operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../document/operation/edit_operation */ "./src/document/operation/edit_operation.ts");
/* harmony import */ var _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../document/operation/rich_edit_operation */ "./src/document/operation/rich_edit_operation.ts");
/* harmony import */ var _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../document/operation/select_operation */ "./src/document/operation/select_operation.ts");
/* harmony import */ var _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../document/operation/style_operation */ "./src/document/operation/style_operation.ts");
/* harmony import */ var _document_key_document_key__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../document/key/document_key */ "./src/document/key/document_key.ts");
/* harmony import */ var _document_change_change_id__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../document/change/change_id */ "./src/document/change/change_id.ts");
/* harmony import */ var _document_change_change__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../document/change/change */ "./src/document/change/change.ts");
/* harmony import */ var _document_change_change_pack__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../document/change/change_pack */ "./src/document/change/change_pack.ts");
/* harmony import */ var _document_checkpoint_checkpoint__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../document/checkpoint/checkpoint */ "./src/document/checkpoint/checkpoint.ts");
/* harmony import */ var _document_json_rht_pq_map__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../document/json/rht_pq_map */ "./src/document/json/rht_pq_map.ts");
/* harmony import */ var _document_json_rga_tree_list__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../document/json/rga_tree_list */ "./src/document/json/rga_tree_list.ts");
/* harmony import */ var _document_json_object__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../document/json/object */ "./src/document/json/object.ts");
/* harmony import */ var _document_json_array__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../document/json/array */ "./src/document/json/array.ts");
/* harmony import */ var _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../document/json/rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/* harmony import */ var _document_json_text__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../document/json/text */ "./src/document/json/text.ts");
/* harmony import */ var _document_json_rich_text__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../document/json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../document/json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./yorkie_pb */ "./src/api/yorkie_pb.js");
/* harmony import */ var _yorkie_pb__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_yorkie_pb__WEBPACK_IMPORTED_MODULE_24__);
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

























function toDocumentKey(key) {
    const pbDocumentKey = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["DocumentKey"]();
    pbDocumentKey.setCollection(key.getCollection());
    pbDocumentKey.setDocument(key.getDocument());
    return pbDocumentKey;
}
function toDocumentKeys(keys) {
    return keys.map(toDocumentKey);
}
function toCheckpoint(checkpoint) {
    const pbCheckpoint = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Checkpoint"]();
    pbCheckpoint.setServerSeq(checkpoint.getServerSeqAsString());
    pbCheckpoint.setClientSeq(checkpoint.getClientSeq());
    return pbCheckpoint;
}
function toChangeID(changeID) {
    const pbChangeID = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ChangeID"]();
    pbChangeID.setClientSeq(changeID.getClientSeq());
    pbChangeID.setLamport(changeID.getLamportAsString());
    pbChangeID.setActorId(changeID.getActorID());
    return pbChangeID;
}
function toTimeTicket(ticket) {
    if (!ticket) {
        return null;
    }
    const pbTimeTicket = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["TimeTicket"]();
    pbTimeTicket.setLamport(ticket.getLamportAsString());
    pbTimeTicket.setDelimiter(ticket.getDelimiter());
    pbTimeTicket.setActorId(ticket.getActorID());
    return pbTimeTicket;
}
function toValueType(valueType) {
    switch (valueType) {
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Null:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].NULL;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Boolean:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BOOLEAN;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Integer:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].INTEGER;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Long:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].LONG;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Double:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DOUBLE;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].String:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].STRING;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Bytes:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BYTES;
        case _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Date:
            return _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DATE;
        default:
            throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unsupported, `unsupported type: ${valueType}`);
    }
}
function toJSONElementSimple(jsonElement) {
    const pbJSONElement = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElementSimple"]();
    if (jsonElement instanceof _document_json_object__WEBPACK_IMPORTED_MODULE_18__["JSONObject"]) {
        pbJSONElement.setType(_yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].JSON_OBJECT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_array__WEBPACK_IMPORTED_MODULE_19__["JSONArray"]) {
        pbJSONElement.setType(_yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].JSON_ARRAY);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_text__WEBPACK_IMPORTED_MODULE_21__["PlainText"]) {
        pbJSONElement.setType(_yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].TEXT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_rich_text__WEBPACK_IMPORTED_MODULE_22__["RichText"]) {
        pbJSONElement.setType(_yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].RICH_TEXT);
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
    }
    else if (jsonElement instanceof _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"]) {
        const primitive = jsonElement;
        pbJSONElement.setType(toValueType(primitive.getType()));
        pbJSONElement.setCreatedAt(toTimeTicket(jsonElement.getCreatedAt()));
        pbJSONElement.setValue(jsonElement.toBytes());
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented element: ${jsonElement}`);
    }
    return pbJSONElement;
}
function toTextNodeID(id) {
    const pbTextNodeID = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["TextNodeID"]();
    pbTextNodeID.setCreatedAt(toTimeTicket(id.getCreatedAt()));
    pbTextNodeID.setOffset(id.getOffset());
    return pbTextNodeID;
}
function toTextNodePos(pos) {
    const pbTextNodePos = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["TextNodePos"]();
    pbTextNodePos.setCreatedAt(toTimeTicket(pos.getID().getCreatedAt()));
    pbTextNodePos.setOffset(pos.getID().getOffset());
    pbTextNodePos.setRelativeOffset(pos.getRelativeOffset());
    return pbTextNodePos;
}
function toOperation(operation) {
    const pbOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"]();
    if (operation instanceof _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__["SetOperation"]) {
        const setOperation = operation;
        const pbSetOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Set();
        pbSetOperation.setParentCreatedAt(toTimeTicket(setOperation.getParentCreatedAt()));
        pbSetOperation.setKey(setOperation.getKey());
        pbSetOperation.setValue(toJSONElementSimple(setOperation.getValue()));
        pbSetOperation.setExecutedAt(toTimeTicket(setOperation.getExecutedAt()));
        pbOperation.setSet(pbSetOperation);
    }
    else if (operation instanceof _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__["AddOperation"]) {
        const addOperation = operation;
        const pbAddOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Add();
        pbAddOperation.setParentCreatedAt(toTimeTicket(addOperation.getParentCreatedAt()));
        pbAddOperation.setPrevCreatedAt(toTimeTicket(addOperation.getPrevCreatedAt()));
        pbAddOperation.setValue(toJSONElementSimple(addOperation.getValue()));
        pbAddOperation.setExecutedAt(toTimeTicket(addOperation.getExecutedAt()));
        pbOperation.setAdd(pbAddOperation);
    }
    else if (operation instanceof _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__["MoveOperation"]) {
        const moveOperation = operation;
        const pbMoveOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Move();
        pbMoveOperation.setParentCreatedAt(toTimeTicket(moveOperation.getParentCreatedAt()));
        pbMoveOperation.setPrevCreatedAt(toTimeTicket(moveOperation.getPrevCreatedAt()));
        pbMoveOperation.setCreatedAt(toTimeTicket(moveOperation.getCreatedAt()));
        pbMoveOperation.setExecutedAt(toTimeTicket(moveOperation.getExecutedAt()));
        pbOperation.setMove(pbMoveOperation);
    }
    else if (operation instanceof _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__["RemoveOperation"]) {
        const removeOperation = operation;
        const pbRemoveOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Remove();
        pbRemoveOperation.setParentCreatedAt(toTimeTicket(removeOperation.getParentCreatedAt()));
        pbRemoveOperation.setCreatedAt(toTimeTicket(removeOperation.getCreatedAt()));
        pbRemoveOperation.setExecutedAt(toTimeTicket(removeOperation.getExecutedAt()));
        pbOperation.setRemove(pbRemoveOperation);
    }
    else if (operation instanceof _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__["EditOperation"]) {
        const editOperation = operation;
        const pbEditOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Edit();
        pbEditOperation.setParentCreatedAt(toTimeTicket(editOperation.getParentCreatedAt()));
        pbEditOperation.setFrom(toTextNodePos(editOperation.getFromPos()));
        pbEditOperation.setTo(toTextNodePos(editOperation.getToPos()));
        const pbCreatedAtMapByActor = pbEditOperation.getCreatedAtMapByActorMap();
        for (const [key, value] of editOperation.getMaxCreatedAtMapByActor()) {
            pbCreatedAtMapByActor.set(key, toTimeTicket(value));
        }
        pbEditOperation.setContent(editOperation.getContent());
        pbEditOperation.setExecutedAt(toTimeTicket(editOperation.getExecutedAt()));
        pbOperation.setEdit(pbEditOperation);
    }
    else if (operation instanceof _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__["SelectOperation"]) {
        const selectOperation = operation;
        const pbSelectOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Select();
        pbSelectOperation.setParentCreatedAt(toTimeTicket(selectOperation.getParentCreatedAt()));
        pbSelectOperation.setFrom(toTextNodePos(selectOperation.getFromPos()));
        pbSelectOperation.setTo(toTextNodePos(selectOperation.getToPos()));
        pbSelectOperation.setExecutedAt(toTimeTicket(selectOperation.getExecutedAt()));
        pbOperation.setSelect(pbSelectOperation);
    }
    else if (operation instanceof _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__["RichEditOperation"]) {
        const richEditOperation = operation;
        const pbRichEditOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].RichEdit();
        pbRichEditOperation.setParentCreatedAt(toTimeTicket(richEditOperation.getParentCreatedAt()));
        pbRichEditOperation.setFrom(toTextNodePos(richEditOperation.getFromPos()));
        pbRichEditOperation.setTo(toTextNodePos(richEditOperation.getToPos()));
        const pbCreatedAtMapByActor = pbRichEditOperation.getCreatedAtMapByActorMap();
        for (const [key, value] of richEditOperation.getMaxCreatedAtMapByActor()) {
            pbCreatedAtMapByActor.set(key, toTimeTicket(value));
        }
        pbRichEditOperation.setContent(richEditOperation.getContent());
        const pbAttributes = pbRichEditOperation.getAttributesMap();
        for (const [key, value] of richEditOperation.getAttributes()) {
            pbAttributes.set(key, value);
        }
        pbRichEditOperation.setExecutedAt(toTimeTicket(richEditOperation.getExecutedAt()));
        pbOperation.setRichEdit(pbRichEditOperation);
    }
    else if (operation instanceof _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__["StyleOperation"]) {
        const styleOperation = operation;
        const pbStyleOperation = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Operation"].Style();
        pbStyleOperation.setParentCreatedAt(toTimeTicket(styleOperation.getParentCreatedAt()));
        pbStyleOperation.setFrom(toTextNodePos(styleOperation.getFromPos()));
        pbStyleOperation.setTo(toTextNodePos(styleOperation.getToPos()));
        const pbAttributes = pbStyleOperation.getAttributesMap();
        for (const [key, value] of styleOperation.getAttributes()) {
            pbAttributes.set(key, value);
        }
        pbStyleOperation.setExecutedAt(toTimeTicket(styleOperation.getExecutedAt()));
        pbOperation.setStyle(pbStyleOperation);
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, 'unimplemented operation');
    }
    return pbOperation;
}
function toOperations(operations) {
    const pbOperations = [];
    for (const operation of operations) {
        pbOperations.push(toOperation(operation));
    }
    return pbOperations;
}
function toChange(change) {
    const pbChange = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["Change"]();
    pbChange.setId(toChangeID(change.getID()));
    pbChange.setMessage(change.getMessage());
    pbChange.setOperationsList(toOperations(change.getOperations()));
    return pbChange;
}
function toChanges(changes) {
    const pbChanges = [];
    for (const change of changes) {
        pbChanges.push(toChange(change));
    }
    return pbChanges;
}
function toRHTNodes(rht) {
    const pbRHTNodes = [];
    for (const rhtNode of rht) {
        const pbRHTNode = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["RHTNode"]();
        pbRHTNode.setKey(rhtNode.getStrKey());
        // eslint-disable-next-line
        pbRHTNode.setElement(toJSONElement(rhtNode.getValue()));
        pbRHTNodes.push(pbRHTNode);
    }
    return pbRHTNodes;
}
function toRGANodes(rgaTreeList) {
    const pbRGANodes = [];
    for (const rgaTreeListNode of rgaTreeList) {
        const pbRGANode = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["RGANode"]();
        // eslint-disable-next-line
        pbRGANode.setElement(toJSONElement(rgaTreeListNode.getValue()));
        pbRGANodes.push(pbRGANode);
    }
    return pbRGANodes;
}
function toTextNodes(rgaTreeSplit) {
    const pbTextNodes = [];
    for (const textNode of rgaTreeSplit) {
        const pbTextNode = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["TextNode"]();
        pbTextNode.setId(toTextNodeID(textNode.getID()));
        pbTextNode.setValue(textNode.getValue());
        pbTextNode.setRemovedAt(toTimeTicket(textNode.getRemovedAt()));
        pbTextNodes.push(pbTextNode);
    }
    return pbTextNodes;
}
function toJSONObject(obj) {
    const pbJSONObject = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"].Object();
    pbJSONObject.setNodesList(toRHTNodes(obj.getRHT()));
    pbJSONObject.setCreatedAt(toTimeTicket(obj.getCreatedAt()));
    pbJSONObject.setRemovedAt(toTimeTicket(obj.getRemovedAt()));
    const pbJSONElement = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"]();
    pbJSONElement.setObject(pbJSONObject);
    return pbJSONElement;
}
function toJSONArray(arr) {
    const pbJSONArray = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"].Array();
    pbJSONArray.setNodesList(toRGANodes(arr.getElements()));
    pbJSONArray.setCreatedAt(toTimeTicket(arr.getCreatedAt()));
    pbJSONArray.setRemovedAt(toTimeTicket(arr.getRemovedAt()));
    const pbJSONElement = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"]();
    pbJSONElement.setArray(pbJSONArray);
    return pbJSONElement;
}
function toJSONPrimitive(primitive) {
    const pbJSONPrimitive = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"].Primitive();
    pbJSONPrimitive.setType(toValueType(primitive.getType()));
    pbJSONPrimitive.setValue(primitive.toBytes());
    pbJSONPrimitive.setCreatedAt(toTimeTicket(primitive.getCreatedAt()));
    pbJSONPrimitive.setRemovedAt(toTimeTicket(primitive.getRemovedAt()));
    const pbJSONElement = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"]();
    pbJSONElement.setPrimitive(pbJSONPrimitive);
    return pbJSONElement;
}
function toPlainText(text) {
    const pbText = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"].Text();
    pbText.setNodesList(toTextNodes(text.getRGATreeSplit()));
    pbText.setCreatedAt(toTimeTicket(text.getCreatedAt()));
    pbText.setRemovedAt(toTimeTicket(text.getRemovedAt()));
    const pbJSONElement = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"]();
    pbJSONElement.setText(pbText);
    return pbJSONElement;
}
function toJSONElement(jsonElement) {
    if (jsonElement instanceof _document_json_object__WEBPACK_IMPORTED_MODULE_18__["JSONObject"]) {
        return toJSONObject(jsonElement);
    }
    else if (jsonElement instanceof _document_json_array__WEBPACK_IMPORTED_MODULE_19__["JSONArray"]) {
        return toJSONArray(jsonElement);
    }
    else if (jsonElement instanceof _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"]) {
        return toJSONPrimitive(jsonElement);
    }
    else if (jsonElement instanceof _document_json_text__WEBPACK_IMPORTED_MODULE_21__["PlainText"]) {
        return toPlainText(jsonElement);
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented element: ${jsonElement}`);
    }
    return null;
}
function toChangePack(pack) {
    const pbChangePack = new _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ChangePack"]();
    pbChangePack.setDocumentKey(toDocumentKey(pack.getKey()));
    pbChangePack.setCheckpoint(toCheckpoint(pack.getCheckpoint()));
    pbChangePack.setChangesList(toChanges(pack.getChanges()));
    pbChangePack.setSnapshot(pack.getSnapshot());
    return pbChangePack;
}
function fromDocumentKey(pbDocumentKey) {
    return _document_key_document_key__WEBPACK_IMPORTED_MODULE_11__["DocumentKey"].of(pbDocumentKey.getCollection(), pbDocumentKey.getDocument());
}
function fromDocumentKeys(pbDocumentKeys) {
    return pbDocumentKeys.map(fromDocumentKey);
}
function fromChangeID(pbChangeID) {
    return _document_change_change_id__WEBPACK_IMPORTED_MODULE_12__["ChangeID"].of(pbChangeID.getClientSeq(), long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(pbChangeID.getLamport(), true), pbChangeID.getActorId());
}
function fromTimeTicket(pbTimeTicket) {
    if (!pbTimeTicket) {
        return null;
    }
    return _document_time_ticket__WEBPACK_IMPORTED_MODULE_2__["TimeTicket"].of(long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(pbTimeTicket.getLamport(), true), pbTimeTicket.getDelimiter(), pbTimeTicket.getActorId());
}
function fromValueType(pbValueType) {
    switch (pbValueType) {
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BOOLEAN:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Boolean;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].INTEGER:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Integer;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].LONG:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Long;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DOUBLE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Double;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].STRING:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].String;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BYTES:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Bytes;
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DATE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["PrimitiveType"].Date;
    }
    throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented value type: ${pbValueType}`);
}
function fromJSONElementSimple(pbJSONElement) {
    switch (pbJSONElement.getType()) {
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].JSON_OBJECT:
            return _document_json_object__WEBPACK_IMPORTED_MODULE_18__["JSONObject"].create(fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].JSON_ARRAY:
            return _document_json_array__WEBPACK_IMPORTED_MODULE_19__["JSONArray"].create(fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].TEXT:
            return _document_json_text__WEBPACK_IMPORTED_MODULE_21__["PlainText"].create(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplit"].create(), fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].RICH_TEXT:
            return _document_json_rich_text__WEBPACK_IMPORTED_MODULE_22__["RichText"].create(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplit"].create(), fromTimeTicket(pbJSONElement.getCreatedAt()));
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BOOLEAN:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].INTEGER:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].LONG:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DOUBLE:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].STRING:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].BYTES:
        case _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["ValueType"].DATE:
            return _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"].of(_document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"].valueFromBytes(fromValueType(pbJSONElement.getType()), pbJSONElement.getValue_asU8()), fromTimeTicket(pbJSONElement.getCreatedAt()));
    }
    throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented element: ${pbJSONElement}`);
}
function fromTextNodePos(pbTextNodePos) {
    return _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplitNodePos"].of(_document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplitNodeID"].of(fromTimeTicket(pbTextNodePos.getCreatedAt()), pbTextNodePos.getOffset()), pbTextNodePos.getRelativeOffset());
}
function fromTextNodeID(pbTextNodeID) {
    return _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplitNodeID"].of(fromTimeTicket(pbTextNodeID.getCreatedAt()), pbTextNodeID.getOffset());
}
function fromTextNode(pbTextNode) {
    const textNode = _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplitNode"].create(fromTextNodeID(pbTextNode.getId()), pbTextNode.getValue());
    textNode.remove(fromTimeTicket(pbTextNode.getRemovedAt()));
    return textNode;
}
function fromRichTextNode(pbTextNode) {
    const textNode = _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplitNode"].create(fromTextNodeID(pbTextNode.getId()), _document_json_rich_text__WEBPACK_IMPORTED_MODULE_22__["RichTextValue"].create(pbTextNode.getValue()));
    textNode.remove(fromTimeTicket(pbTextNode.getRemovedAt()));
    return textNode;
}
function fromOperations(pbOperations) {
    const operations = [];
    for (const pbOperation of pbOperations) {
        let operation;
        if (pbOperation.hasSet()) {
            const pbSetOperation = pbOperation.getSet();
            operation = _document_operation_set_operation__WEBPACK_IMPORTED_MODULE_3__["SetOperation"].create(pbSetOperation.getKey(), fromJSONElementSimple(pbSetOperation.getValue()), fromTimeTicket(pbSetOperation.getParentCreatedAt()), fromTimeTicket(pbSetOperation.getExecutedAt()));
        }
        else if (pbOperation.hasAdd()) {
            const pbAddOperation = pbOperation.getAdd();
            operation = _document_operation_add_operation__WEBPACK_IMPORTED_MODULE_4__["AddOperation"].create(fromTimeTicket(pbAddOperation.getParentCreatedAt()), fromTimeTicket(pbAddOperation.getPrevCreatedAt()), fromJSONElementSimple(pbAddOperation.getValue()), fromTimeTicket(pbAddOperation.getExecutedAt()));
        }
        else if (pbOperation.hasMove()) {
            const pbMoveOperation = pbOperation.getMove();
            operation = _document_operation_move_operation__WEBPACK_IMPORTED_MODULE_5__["MoveOperation"].create(fromTimeTicket(pbMoveOperation.getParentCreatedAt()), fromTimeTicket(pbMoveOperation.getPrevCreatedAt()), fromTimeTicket(pbMoveOperation.getCreatedAt()), fromTimeTicket(pbMoveOperation.getExecutedAt()));
        }
        else if (pbOperation.hasRemove()) {
            const pbRemoveOperation = pbOperation.getRemove();
            operation = _document_operation_remove_operation__WEBPACK_IMPORTED_MODULE_6__["RemoveOperation"].create(fromTimeTicket(pbRemoveOperation.getParentCreatedAt()), fromTimeTicket(pbRemoveOperation.getCreatedAt()), fromTimeTicket(pbRemoveOperation.getExecutedAt()));
        }
        else if (pbOperation.hasEdit()) {
            const pbEditOperation = pbOperation.getEdit();
            const createdAtMapByActor = new Map();
            pbEditOperation.getCreatedAtMapByActorMap().forEach((value, key) => {
                createdAtMapByActor.set(key, fromTimeTicket(value));
            });
            operation = _document_operation_edit_operation__WEBPACK_IMPORTED_MODULE_7__["EditOperation"].create(fromTimeTicket(pbEditOperation.getParentCreatedAt()), fromTextNodePos(pbEditOperation.getFrom()), fromTextNodePos(pbEditOperation.getTo()), createdAtMapByActor, pbEditOperation.getContent(), fromTimeTicket(pbEditOperation.getExecutedAt()));
        }
        else if (pbOperation.hasSelect()) {
            const pbSelectOperation = pbOperation.getSelect();
            operation = _document_operation_select_operation__WEBPACK_IMPORTED_MODULE_9__["SelectOperation"].create(fromTimeTicket(pbSelectOperation.getParentCreatedAt()), fromTextNodePos(pbSelectOperation.getFrom()), fromTextNodePos(pbSelectOperation.getTo()), fromTimeTicket(pbSelectOperation.getExecutedAt()));
        }
        else if (pbOperation.hasRichEdit()) {
            const pbEditOperation = pbOperation.getRichEdit();
            const createdAtMapByActor = new Map();
            pbEditOperation.getCreatedAtMapByActorMap().forEach((value, key) => {
                createdAtMapByActor.set(key, fromTimeTicket(value));
            });
            const attributes = new Map();
            pbEditOperation.getAttributesMap().forEach((value, key) => {
                attributes.set(key, value);
            });
            operation = _document_operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_8__["RichEditOperation"].create(fromTimeTicket(pbEditOperation.getParentCreatedAt()), fromTextNodePos(pbEditOperation.getFrom()), fromTextNodePos(pbEditOperation.getTo()), createdAtMapByActor, pbEditOperation.getContent(), attributes, fromTimeTicket(pbEditOperation.getExecutedAt()));
        }
        else if (pbOperation.hasStyle()) {
            const pbStyleOperation = pbOperation.getStyle();
            const attributes = new Map();
            pbStyleOperation.getAttributesMap().forEach((value, key) => {
                attributes.set(key, value);
            });
            operation = _document_operation_style_operation__WEBPACK_IMPORTED_MODULE_10__["StyleOperation"].create(fromTimeTicket(pbStyleOperation.getParentCreatedAt()), fromTextNodePos(pbStyleOperation.getFrom()), fromTextNodePos(pbStyleOperation.getTo()), attributes, fromTimeTicket(pbStyleOperation.getExecutedAt()));
        }
        else {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented operation`);
        }
        operations.push(operation);
    }
    return operations;
}
function fromChanges(pbChanges) {
    const changes = [];
    for (const pbChange of pbChanges) {
        changes.push(_document_change_change__WEBPACK_IMPORTED_MODULE_13__["Change"].create(fromChangeID(pbChange.getId()), pbChange.getMessage(), fromOperations(pbChange.getOperationsList())));
    }
    return changes;
}
function fromCheckpoint(pbCheckpoint) {
    return _document_checkpoint_checkpoint__WEBPACK_IMPORTED_MODULE_15__["Checkpoint"].of(long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(pbCheckpoint.getServerSeq(), true), pbCheckpoint.getClientSeq());
}
function fromChangePack(pbPack) {
    return _document_change_change_pack__WEBPACK_IMPORTED_MODULE_14__["ChangePack"].create(fromDocumentKey(pbPack.getDocumentKey()), fromCheckpoint(pbPack.getCheckpoint()), fromChanges(pbPack.getChangesList()), pbPack.getSnapshot_asU8());
}
function fromJSONObject(pbObject) {
    const rht = new _document_json_rht_pq_map__WEBPACK_IMPORTED_MODULE_16__["RHTPQMap"]();
    for (const pbRHTNode of pbObject.getNodesList()) {
        // eslint-disable-next-line
        rht.set(pbRHTNode.getKey(), fromJSONElement(pbRHTNode.getElement()));
    }
    const obj = new _document_json_object__WEBPACK_IMPORTED_MODULE_18__["JSONObject"](fromTimeTicket(pbObject.getCreatedAt()), rht);
    obj.remove(fromTimeTicket(pbObject.getRemovedAt()));
    return obj;
}
function fromJSONArray(pbArray) {
    const rgaTreeList = new _document_json_rga_tree_list__WEBPACK_IMPORTED_MODULE_17__["RGATreeList"]();
    for (const pbRGANode of pbArray.getNodesList()) {
        // eslint-disable-next-line
        rgaTreeList.insert(fromJSONElement(pbRGANode.getElement()));
    }
    const arr = new _document_json_array__WEBPACK_IMPORTED_MODULE_19__["JSONArray"](fromTimeTicket(pbArray.getCreatedAt()), rgaTreeList);
    arr.remove(fromTimeTicket(pbArray.getRemovedAt()));
    return arr;
}
function fromJSONPrimitive(pbPrimitive) {
    const primitive = _document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"].of(_document_json_primitive__WEBPACK_IMPORTED_MODULE_23__["JSONPrimitive"].valueFromBytes(fromValueType(pbPrimitive.getType()), pbPrimitive.getValue_asU8()), fromTimeTicket(pbPrimitive.getCreatedAt()));
    primitive.remove(fromTimeTicket(pbPrimitive.getRemovedAt()));
    return primitive;
}
function fromJSONText(pbText) {
    const rgaTreeSplit = new _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplit"]();
    let prev = rgaTreeSplit.getHead();
    for (const pbNode of pbText.getNodesList()) {
        const current = rgaTreeSplit.insertAfter(prev, fromTextNode(pbNode));
        if (pbNode.hasInsPrevId()) {
            current.setInsPrev(rgaTreeSplit.findNode(fromTextNodeID(pbNode.getInsPrevId())));
        }
        prev = current;
    }
    const text = _document_json_text__WEBPACK_IMPORTED_MODULE_21__["PlainText"].create(rgaTreeSplit, fromTimeTicket(pbText.getCreatedAt()));
    text.remove(fromTimeTicket(pbText.getRemovedAt()));
    return text;
}
function fromJSONRichText(pbText) {
    const rgaTreeSplit = new _document_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_20__["RGATreeSplit"]();
    let prev = rgaTreeSplit.getHead();
    for (const pbNode of pbText.getNodesList()) {
        const current = rgaTreeSplit.insertAfter(prev, fromRichTextNode(pbNode));
        if (pbNode.hasInsPrevId()) {
            current.setInsPrev(rgaTreeSplit.findNode(fromTextNodeID(pbNode.getInsPrevId())));
        }
        prev = current;
    }
    const text = _document_json_rich_text__WEBPACK_IMPORTED_MODULE_22__["RichText"].create(rgaTreeSplit, fromTimeTicket(pbText.getCreatedAt()));
    text.remove(fromTimeTicket(pbText.getRemovedAt()));
    return text;
}
function fromJSONElement(pbJSONElement) {
    if (pbJSONElement.hasObject()) {
        return fromJSONObject(pbJSONElement.getObject());
    }
    else if (pbJSONElement.hasArray()) {
        return fromJSONArray(pbJSONElement.getArray());
    }
    else if (pbJSONElement.hasPrimitive()) {
        return fromJSONPrimitive(pbJSONElement.getPrimitive());
    }
    else if (pbJSONElement.hasText()) {
        return fromJSONText(pbJSONElement.getText());
    }
    else if (pbJSONElement.hasRichText()) {
        return fromJSONRichText(pbJSONElement.getRichText());
    }
    else {
        throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented element: ${pbJSONElement}`);
    }
}
function bytesToObject(bytes) {
    if (!bytes) {
        return _document_json_object__WEBPACK_IMPORTED_MODULE_18__["JSONObject"].create(_document_time_ticket__WEBPACK_IMPORTED_MODULE_2__["InitialTimeTicket"]);
    }
    const pbJSONElement = _yorkie_pb__WEBPACK_IMPORTED_MODULE_24__["JSONElement"].deserializeBinary(bytes);
    return fromJSONObject(pbJSONElement.getObject());
}
function objectToBytes(obj) {
    return toJSONElement(obj).serializeBinary();
}
const converter = {
    toChangePack: toChangePack,
    fromChangePack: fromChangePack,
    toDocumentKeys: toDocumentKeys,
    fromDocumentKeys: fromDocumentKeys,
    objectToBytes: objectToBytes,
    bytesToObject: bytesToObject,
};


/***/ }),

/***/ "./src/api/yorkie_grpc_web_pb.js":
/*!***************************************!*\
  !*** ./src/api/yorkie_grpc_web_pb.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = __webpack_require__(/*! grpc-web */ "./node_modules/grpc-web/index.js");

const proto = {};
proto.api = __webpack_require__(/*! ./yorkie_pb.js */ "./src/api/yorkie_pb.js");

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.api.YorkieClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.api.YorkiePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ActivateClientRequest,
 *   !proto.api.ActivateClientResponse>}
 */
const methodDescriptor_Yorkie_ActivateClient = new grpc.web.MethodDescriptor(
  '/api.Yorkie/ActivateClient',
  grpc.web.MethodType.UNARY,
  proto.api.ActivateClientRequest,
  proto.api.ActivateClientResponse,
  /**
   * @param {!proto.api.ActivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.ActivateClientResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.ActivateClientRequest,
 *   !proto.api.ActivateClientResponse>}
 */
const methodInfo_Yorkie_ActivateClient = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.ActivateClientResponse,
  /**
   * @param {!proto.api.ActivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.ActivateClientResponse.deserializeBinary
);


/**
 * @param {!proto.api.ActivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.api.ActivateClientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ActivateClientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.activateClient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/ActivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ActivateClient,
      callback);
};


/**
 * @param {!proto.api.ActivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ActivateClientResponse>}
 *     A native promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.activateClient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/ActivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_ActivateClient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.DeactivateClientRequest,
 *   !proto.api.DeactivateClientResponse>}
 */
const methodDescriptor_Yorkie_DeactivateClient = new grpc.web.MethodDescriptor(
  '/api.Yorkie/DeactivateClient',
  grpc.web.MethodType.UNARY,
  proto.api.DeactivateClientRequest,
  proto.api.DeactivateClientResponse,
  /**
   * @param {!proto.api.DeactivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DeactivateClientResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.DeactivateClientRequest,
 *   !proto.api.DeactivateClientResponse>}
 */
const methodInfo_Yorkie_DeactivateClient = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.DeactivateClientResponse,
  /**
   * @param {!proto.api.DeactivateClientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DeactivateClientResponse.deserializeBinary
);


/**
 * @param {!proto.api.DeactivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.api.DeactivateClientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.DeactivateClientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.deactivateClient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/DeactivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DeactivateClient,
      callback);
};


/**
 * @param {!proto.api.DeactivateClientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.DeactivateClientResponse>}
 *     A native promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.deactivateClient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/DeactivateClient',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DeactivateClient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.AttachDocumentRequest,
 *   !proto.api.AttachDocumentResponse>}
 */
const methodDescriptor_Yorkie_AttachDocument = new grpc.web.MethodDescriptor(
  '/api.Yorkie/AttachDocument',
  grpc.web.MethodType.UNARY,
  proto.api.AttachDocumentRequest,
  proto.api.AttachDocumentResponse,
  /**
   * @param {!proto.api.AttachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.AttachDocumentResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.AttachDocumentRequest,
 *   !proto.api.AttachDocumentResponse>}
 */
const methodInfo_Yorkie_AttachDocument = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.AttachDocumentResponse,
  /**
   * @param {!proto.api.AttachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.AttachDocumentResponse.deserializeBinary
);


/**
 * @param {!proto.api.AttachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.api.AttachDocumentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.AttachDocumentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.attachDocument =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/AttachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_AttachDocument,
      callback);
};


/**
 * @param {!proto.api.AttachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.AttachDocumentResponse>}
 *     A native promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.attachDocument =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/AttachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_AttachDocument);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.DetachDocumentRequest,
 *   !proto.api.DetachDocumentResponse>}
 */
const methodDescriptor_Yorkie_DetachDocument = new grpc.web.MethodDescriptor(
  '/api.Yorkie/DetachDocument',
  grpc.web.MethodType.UNARY,
  proto.api.DetachDocumentRequest,
  proto.api.DetachDocumentResponse,
  /**
   * @param {!proto.api.DetachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DetachDocumentResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.DetachDocumentRequest,
 *   !proto.api.DetachDocumentResponse>}
 */
const methodInfo_Yorkie_DetachDocument = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.DetachDocumentResponse,
  /**
   * @param {!proto.api.DetachDocumentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.DetachDocumentResponse.deserializeBinary
);


/**
 * @param {!proto.api.DetachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.api.DetachDocumentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.DetachDocumentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.detachDocument =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/DetachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DetachDocument,
      callback);
};


/**
 * @param {!proto.api.DetachDocumentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.DetachDocumentResponse>}
 *     A native promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.detachDocument =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/DetachDocument',
      request,
      metadata || {},
      methodDescriptor_Yorkie_DetachDocument);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.WatchDocumentsRequest,
 *   !proto.api.WatchDocumentsResponse>}
 */
const methodDescriptor_Yorkie_WatchDocuments = new grpc.web.MethodDescriptor(
  '/api.Yorkie/WatchDocuments',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.api.WatchDocumentsRequest,
  proto.api.WatchDocumentsResponse,
  /**
   * @param {!proto.api.WatchDocumentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.WatchDocumentsResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.WatchDocumentsRequest,
 *   !proto.api.WatchDocumentsResponse>}
 */
const methodInfo_Yorkie_WatchDocuments = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.WatchDocumentsResponse,
  /**
   * @param {!proto.api.WatchDocumentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.WatchDocumentsResponse.deserializeBinary
);


/**
 * @param {!proto.api.WatchDocumentsRequest} request The request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.WatchDocumentsResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.watchDocuments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.Yorkie/WatchDocuments',
      request,
      metadata || {},
      methodDescriptor_Yorkie_WatchDocuments);
};


/**
 * @param {!proto.api.WatchDocumentsRequest} request The request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.api.WatchDocumentsResponse>}
 *     The XHR Node Readable Stream
 */
proto.api.YorkiePromiseClient.prototype.watchDocuments =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.Yorkie/WatchDocuments',
      request,
      metadata || {},
      methodDescriptor_Yorkie_WatchDocuments);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.PushPullRequest,
 *   !proto.api.PushPullResponse>}
 */
const methodDescriptor_Yorkie_PushPull = new grpc.web.MethodDescriptor(
  '/api.Yorkie/PushPull',
  grpc.web.MethodType.UNARY,
  proto.api.PushPullRequest,
  proto.api.PushPullResponse,
  /**
   * @param {!proto.api.PushPullRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.PushPullResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.api.PushPullRequest,
 *   !proto.api.PushPullResponse>}
 */
const methodInfo_Yorkie_PushPull = new grpc.web.AbstractClientBase.MethodInfo(
  proto.api.PushPullResponse,
  /**
   * @param {!proto.api.PushPullRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.PushPullResponse.deserializeBinary
);


/**
 * @param {!proto.api.PushPullRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.api.PushPullResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.PushPullResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.YorkieClient.prototype.pushPull =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.Yorkie/PushPull',
      request,
      metadata || {},
      methodDescriptor_Yorkie_PushPull,
      callback);
};


/**
 * @param {!proto.api.PushPullRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.PushPullResponse>}
 *     A native promise that resolves to the response
 */
proto.api.YorkiePromiseClient.prototype.pushPull =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.Yorkie/PushPull',
      request,
      metadata || {},
      methodDescriptor_Yorkie_PushPull);
};


module.exports = proto.api;



/***/ }),

/***/ "./src/api/yorkie_pb.js":
/*!******************************!*\
  !*** ./src/api/yorkie_pb.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// source: src/api/yorkie.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.api.ActivateClientRequest', null, global);
goog.exportSymbol('proto.api.ActivateClientResponse', null, global);
goog.exportSymbol('proto.api.AttachDocumentRequest', null, global);
goog.exportSymbol('proto.api.AttachDocumentResponse', null, global);
goog.exportSymbol('proto.api.Change', null, global);
goog.exportSymbol('proto.api.ChangeID', null, global);
goog.exportSymbol('proto.api.ChangePack', null, global);
goog.exportSymbol('proto.api.Checkpoint', null, global);
goog.exportSymbol('proto.api.Clients', null, global);
goog.exportSymbol('proto.api.DeactivateClientRequest', null, global);
goog.exportSymbol('proto.api.DeactivateClientResponse', null, global);
goog.exportSymbol('proto.api.DetachDocumentRequest', null, global);
goog.exportSymbol('proto.api.DetachDocumentResponse', null, global);
goog.exportSymbol('proto.api.DocumentKey', null, global);
goog.exportSymbol('proto.api.EventType', null, global);
goog.exportSymbol('proto.api.JSONElement', null, global);
goog.exportSymbol('proto.api.JSONElement.Array', null, global);
goog.exportSymbol('proto.api.JSONElement.BodyCase', null, global);
goog.exportSymbol('proto.api.JSONElement.Object', null, global);
goog.exportSymbol('proto.api.JSONElement.Primitive', null, global);
goog.exportSymbol('proto.api.JSONElement.RichText', null, global);
goog.exportSymbol('proto.api.JSONElement.Text', null, global);
goog.exportSymbol('proto.api.JSONElementSimple', null, global);
goog.exportSymbol('proto.api.Operation', null, global);
goog.exportSymbol('proto.api.Operation.Add', null, global);
goog.exportSymbol('proto.api.Operation.BodyCase', null, global);
goog.exportSymbol('proto.api.Operation.Edit', null, global);
goog.exportSymbol('proto.api.Operation.Move', null, global);
goog.exportSymbol('proto.api.Operation.Remove', null, global);
goog.exportSymbol('proto.api.Operation.RichEdit', null, global);
goog.exportSymbol('proto.api.Operation.Select', null, global);
goog.exportSymbol('proto.api.Operation.Set', null, global);
goog.exportSymbol('proto.api.Operation.Style', null, global);
goog.exportSymbol('proto.api.PushPullRequest', null, global);
goog.exportSymbol('proto.api.PushPullResponse', null, global);
goog.exportSymbol('proto.api.RGANode', null, global);
goog.exportSymbol('proto.api.RHTNode', null, global);
goog.exportSymbol('proto.api.RequestHeader', null, global);
goog.exportSymbol('proto.api.RichTextNode', null, global);
goog.exportSymbol('proto.api.RichTextNodeAttr', null, global);
goog.exportSymbol('proto.api.TextNode', null, global);
goog.exportSymbol('proto.api.TextNodeID', null, global);
goog.exportSymbol('proto.api.TextNodePos', null, global);
goog.exportSymbol('proto.api.TimeTicket', null, global);
goog.exportSymbol('proto.api.ValueType', null, global);
goog.exportSymbol('proto.api.WatchDocumentsRequest', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse.BodyCase', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse.Event', null, global);
goog.exportSymbol('proto.api.WatchDocumentsResponse.Initialization', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RequestHeader.displayName = 'proto.api.RequestHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ActivateClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ActivateClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ActivateClientRequest.displayName = 'proto.api.ActivateClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ActivateClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ActivateClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ActivateClientResponse.displayName = 'proto.api.ActivateClientResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeactivateClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeactivateClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DeactivateClientRequest.displayName = 'proto.api.DeactivateClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeactivateClientResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeactivateClientResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DeactivateClientResponse.displayName = 'proto.api.DeactivateClientResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AttachDocumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AttachDocumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.AttachDocumentRequest.displayName = 'proto.api.AttachDocumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AttachDocumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AttachDocumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.AttachDocumentResponse.displayName = 'proto.api.AttachDocumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DetachDocumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DetachDocumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DetachDocumentRequest.displayName = 'proto.api.DetachDocumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DetachDocumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DetachDocumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DetachDocumentResponse.displayName = 'proto.api.DetachDocumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.WatchDocumentsRequest.repeatedFields_, null);
};
goog.inherits(proto.api.WatchDocumentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsRequest.displayName = 'proto.api.WatchDocumentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Clients = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Clients.repeatedFields_, null);
};
goog.inherits(proto.api.Clients, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Clients.displayName = 'proto.api.Clients';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.WatchDocumentsResponse.oneofGroups_);
};
goog.inherits(proto.api.WatchDocumentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsResponse.displayName = 'proto.api.WatchDocumentsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsResponse.Initialization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.WatchDocumentsResponse.Initialization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsResponse.Initialization.displayName = 'proto.api.WatchDocumentsResponse.Initialization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.WatchDocumentsResponse.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.WatchDocumentsResponse.Event.repeatedFields_, null);
};
goog.inherits(proto.api.WatchDocumentsResponse.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.WatchDocumentsResponse.Event.displayName = 'proto.api.WatchDocumentsResponse.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PushPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PushPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PushPullRequest.displayName = 'proto.api.PushPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PushPullResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PushPullResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PushPullResponse.displayName = 'proto.api.PushPullResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ChangePack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ChangePack.repeatedFields_, null);
};
goog.inherits(proto.api.ChangePack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ChangePack.displayName = 'proto.api.ChangePack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Change = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Change.repeatedFields_, null);
};
goog.inherits(proto.api.Change, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Change.displayName = 'proto.api.Change';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ChangeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ChangeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ChangeID.displayName = 'proto.api.ChangeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Operation.oneofGroups_);
};
goog.inherits(proto.api.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.displayName = 'proto.api.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Set.displayName = 'proto.api.Operation.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Add = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Add, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Add.displayName = 'proto.api.Operation.Add';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Move.displayName = 'proto.api.Operation.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Remove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Remove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Remove.displayName = 'proto.api.Operation.Remove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Edit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Edit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Edit.displayName = 'proto.api.Operation.Edit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Select = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Select, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Select.displayName = 'proto.api.Operation.Select';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.RichEdit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.RichEdit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.RichEdit.displayName = 'proto.api.Operation.RichEdit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.Style.displayName = 'proto.api.Operation.Style';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElementSimple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JSONElementSimple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElementSimple.displayName = 'proto.api.JSONElementSimple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.JSONElement.oneofGroups_);
};
goog.inherits(proto.api.JSONElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.displayName = 'proto.api.JSONElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.Object.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Object.displayName = 'proto.api.JSONElement.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.Array.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Array.displayName = 'proto.api.JSONElement.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Primitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JSONElement.Primitive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Primitive.displayName = 'proto.api.JSONElement.Primitive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.Text.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.Text.displayName = 'proto.api.JSONElement.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JSONElement.RichText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.JSONElement.RichText.repeatedFields_, null);
};
goog.inherits(proto.api.JSONElement.RichText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JSONElement.RichText.displayName = 'proto.api.JSONElement.RichText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RHTNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RHTNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RHTNode.displayName = 'proto.api.RHTNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RGANode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RGANode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RGANode.displayName = 'proto.api.RGANode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNode.displayName = 'proto.api.TextNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RichTextNodeAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RichTextNodeAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RichTextNodeAttr.displayName = 'proto.api.RichTextNodeAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RichTextNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RichTextNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RichTextNode.displayName = 'proto.api.RichTextNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNodeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNodeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNodeID.displayName = 'proto.api.TextNodeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DocumentKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DocumentKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.DocumentKey.displayName = 'proto.api.DocumentKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Checkpoint.displayName = 'proto.api.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TextNodePos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TextNodePos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TextNodePos.displayName = 'proto.api.TextNodePos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TimeTicket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TimeTicket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TimeTicket.displayName = 'proto.api.TimeTicket';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RequestHeader}
 */
proto.api.RequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RequestHeader;
  return proto.api.RequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RequestHeader}
 */
proto.api.RequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.api.RequestHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.RequestHeader} returns this
 */
proto.api.RequestHeader.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ActivateClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ActivateClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ActivateClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ActivateClientRequest}
 */
proto.api.ActivateClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ActivateClientRequest;
  return proto.api.ActivateClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ActivateClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ActivateClientRequest}
 */
proto.api.ActivateClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ActivateClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ActivateClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ActivateClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.ActivateClientRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.ActivateClientRequest} returns this
*/
proto.api.ActivateClientRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ActivateClientRequest} returns this
 */
proto.api.ActivateClientRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ActivateClientRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_key = 2;
 * @return {string}
 */
proto.api.ActivateClientRequest.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ActivateClientRequest} returns this
 */
proto.api.ActivateClientRequest.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ActivateClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ActivateClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ActivateClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ActivateClientResponse}
 */
proto.api.ActivateClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ActivateClientResponse;
  return proto.api.ActivateClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ActivateClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ActivateClientResponse}
 */
proto.api.ActivateClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ActivateClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ActivateClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ActivateClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ActivateClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_key = 1;
 * @return {string}
 */
proto.api.ActivateClientResponse.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ActivateClientResponse} returns this
 */
proto.api.ActivateClientResponse.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.ActivateClientResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ActivateClientResponse} returns this
 */
proto.api.ActivateClientResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeactivateClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeactivateClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeactivateClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeactivateClientRequest}
 */
proto.api.DeactivateClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeactivateClientRequest;
  return proto.api.DeactivateClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeactivateClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeactivateClientRequest}
 */
proto.api.DeactivateClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DeactivateClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DeactivateClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.DeactivateClientRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.DeactivateClientRequest} returns this
*/
proto.api.DeactivateClientRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DeactivateClientRequest} returns this
 */
proto.api.DeactivateClientRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DeactivateClientRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.DeactivateClientRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DeactivateClientRequest} returns this
 */
proto.api.DeactivateClientRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeactivateClientResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeactivateClientResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeactivateClientResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeactivateClientResponse}
 */
proto.api.DeactivateClientResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeactivateClientResponse;
  return proto.api.DeactivateClientResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeactivateClientResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeactivateClientResponse}
 */
proto.api.DeactivateClientResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeactivateClientResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DeactivateClientResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DeactivateClientResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DeactivateClientResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.api.DeactivateClientResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DeactivateClientResponse} returns this
 */
proto.api.DeactivateClientResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AttachDocumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AttachDocumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AttachDocumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AttachDocumentRequest}
 */
proto.api.AttachDocumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AttachDocumentRequest;
  return proto.api.AttachDocumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AttachDocumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AttachDocumentRequest}
 */
proto.api.AttachDocumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AttachDocumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AttachDocumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.AttachDocumentRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.AttachDocumentRequest} returns this
*/
proto.api.AttachDocumentRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.AttachDocumentRequest} returns this
 */
proto.api.AttachDocumentRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.AttachDocumentRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.AttachDocumentRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.AttachDocumentRequest} returns this
 */
proto.api.AttachDocumentRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChangePack change_pack = 3;
 * @return {?proto.api.ChangePack}
 */
proto.api.AttachDocumentRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 3));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.AttachDocumentRequest} returns this
*/
proto.api.AttachDocumentRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.AttachDocumentRequest} returns this
 */
proto.api.AttachDocumentRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.AttachDocumentRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AttachDocumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AttachDocumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AttachDocumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AttachDocumentResponse}
 */
proto.api.AttachDocumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AttachDocumentResponse;
  return proto.api.AttachDocumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AttachDocumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AttachDocumentResponse}
 */
proto.api.AttachDocumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AttachDocumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AttachDocumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AttachDocumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AttachDocumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.api.AttachDocumentResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.AttachDocumentResponse} returns this
 */
proto.api.AttachDocumentResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.AttachDocumentResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.AttachDocumentResponse} returns this
*/
proto.api.AttachDocumentResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.AttachDocumentResponse} returns this
 */
proto.api.AttachDocumentResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.AttachDocumentResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DetachDocumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DetachDocumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DetachDocumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DetachDocumentRequest}
 */
proto.api.DetachDocumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DetachDocumentRequest;
  return proto.api.DetachDocumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DetachDocumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DetachDocumentRequest}
 */
proto.api.DetachDocumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DetachDocumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DetachDocumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DetachDocumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.DetachDocumentRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.DetachDocumentRequest} returns this
*/
proto.api.DetachDocumentRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DetachDocumentRequest} returns this
 */
proto.api.DetachDocumentRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DetachDocumentRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.DetachDocumentRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DetachDocumentRequest} returns this
 */
proto.api.DetachDocumentRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChangePack change_pack = 3;
 * @return {?proto.api.ChangePack}
 */
proto.api.DetachDocumentRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 3));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.DetachDocumentRequest} returns this
*/
proto.api.DetachDocumentRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DetachDocumentRequest} returns this
 */
proto.api.DetachDocumentRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DetachDocumentRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DetachDocumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DetachDocumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DetachDocumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DetachDocumentResponse}
 */
proto.api.DetachDocumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DetachDocumentResponse;
  return proto.api.DetachDocumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DetachDocumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DetachDocumentResponse}
 */
proto.api.DetachDocumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientKey(value);
      break;
    case 2:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DetachDocumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DetachDocumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DetachDocumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DetachDocumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_key = 1;
 * @return {string}
 */
proto.api.DetachDocumentResponse.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DetachDocumentResponse} returns this
 */
proto.api.DetachDocumentResponse.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.DetachDocumentResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.DetachDocumentResponse} returns this
*/
proto.api.DetachDocumentResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.DetachDocumentResponse} returns this
 */
proto.api.DetachDocumentResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.DetachDocumentResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.WatchDocumentsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    documentKeysList: jspb.Message.toObjectList(msg.getDocumentKeysList(),
    proto.api.DocumentKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsRequest}
 */
proto.api.WatchDocumentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsRequest;
  return proto.api.WatchDocumentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsRequest}
 */
proto.api.WatchDocumentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = new proto.api.DocumentKey;
      reader.readMessage(value,proto.api.DocumentKey.deserializeBinaryFromReader);
      msg.addDocumentKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDocumentKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.DocumentKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.WatchDocumentsRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.WatchDocumentsRequest} returns this
*/
proto.api.WatchDocumentsRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.WatchDocumentsRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated DocumentKey document_keys = 3;
 * @return {!Array<!proto.api.DocumentKey>}
 */
proto.api.WatchDocumentsRequest.prototype.getDocumentKeysList = function() {
  return /** @type{!Array<!proto.api.DocumentKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.DocumentKey, 3));
};


/**
 * @param {!Array<!proto.api.DocumentKey>} value
 * @return {!proto.api.WatchDocumentsRequest} returns this
*/
proto.api.WatchDocumentsRequest.prototype.setDocumentKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.DocumentKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.DocumentKey}
 */
proto.api.WatchDocumentsRequest.prototype.addDocumentKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.DocumentKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.WatchDocumentsRequest} returns this
 */
proto.api.WatchDocumentsRequest.prototype.clearDocumentKeysList = function() {
  return this.setDocumentKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Clients.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Clients.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Clients.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Clients} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Clients.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Clients}
 */
proto.api.Clients.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Clients;
  return proto.api.Clients.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Clients} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Clients}
 */
proto.api.Clients.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addClientIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Clients.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Clients.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Clients} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Clients.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string client_ids = 1;
 * @return {!Array<string>}
 */
proto.api.Clients.prototype.getClientIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.Clients} returns this
 */
proto.api.Clients.prototype.setClientIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.Clients} returns this
 */
proto.api.Clients.prototype.addClientIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Clients} returns this
 */
proto.api.Clients.prototype.clearClientIdsList = function() {
  return this.setClientIdsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.WatchDocumentsResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.api.WatchDocumentsResponse.BodyCase = {
  BODY_NOT_SET: 0,
  INITIALIZATION: 1,
  EVENT: 2
};

/**
 * @return {proto.api.WatchDocumentsResponse.BodyCase}
 */
proto.api.WatchDocumentsResponse.prototype.getBodyCase = function() {
  return /** @type {proto.api.WatchDocumentsResponse.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.WatchDocumentsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialization: (f = msg.getInitialization()) && proto.api.WatchDocumentsResponse.Initialization.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.api.WatchDocumentsResponse.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsResponse}
 */
proto.api.WatchDocumentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsResponse;
  return proto.api.WatchDocumentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsResponse}
 */
proto.api.WatchDocumentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.WatchDocumentsResponse.Initialization;
      reader.readMessage(value,proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader);
      msg.setInitialization(value);
      break;
    case 2:
      var value = new proto.api.WatchDocumentsResponse.Event;
      reader.readMessage(value,proto.api.WatchDocumentsResponse.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.WatchDocumentsResponse.Event.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsResponse.Initialization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsResponse.Initialization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Initialization.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersMapByDocMap: (f = msg.getPeersMapByDocMap()) ? f.toObject(includeInstance, proto.api.Clients.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.Initialization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsResponse.Initialization;
  return proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsResponse.Initialization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.Initialization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPeersMapByDocMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.Clients.deserializeBinaryFromReader, "", new proto.api.Clients());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsResponse.Initialization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Initialization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersMapByDocMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.Clients.serializeBinaryToWriter);
  }
};


/**
 * map<string, Clients> peers_map_by_doc = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.Clients>}
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.getPeersMapByDocMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.Clients>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.api.Clients));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.WatchDocumentsResponse.Initialization} returns this
 */
proto.api.WatchDocumentsResponse.Initialization.prototype.clearPeersMapByDocMap = function() {
  this.getPeersMapByDocMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.WatchDocumentsResponse.Event.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.WatchDocumentsResponse.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.api.WatchDocumentsResponse.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.WatchDocumentsResponse.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    documentKeysList: jspb.Message.toObjectList(msg.getDocumentKeysList(),
    proto.api.DocumentKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.WatchDocumentsResponse.Event}
 */
proto.api.WatchDocumentsResponse.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.WatchDocumentsResponse.Event;
  return proto.api.WatchDocumentsResponse.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.WatchDocumentsResponse.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.WatchDocumentsResponse.Event}
 */
proto.api.WatchDocumentsResponse.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {!proto.api.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 3:
      var value = new proto.api.DocumentKey;
      reader.readMessage(value,proto.api.DocumentKey.deserializeBinaryFromReader);
      msg.addDocumentKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.WatchDocumentsResponse.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.WatchDocumentsResponse.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.WatchDocumentsResponse.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.WatchDocumentsResponse.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDocumentKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.DocumentKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.api.WatchDocumentsResponse.Event.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.WatchDocumentsResponse.Event} returns this
 */
proto.api.WatchDocumentsResponse.Event.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EventType event_type = 2;
 * @return {!proto.api.EventType}
 */
proto.api.WatchDocumentsResponse.Event.prototype.getEventType = function() {
  return /** @type {!proto.api.EventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.api.EventType} value
 * @return {!proto.api.WatchDocumentsResponse.Event} returns this
 */
proto.api.WatchDocumentsResponse.Event.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated DocumentKey document_keys = 3;
 * @return {!Array<!proto.api.DocumentKey>}
 */
proto.api.WatchDocumentsResponse.Event.prototype.getDocumentKeysList = function() {
  return /** @type{!Array<!proto.api.DocumentKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.DocumentKey, 3));
};


/**
 * @param {!Array<!proto.api.DocumentKey>} value
 * @return {!proto.api.WatchDocumentsResponse.Event} returns this
*/
proto.api.WatchDocumentsResponse.Event.prototype.setDocumentKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.DocumentKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.DocumentKey}
 */
proto.api.WatchDocumentsResponse.Event.prototype.addDocumentKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.DocumentKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.WatchDocumentsResponse.Event} returns this
 */
proto.api.WatchDocumentsResponse.Event.prototype.clearDocumentKeysList = function() {
  return this.setDocumentKeysList([]);
};


/**
 * optional Initialization initialization = 1;
 * @return {?proto.api.WatchDocumentsResponse.Initialization}
 */
proto.api.WatchDocumentsResponse.prototype.getInitialization = function() {
  return /** @type{?proto.api.WatchDocumentsResponse.Initialization} */ (
    jspb.Message.getWrapperField(this, proto.api.WatchDocumentsResponse.Initialization, 1));
};


/**
 * @param {?proto.api.WatchDocumentsResponse.Initialization|undefined} value
 * @return {!proto.api.WatchDocumentsResponse} returns this
*/
proto.api.WatchDocumentsResponse.prototype.setInitialization = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.WatchDocumentsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsResponse} returns this
 */
proto.api.WatchDocumentsResponse.prototype.clearInitialization = function() {
  return this.setInitialization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsResponse.prototype.hasInitialization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event event = 2;
 * @return {?proto.api.WatchDocumentsResponse.Event}
 */
proto.api.WatchDocumentsResponse.prototype.getEvent = function() {
  return /** @type{?proto.api.WatchDocumentsResponse.Event} */ (
    jspb.Message.getWrapperField(this, proto.api.WatchDocumentsResponse.Event, 2));
};


/**
 * @param {?proto.api.WatchDocumentsResponse.Event|undefined} value
 * @return {!proto.api.WatchDocumentsResponse} returns this
*/
proto.api.WatchDocumentsResponse.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.WatchDocumentsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.WatchDocumentsResponse} returns this
 */
proto.api.WatchDocumentsResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.WatchDocumentsResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PushPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PushPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PushPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.api.RequestHeader.toObject(includeInstance, f),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PushPullRequest}
 */
proto.api.PushPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PushPullRequest;
  return proto.api.PushPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PushPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PushPullRequest}
 */
proto.api.PushPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestHeader;
      reader.readMessage(value,proto.api.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PushPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PushPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PushPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.api.RequestHeader}
 */
proto.api.PushPullRequest.prototype.getHeader = function() {
  return /** @type{?proto.api.RequestHeader} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestHeader, 1));
};


/**
 * @param {?proto.api.RequestHeader|undefined} value
 * @return {!proto.api.PushPullRequest} returns this
*/
proto.api.PushPullRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PushPullRequest} returns this
 */
proto.api.PushPullRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PushPullRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.api.PushPullRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.PushPullRequest} returns this
 */
proto.api.PushPullRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChangePack change_pack = 3;
 * @return {?proto.api.ChangePack}
 */
proto.api.PushPullRequest.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 3));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.PushPullRequest} returns this
*/
proto.api.PushPullRequest.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PushPullRequest} returns this
 */
proto.api.PushPullRequest.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PushPullRequest.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PushPullResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PushPullResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PushPullResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changePack: (f = msg.getChangePack()) && proto.api.ChangePack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PushPullResponse}
 */
proto.api.PushPullResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PushPullResponse;
  return proto.api.PushPullResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PushPullResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PushPullResponse}
 */
proto.api.PushPullResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.api.ChangePack;
      reader.readMessage(value,proto.api.ChangePack.deserializeBinaryFromReader);
      msg.setChangePack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PushPullResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PushPullResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PushPullResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PushPullResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangePack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.ChangePack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.api.PushPullResponse.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.PushPullResponse} returns this
 */
proto.api.PushPullResponse.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChangePack change_pack = 2;
 * @return {?proto.api.ChangePack}
 */
proto.api.PushPullResponse.prototype.getChangePack = function() {
  return /** @type{?proto.api.ChangePack} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangePack, 2));
};


/**
 * @param {?proto.api.ChangePack|undefined} value
 * @return {!proto.api.PushPullResponse} returns this
*/
proto.api.PushPullResponse.prototype.setChangePack = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PushPullResponse} returns this
 */
proto.api.PushPullResponse.prototype.clearChangePack = function() {
  return this.setChangePack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PushPullResponse.prototype.hasChangePack = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ChangePack.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ChangePack.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ChangePack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ChangePack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangePack.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentKey: (f = msg.getDocumentKey()) && proto.api.DocumentKey.toObject(includeInstance, f),
    checkpoint: (f = msg.getCheckpoint()) && proto.api.Checkpoint.toObject(includeInstance, f),
    snapshot: msg.getSnapshot_asB64(),
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.api.Change.toObject, includeInstance),
    minSyncedTicket: (f = msg.getMinSyncedTicket()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ChangePack}
 */
proto.api.ChangePack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ChangePack;
  return proto.api.ChangePack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ChangePack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ChangePack}
 */
proto.api.ChangePack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.DocumentKey;
      reader.readMessage(value,proto.api.DocumentKey.deserializeBinaryFromReader);
      msg.setDocumentKey(value);
      break;
    case 2:
      var value = new proto.api.Checkpoint;
      reader.readMessage(value,proto.api.Checkpoint.deserializeBinaryFromReader);
      msg.setCheckpoint(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSnapshot(value);
      break;
    case 4:
      var value = new proto.api.Change;
      reader.readMessage(value,proto.api.Change.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setMinSyncedTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ChangePack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ChangePack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ChangePack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangePack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.DocumentKey.serializeBinaryToWriter
    );
  }
  f = message.getCheckpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Checkpoint.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.Change.serializeBinaryToWriter
    );
  }
  f = message.getMinSyncedTicket();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional DocumentKey document_key = 1;
 * @return {?proto.api.DocumentKey}
 */
proto.api.ChangePack.prototype.getDocumentKey = function() {
  return /** @type{?proto.api.DocumentKey} */ (
    jspb.Message.getWrapperField(this, proto.api.DocumentKey, 1));
};


/**
 * @param {?proto.api.DocumentKey|undefined} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setDocumentKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearDocumentKey = function() {
  return this.setDocumentKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ChangePack.prototype.hasDocumentKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Checkpoint checkpoint = 2;
 * @return {?proto.api.Checkpoint}
 */
proto.api.ChangePack.prototype.getCheckpoint = function() {
  return /** @type{?proto.api.Checkpoint} */ (
    jspb.Message.getWrapperField(this, proto.api.Checkpoint, 2));
};


/**
 * @param {?proto.api.Checkpoint|undefined} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setCheckpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearCheckpoint = function() {
  return this.setCheckpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ChangePack.prototype.hasCheckpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes snapshot = 3;
 * @return {string}
 */
proto.api.ChangePack.prototype.getSnapshot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes snapshot = 3;
 * This is a type-conversion wrapper around `getSnapshot()`
 * @return {string}
 */
proto.api.ChangePack.prototype.getSnapshot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSnapshot()));
};


/**
 * optional bytes snapshot = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSnapshot()`
 * @return {!Uint8Array}
 */
proto.api.ChangePack.prototype.getSnapshot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSnapshot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.setSnapshot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Change changes = 4;
 * @return {!Array<!proto.api.Change>}
 */
proto.api.ChangePack.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.api.Change>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Change, 4));
};


/**
 * @param {!Array<!proto.api.Change>} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.Change=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Change}
 */
proto.api.ChangePack.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.Change, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};


/**
 * optional TimeTicket min_synced_ticket = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.ChangePack.prototype.getMinSyncedTicket = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.ChangePack} returns this
*/
proto.api.ChangePack.prototype.setMinSyncedTicket = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.ChangePack} returns this
 */
proto.api.ChangePack.prototype.clearMinSyncedTicket = function() {
  return this.setMinSyncedTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.ChangePack.prototype.hasMinSyncedTicket = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Change.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Change.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Change.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Change} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Change.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.ChangeID.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.api.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Change}
 */
proto.api.Change.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Change;
  return proto.api.Change.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Change} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Change}
 */
proto.api.Change.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ChangeID;
      reader.readMessage(value,proto.api.ChangeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.api.Operation;
      reader.readMessage(value,proto.api.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Change.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Change.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Change} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Change.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ChangeID.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChangeID id = 1;
 * @return {?proto.api.ChangeID}
 */
proto.api.Change.prototype.getId = function() {
  return /** @type{?proto.api.ChangeID} */ (
    jspb.Message.getWrapperField(this, proto.api.ChangeID, 1));
};


/**
 * @param {?proto.api.ChangeID|undefined} value
 * @return {!proto.api.Change} returns this
*/
proto.api.Change.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Change.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.api.Change.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Operation operations = 3;
 * @return {!Array<!proto.api.Operation>}
 */
proto.api.Change.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.api.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Operation, 3));
};


/**
 * @param {!Array<!proto.api.Operation>} value
 * @return {!proto.api.Change} returns this
*/
proto.api.Change.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Operation}
 */
proto.api.Change.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Change} returns this
 */
proto.api.Change.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ChangeID.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ChangeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ChangeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientSeq: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lamport: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    actorId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ChangeID}
 */
proto.api.ChangeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ChangeID;
  return proto.api.ChangeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ChangeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ChangeID}
 */
proto.api.ChangeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientSeq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLamport(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ChangeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ChangeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ChangeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ChangeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientSeq();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLamport();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 client_seq = 1;
 * @return {number}
 */
proto.api.ChangeID.prototype.getClientSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setClientSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 lamport = 2;
 * @return {string}
 */
proto.api.ChangeID.prototype.getLamport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setLamport = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string actor_id = 3;
 * @return {string}
 */
proto.api.ChangeID.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.ChangeID} returns this
 */
proto.api.ChangeID.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Operation.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.api.Operation.BodyCase = {
  BODY_NOT_SET: 0,
  SET: 1,
  ADD: 2,
  MOVE: 3,
  REMOVE: 4,
  EDIT: 5,
  SELECT: 6,
  RICH_EDIT: 7,
  STYLE: 8
};

/**
 * @return {proto.api.Operation.BodyCase}
 */
proto.api.Operation.prototype.getBodyCase = function() {
  return /** @type {proto.api.Operation.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.Operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    set: (f = msg.getSet()) && proto.api.Operation.Set.toObject(includeInstance, f),
    add: (f = msg.getAdd()) && proto.api.Operation.Add.toObject(includeInstance, f),
    move: (f = msg.getMove()) && proto.api.Operation.Move.toObject(includeInstance, f),
    remove: (f = msg.getRemove()) && proto.api.Operation.Remove.toObject(includeInstance, f),
    edit: (f = msg.getEdit()) && proto.api.Operation.Edit.toObject(includeInstance, f),
    select: (f = msg.getSelect()) && proto.api.Operation.Select.toObject(includeInstance, f),
    richEdit: (f = msg.getRichEdit()) && proto.api.Operation.RichEdit.toObject(includeInstance, f),
    style: (f = msg.getStyle()) && proto.api.Operation.Style.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation;
  return proto.api.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Operation.Set;
      reader.readMessage(value,proto.api.Operation.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 2:
      var value = new proto.api.Operation.Add;
      reader.readMessage(value,proto.api.Operation.Add.deserializeBinaryFromReader);
      msg.setAdd(value);
      break;
    case 3:
      var value = new proto.api.Operation.Move;
      reader.readMessage(value,proto.api.Operation.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 4:
      var value = new proto.api.Operation.Remove;
      reader.readMessage(value,proto.api.Operation.Remove.deserializeBinaryFromReader);
      msg.setRemove(value);
      break;
    case 5:
      var value = new proto.api.Operation.Edit;
      reader.readMessage(value,proto.api.Operation.Edit.deserializeBinaryFromReader);
      msg.setEdit(value);
      break;
    case 6:
      var value = new proto.api.Operation.Select;
      reader.readMessage(value,proto.api.Operation.Select.deserializeBinaryFromReader);
      msg.setSelect(value);
      break;
    case 7:
      var value = new proto.api.Operation.RichEdit;
      reader.readMessage(value,proto.api.Operation.RichEdit.deserializeBinaryFromReader);
      msg.setRichEdit(value);
      break;
    case 8:
      var value = new proto.api.Operation.Style;
      reader.readMessage(value,proto.api.Operation.Style.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Operation.Set.serializeBinaryToWriter
    );
  }
  f = message.getAdd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Operation.Add.serializeBinaryToWriter
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Operation.Move.serializeBinaryToWriter
    );
  }
  f = message.getRemove();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Operation.Remove.serializeBinaryToWriter
    );
  }
  f = message.getEdit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Operation.Edit.serializeBinaryToWriter
    );
  }
  f = message.getSelect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.Operation.Select.serializeBinaryToWriter
    );
  }
  f = message.getRichEdit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.Operation.RichEdit.serializeBinaryToWriter
    );
  }
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.Operation.Style.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: (f = msg.getValue()) && proto.api.JSONElementSimple.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Set}
 */
proto.api.Operation.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Set;
  return proto.api.Operation.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Set}
 */
proto.api.Operation.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = new proto.api.JSONElementSimple;
      reader.readMessage(value,proto.api.JSONElementSimple.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElementSimple.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Set.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.api.Operation.Set.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional JSONElementSimple value = 3;
 * @return {?proto.api.JSONElementSimple}
 */
proto.api.Operation.Set.prototype.getValue = function() {
  return /** @type{?proto.api.JSONElementSimple} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElementSimple, 3));
};


/**
 * @param {?proto.api.JSONElementSimple|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Set.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Set} returns this
*/
proto.api.Operation.Set.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Set} returns this
 */
proto.api.Operation.Set.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Set.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Add.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Add.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Add} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Add.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    prevCreatedAt: (f = msg.getPrevCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.api.JSONElementSimple.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Add}
 */
proto.api.Operation.Add.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Add;
  return proto.api.Operation.Add.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Add} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Add}
 */
proto.api.Operation.Add.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setPrevCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.JSONElementSimple;
      reader.readMessage(value,proto.api.JSONElementSimple.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Add.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Add.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Add} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Add.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getPrevCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElementSimple.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket prev_created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getPrevCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setPrevCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearPrevCreatedAt = function() {
  return this.setPrevCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasPrevCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JSONElementSimple value = 3;
 * @return {?proto.api.JSONElementSimple}
 */
proto.api.Operation.Add.prototype.getValue = function() {
  return /** @type{?proto.api.JSONElementSimple} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElementSimple, 3));
};


/**
 * @param {?proto.api.JSONElementSimple|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Add.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Add} returns this
*/
proto.api.Operation.Add.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Add} returns this
 */
proto.api.Operation.Add.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Add.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    prevCreatedAt: (f = msg.getPrevCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Move}
 */
proto.api.Operation.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Move;
  return proto.api.Operation.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Move}
 */
proto.api.Operation.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setPrevCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getPrevCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket prev_created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getPrevCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setPrevCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearPrevCreatedAt = function() {
  return this.setPrevCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasPrevCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket created_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Move.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Move} returns this
*/
proto.api.Operation.Move.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Move} returns this
 */
proto.api.Operation.Move.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Move.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Remove.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Remove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Remove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Remove.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Remove}
 */
proto.api.Operation.Remove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Remove;
  return proto.api.Operation.Remove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Remove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Remove}
 */
proto.api.Operation.Remove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Remove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Remove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Remove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Remove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket executed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Remove.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Remove} returns this
*/
proto.api.Operation.Remove.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Remove} returns this
 */
proto.api.Operation.Remove.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Remove.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Edit.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Edit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Edit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Edit.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    createdAtMapByActorMap: (f = msg.getCreatedAtMapByActorMap()) ? f.toObject(includeInstance, proto.api.TimeTicket.toObject) : [],
    content: jspb.Message.getFieldWithDefault(msg, 5, ""),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Edit}
 */
proto.api.Operation.Edit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Edit;
  return proto.api.Operation.Edit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Edit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Edit}
 */
proto.api.Operation.Edit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getCreatedAtMapByActorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.TimeTicket.deserializeBinaryFromReader, "", new proto.api.TimeTicket());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 6:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Edit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Edit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Edit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Edit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAtMapByActorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.TimeTicket.serializeBinaryToWriter);
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Edit.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Edit.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Edit.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TimeTicket> created_at_map_by_actor = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.TimeTicket>}
 */
proto.api.Operation.Edit.prototype.getCreatedAtMapByActorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.TimeTicket>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.api.TimeTicket));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearCreatedAtMapByActorMap = function() {
  this.getCreatedAtMapByActorMap().clear();
  return this;};


/**
 * optional string content = 5;
 * @return {string}
 */
proto.api.Operation.Edit.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TimeTicket executed_at = 6;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Edit.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 6));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Edit} returns this
*/
proto.api.Operation.Edit.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Edit} returns this
 */
proto.api.Operation.Edit.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Edit.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Select.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Select.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Select} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Select.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Select}
 */
proto.api.Operation.Select.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Select;
  return proto.api.Operation.Select.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Select} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Select}
 */
proto.api.Operation.Select.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Select.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Select.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Select} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Select.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Select.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Select.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Select.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket executed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Select.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Select} returns this
*/
proto.api.Operation.Select.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Select} returns this
 */
proto.api.Operation.Select.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Select.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.RichEdit.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.RichEdit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.RichEdit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.RichEdit.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    createdAtMapByActorMap: (f = msg.getCreatedAtMapByActorMap()) ? f.toObject(includeInstance, proto.api.TimeTicket.toObject) : [],
    content: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.RichEdit}
 */
proto.api.Operation.RichEdit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.RichEdit;
  return proto.api.Operation.RichEdit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.RichEdit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.RichEdit}
 */
proto.api.Operation.RichEdit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getCreatedAtMapByActorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.TimeTicket.deserializeBinaryFromReader, "", new proto.api.TimeTicket());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 6:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.RichEdit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.RichEdit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.RichEdit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.RichEdit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAtMapByActorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.TimeTicket.serializeBinaryToWriter);
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.RichEdit.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.RichEdit.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.RichEdit.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TimeTicket> created_at_map_by_actor = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.TimeTicket>}
 */
proto.api.Operation.RichEdit.prototype.getCreatedAtMapByActorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.TimeTicket>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.api.TimeTicket));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearCreatedAtMapByActorMap = function() {
  this.getCreatedAtMapByActorMap().clear();
  return this;};


/**
 * optional string content = 5;
 * @return {string}
 */
proto.api.Operation.RichEdit.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, string> attributes = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Operation.RichEdit.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional TimeTicket executed_at = 7;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.RichEdit.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 7));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.RichEdit} returns this
*/
proto.api.Operation.RichEdit.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.RichEdit} returns this
 */
proto.api.Operation.RichEdit.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.RichEdit.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Style.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentCreatedAt: (f = msg.getParentCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.api.TextNodePos.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.TextNodePos.toObject(includeInstance, f),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    executedAt: (f = msg.getExecutedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation.Style}
 */
proto.api.Operation.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation.Style;
  return proto.api.Operation.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation.Style}
 */
proto.api.Operation.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setParentCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.api.TextNodePos;
      reader.readMessage(value,proto.api.TextNodePos.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TextNodePos.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeTicket parent_created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Style.prototype.getParentCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setParentCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearParentCreatedAt = function() {
  return this.setParentCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasParentCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextNodePos from = 2;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Style.prototype.getFrom = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 2));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextNodePos to = 3;
 * @return {?proto.api.TextNodePos}
 */
proto.api.Operation.Style.prototype.getTo = function() {
  return /** @type{?proto.api.TextNodePos} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodePos, 3));
};


/**
 * @param {?proto.api.TextNodePos|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> attributes = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Operation.Style.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional TimeTicket executed_at = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.Operation.Style.prototype.getExecutedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.Operation.Style} returns this
*/
proto.api.Operation.Style.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation.Style} returns this
 */
proto.api.Operation.Style.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.Style.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Set set = 1;
 * @return {?proto.api.Operation.Set}
 */
proto.api.Operation.prototype.getSet = function() {
  return /** @type{?proto.api.Operation.Set} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Set, 1));
};


/**
 * @param {?proto.api.Operation.Set|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Add add = 2;
 * @return {?proto.api.Operation.Add}
 */
proto.api.Operation.prototype.getAdd = function() {
  return /** @type{?proto.api.Operation.Add} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Add, 2));
};


/**
 * @param {?proto.api.Operation.Add|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setAdd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearAdd = function() {
  return this.setAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasAdd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Move move = 3;
 * @return {?proto.api.Operation.Move}
 */
proto.api.Operation.prototype.getMove = function() {
  return /** @type{?proto.api.Operation.Move} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Move, 3));
};


/**
 * @param {?proto.api.Operation.Move|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasMove = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Remove remove = 4;
 * @return {?proto.api.Operation.Remove}
 */
proto.api.Operation.prototype.getRemove = function() {
  return /** @type{?proto.api.Operation.Remove} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Remove, 4));
};


/**
 * @param {?proto.api.Operation.Remove|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setRemove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearRemove = function() {
  return this.setRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasRemove = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Edit edit = 5;
 * @return {?proto.api.Operation.Edit}
 */
proto.api.Operation.prototype.getEdit = function() {
  return /** @type{?proto.api.Operation.Edit} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Edit, 5));
};


/**
 * @param {?proto.api.Operation.Edit|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setEdit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearEdit = function() {
  return this.setEdit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasEdit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Select select = 6;
 * @return {?proto.api.Operation.Select}
 */
proto.api.Operation.prototype.getSelect = function() {
  return /** @type{?proto.api.Operation.Select} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Select, 6));
};


/**
 * @param {?proto.api.Operation.Select|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setSelect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearSelect = function() {
  return this.setSelect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasSelect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RichEdit rich_edit = 7;
 * @return {?proto.api.Operation.RichEdit}
 */
proto.api.Operation.prototype.getRichEdit = function() {
  return /** @type{?proto.api.Operation.RichEdit} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.RichEdit, 7));
};


/**
 * @param {?proto.api.Operation.RichEdit|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setRichEdit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearRichEdit = function() {
  return this.setRichEdit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasRichEdit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Style style = 8;
 * @return {?proto.api.Operation.Style}
 */
proto.api.Operation.prototype.getStyle = function() {
  return /** @type{?proto.api.Operation.Style} */ (
    jspb.Message.getWrapperField(this, proto.api.Operation.Style, 8));
};


/**
 * @param {?proto.api.Operation.Style|undefined} value
 * @return {!proto.api.Operation} returns this
*/
proto.api.Operation.prototype.setStyle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.api.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.clearStyle = function() {
  return this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Operation.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElementSimple.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElementSimple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElementSimple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElementSimple.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElementSimple}
 */
proto.api.JSONElementSimple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElementSimple;
  return proto.api.JSONElementSimple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElementSimple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElementSimple}
 */
proto.api.JSONElementSimple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 4:
      var value = /** @type {!proto.api.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElementSimple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElementSimple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElementSimple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElementSimple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeTicket updated_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket removed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElementSimple.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElementSimple} returns this
*/
proto.api.JSONElementSimple.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElementSimple.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ValueType type = 4;
 * @return {!proto.api.ValueType}
 */
proto.api.JSONElementSimple.prototype.getType = function() {
  return /** @type {!proto.api.ValueType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.api.ValueType} value
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes value = 5;
 * @return {string}
 */
proto.api.JSONElementSimple.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes value = 5;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.JSONElementSimple.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.JSONElementSimple.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.JSONElementSimple} returns this
 */
proto.api.JSONElementSimple.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.JSONElement.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.api.JSONElement.BodyCase = {
  BODY_NOT_SET: 0,
  OBJECT: 1,
  ARRAY: 2,
  PRIMITIVE: 3,
  TEXT: 4,
  RICH_TEXT: 5
};

/**
 * @return {proto.api.JSONElement.BodyCase}
 */
proto.api.JSONElement.prototype.getBodyCase = function() {
  return /** @type {proto.api.JSONElement.BodyCase} */(jspb.Message.computeOneofCase(this, proto.api.JSONElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: (f = msg.getObject()) && proto.api.JSONElement.Object.toObject(includeInstance, f),
    array: (f = msg.getArray()) && proto.api.JSONElement.Array.toObject(includeInstance, f),
    primitive: (f = msg.getPrimitive()) && proto.api.JSONElement.Primitive.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.api.JSONElement.Text.toObject(includeInstance, f),
    richText: (f = msg.getRichText()) && proto.api.JSONElement.RichText.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement}
 */
proto.api.JSONElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement;
  return proto.api.JSONElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement}
 */
proto.api.JSONElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.JSONElement.Object;
      reader.readMessage(value,proto.api.JSONElement.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 2:
      var value = new proto.api.JSONElement.Array;
      reader.readMessage(value,proto.api.JSONElement.Array.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    case 3:
      var value = new proto.api.JSONElement.Primitive;
      reader.readMessage(value,proto.api.JSONElement.Primitive.deserializeBinaryFromReader);
      msg.setPrimitive(value);
      break;
    case 4:
      var value = new proto.api.JSONElement.Text;
      reader.readMessage(value,proto.api.JSONElement.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 5:
      var value = new proto.api.JSONElement.RichText;
      reader.readMessage(value,proto.api.JSONElement.RichText.deserializeBinaryFromReader);
      msg.setRichText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.JSONElement.Object.serializeBinaryToWriter
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.Array.serializeBinaryToWriter
    );
  }
  f = message.getPrimitive();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.JSONElement.Primitive.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.JSONElement.Text.serializeBinaryToWriter
    );
  }
  f = message.getRichText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.JSONElement.RichText.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.Object.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RHTNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Object}
 */
proto.api.JSONElement.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Object;
  return proto.api.JSONElement.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Object}
 */
proto.api.JSONElement.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RHTNode;
      reader.readMessage(value,proto.api.RHTNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RHTNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RHTNode nodes = 1;
 * @return {!Array<!proto.api.RHTNode>}
 */
proto.api.JSONElement.Object.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RHTNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RHTNode, 1));
};


/**
 * @param {!Array<!proto.api.RHTNode>} value
 * @return {!proto.api.JSONElement.Object} returns this
*/
proto.api.JSONElement.Object.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RHTNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RHTNode}
 */
proto.api.JSONElement.Object.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RHTNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.Object} returns this
 */
proto.api.JSONElement.Object.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Object.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Object} returns this
*/
proto.api.JSONElement.Object.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Object} returns this
 */
proto.api.JSONElement.Object.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Object.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Object.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Object} returns this
*/
proto.api.JSONElement.Object.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Object} returns this
 */
proto.api.JSONElement.Object.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Object.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Object.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Object} returns this
*/
proto.api.JSONElement.Object.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Object} returns this
 */
proto.api.JSONElement.Object.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Object.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RGANode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Array}
 */
proto.api.JSONElement.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Array;
  return proto.api.JSONElement.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Array}
 */
proto.api.JSONElement.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RGANode;
      reader.readMessage(value,proto.api.RGANode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RGANode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RGANode nodes = 1;
 * @return {!Array<!proto.api.RGANode>}
 */
proto.api.JSONElement.Array.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RGANode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RGANode, 1));
};


/**
 * @param {!Array<!proto.api.RGANode>} value
 * @return {!proto.api.JSONElement.Array} returns this
*/
proto.api.JSONElement.Array.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RGANode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RGANode}
 */
proto.api.JSONElement.Array.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RGANode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.Array} returns this
 */
proto.api.JSONElement.Array.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Array.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Array} returns this
*/
proto.api.JSONElement.Array.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Array} returns this
 */
proto.api.JSONElement.Array.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Array.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Array.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Array} returns this
*/
proto.api.JSONElement.Array.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Array} returns this
 */
proto.api.JSONElement.Array.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Array.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Array.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Array} returns this
*/
proto.api.JSONElement.Array.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Array} returns this
 */
proto.api.JSONElement.Array.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Array.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Primitive.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Primitive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Primitive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Primitive.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.Primitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Primitive;
  return proto.api.JSONElement.Primitive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Primitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.Primitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 5:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Primitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Primitive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Primitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Primitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueType type = 1;
 * @return {!proto.api.ValueType}
 */
proto.api.JSONElement.Primitive.prototype.getType = function() {
  return /** @type {!proto.api.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.ValueType} value
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.api.JSONElement.Primitive.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.JSONElement.Primitive.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Primitive.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional TimeTicket created_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket updated_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimeTicket removed_at = 5;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Primitive.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 5));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Primitive} returns this
*/
proto.api.JSONElement.Primitive.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Primitive} returns this
 */
proto.api.JSONElement.Primitive.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Primitive.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.Text.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.TextNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.Text}
 */
proto.api.JSONElement.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.Text;
  return proto.api.JSONElement.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.Text}
 */
proto.api.JSONElement.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNode;
      reader.readMessage(value,proto.api.TextNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.TextNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TextNode nodes = 1;
 * @return {!Array<!proto.api.TextNode>}
 */
proto.api.JSONElement.Text.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.TextNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.TextNode, 1));
};


/**
 * @param {!Array<!proto.api.TextNode>} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.TextNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.TextNode}
 */
proto.api.JSONElement.Text.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.TextNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.Text.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.Text} returns this
*/
proto.api.JSONElement.Text.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.Text} returns this
 */
proto.api.JSONElement.Text.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.Text.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.JSONElement.RichText.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JSONElement.RichText.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JSONElement.RichText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JSONElement.RichText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.RichText.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.api.RichTextNode.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.RichText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JSONElement.RichText;
  return proto.api.JSONElement.RichText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JSONElement.RichText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.RichText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RichTextNode;
      reader.readMessage(value,proto.api.RichTextNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JSONElement.RichText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JSONElement.RichText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JSONElement.RichText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JSONElement.RichText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.RichTextNode.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RichTextNode nodes = 1;
 * @return {!Array<!proto.api.RichTextNode>}
 */
proto.api.JSONElement.RichText.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.api.RichTextNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.RichTextNode, 1));
};


/**
 * @param {!Array<!proto.api.RichTextNode>} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.RichTextNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.RichTextNode}
 */
proto.api.JSONElement.RichText.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.RichTextNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional TimeTicket created_at = 2;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 2));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.JSONElement.RichText.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.JSONElement.RichText} returns this
*/
proto.api.JSONElement.RichText.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement.RichText} returns this
 */
proto.api.JSONElement.RichText.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.RichText.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Object object = 1;
 * @return {?proto.api.JSONElement.Object}
 */
proto.api.JSONElement.prototype.getObject = function() {
  return /** @type{?proto.api.JSONElement.Object} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Object, 1));
};


/**
 * @param {?proto.api.JSONElement.Object|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Array array = 2;
 * @return {?proto.api.JSONElement.Array}
 */
proto.api.JSONElement.prototype.getArray = function() {
  return /** @type{?proto.api.JSONElement.Array} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Array, 2));
};


/**
 * @param {?proto.api.JSONElement.Array|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setArray = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearArray = function() {
  return this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasArray = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Primitive primitive = 3;
 * @return {?proto.api.JSONElement.Primitive}
 */
proto.api.JSONElement.prototype.getPrimitive = function() {
  return /** @type{?proto.api.JSONElement.Primitive} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Primitive, 3));
};


/**
 * @param {?proto.api.JSONElement.Primitive|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setPrimitive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearPrimitive = function() {
  return this.setPrimitive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasPrimitive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Text text = 4;
 * @return {?proto.api.JSONElement.Text}
 */
proto.api.JSONElement.prototype.getText = function() {
  return /** @type{?proto.api.JSONElement.Text} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.Text, 4));
};


/**
 * @param {?proto.api.JSONElement.Text|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RichText rich_text = 5;
 * @return {?proto.api.JSONElement.RichText}
 */
proto.api.JSONElement.prototype.getRichText = function() {
  return /** @type{?proto.api.JSONElement.RichText} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement.RichText, 5));
};


/**
 * @param {?proto.api.JSONElement.RichText|undefined} value
 * @return {!proto.api.JSONElement} returns this
*/
proto.api.JSONElement.prototype.setRichText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.JSONElement.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.JSONElement} returns this
 */
proto.api.JSONElement.prototype.clearRichText = function() {
  return this.setRichText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.JSONElement.prototype.hasRichText = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RHTNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RHTNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RHTNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RHTNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    element: (f = msg.getElement()) && proto.api.JSONElement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RHTNode}
 */
proto.api.RHTNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RHTNode;
  return proto.api.RHTNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RHTNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RHTNode}
 */
proto.api.RHTNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.api.JSONElement;
      reader.readMessage(value,proto.api.JSONElement.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RHTNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RHTNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RHTNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RHTNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.RHTNode.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RHTNode} returns this
 */
proto.api.RHTNode.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JSONElement element = 2;
 * @return {?proto.api.JSONElement}
 */
proto.api.RHTNode.prototype.getElement = function() {
  return /** @type{?proto.api.JSONElement} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement, 2));
};


/**
 * @param {?proto.api.JSONElement|undefined} value
 * @return {!proto.api.RHTNode} returns this
*/
proto.api.RHTNode.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RHTNode} returns this
 */
proto.api.RHTNode.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RHTNode.prototype.hasElement = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RGANode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RGANode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RGANode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RGANode.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: (f = msg.getNext()) && proto.api.RGANode.toObject(includeInstance, f),
    element: (f = msg.getElement()) && proto.api.JSONElement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RGANode}
 */
proto.api.RGANode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RGANode;
  return proto.api.RGANode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RGANode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RGANode}
 */
proto.api.RGANode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RGANode;
      reader.readMessage(value,proto.api.RGANode.deserializeBinaryFromReader);
      msg.setNext(value);
      break;
    case 2:
      var value = new proto.api.JSONElement;
      reader.readMessage(value,proto.api.JSONElement.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RGANode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RGANode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RGANode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RGANode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RGANode.serializeBinaryToWriter
    );
  }
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.JSONElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional RGANode next = 1;
 * @return {?proto.api.RGANode}
 */
proto.api.RGANode.prototype.getNext = function() {
  return /** @type{?proto.api.RGANode} */ (
    jspb.Message.getWrapperField(this, proto.api.RGANode, 1));
};


/**
 * @param {?proto.api.RGANode|undefined} value
 * @return {!proto.api.RGANode} returns this
*/
proto.api.RGANode.prototype.setNext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RGANode} returns this
 */
proto.api.RGANode.prototype.clearNext = function() {
  return this.setNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RGANode.prototype.hasNext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JSONElement element = 2;
 * @return {?proto.api.JSONElement}
 */
proto.api.RGANode.prototype.getElement = function() {
  return /** @type{?proto.api.JSONElement} */ (
    jspb.Message.getWrapperField(this, proto.api.JSONElement, 2));
};


/**
 * @param {?proto.api.JSONElement|undefined} value
 * @return {!proto.api.RGANode} returns this
*/
proto.api.RGANode.prototype.setElement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RGANode} returns this
 */
proto.api.RGANode.prototype.clearElement = function() {
  return this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RGANode.prototype.hasElement = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.TextNodeID.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    insPrevId: (f = msg.getInsPrevId()) && proto.api.TextNodeID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNode}
 */
proto.api.TextNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNode;
  return proto.api.TextNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNode}
 */
proto.api.TextNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 4:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setInsPrevId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getInsPrevId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextNodeID id = 1;
 * @return {?proto.api.TextNodeID}
 */
proto.api.TextNode.prototype.getId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 1));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.TextNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TimeTicket removed_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNode.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TextNodeID ins_prev_id = 4;
 * @return {?proto.api.TextNodeID}
 */
proto.api.TextNode.prototype.getInsPrevId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 4));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.TextNode} returns this
*/
proto.api.TextNode.prototype.setInsPrevId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNode} returns this
 */
proto.api.TextNode.prototype.clearInsPrevId = function() {
  return this.setInsPrevId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNode.prototype.hasInsPrevId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RichTextNodeAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RichTextNodeAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RichTextNodeAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNodeAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedAt: (f = msg.getUpdatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RichTextNodeAttr}
 */
proto.api.RichTextNodeAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RichTextNodeAttr;
  return proto.api.RichTextNodeAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RichTextNodeAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RichTextNodeAttr}
 */
proto.api.RichTextNodeAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RichTextNodeAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RichTextNodeAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RichTextNodeAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNodeAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.RichTextNodeAttr.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.RichTextNodeAttr.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TimeTicket updated_at = 3;
 * @return {?proto.api.TimeTicket}
 */
proto.api.RichTextNodeAttr.prototype.getUpdatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 3));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.RichTextNodeAttr} returns this
*/
proto.api.RichTextNodeAttr.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNodeAttr} returns this
 */
proto.api.RichTextNodeAttr.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNodeAttr.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RichTextNode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RichTextNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RichTextNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.api.TextNodeID.toObject(includeInstance, f),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.api.RichTextNodeAttr.toObject) : [],
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    removedAt: (f = msg.getRemovedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    insPrevId: (f = msg.getInsPrevId()) && proto.api.TextNodeID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RichTextNode}
 */
proto.api.RichTextNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RichTextNode;
  return proto.api.RichTextNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RichTextNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RichTextNode}
 */
proto.api.RichTextNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.RichTextNodeAttr.deserializeBinaryFromReader, "", new proto.api.RichTextNodeAttr());
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setRemovedAt(value);
      break;
    case 5:
      var value = new proto.api.TextNodeID;
      reader.readMessage(value,proto.api.TextNodeID.deserializeBinaryFromReader);
      msg.setInsPrevId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RichTextNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RichTextNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RichTextNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RichTextNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.RichTextNodeAttr.serializeBinaryToWriter);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemovedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getInsPrevId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.TextNodeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextNodeID id = 1;
 * @return {?proto.api.TextNodeID}
 */
proto.api.RichTextNode.prototype.getId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 1));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, RichTextNodeAttr> attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.RichTextNodeAttr>}
 */
proto.api.RichTextNode.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.RichTextNodeAttr>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.api.RichTextNodeAttr));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.api.RichTextNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TimeTicket removed_at = 4;
 * @return {?proto.api.TimeTicket}
 */
proto.api.RichTextNode.prototype.getRemovedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 4));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setRemovedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearRemovedAt = function() {
  return this.setRemovedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasRemovedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TextNodeID ins_prev_id = 5;
 * @return {?proto.api.TextNodeID}
 */
proto.api.RichTextNode.prototype.getInsPrevId = function() {
  return /** @type{?proto.api.TextNodeID} */ (
    jspb.Message.getWrapperField(this, proto.api.TextNodeID, 5));
};


/**
 * @param {?proto.api.TextNodeID|undefined} value
 * @return {!proto.api.RichTextNode} returns this
*/
proto.api.RichTextNode.prototype.setInsPrevId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.RichTextNode} returns this
 */
proto.api.RichTextNode.prototype.clearInsPrevId = function() {
  return this.setInsPrevId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.RichTextNode.prototype.hasInsPrevId = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNodeID.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNodeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNodeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNodeID}
 */
proto.api.TextNodeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNodeID;
  return proto.api.TextNodeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNodeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNodeID}
 */
proto.api.TextNodeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNodeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNodeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNodeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNodeID.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNodeID} returns this
*/
proto.api.TextNodeID.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNodeID} returns this
 */
proto.api.TextNodeID.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNodeID.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.api.TextNodeID.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodeID} returns this
 */
proto.api.TextNodeID.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DocumentKey.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DocumentKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DocumentKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocumentKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: jspb.Message.getFieldWithDefault(msg, 1, ""),
    document: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DocumentKey}
 */
proto.api.DocumentKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DocumentKey;
  return proto.api.DocumentKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DocumentKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DocumentKey}
 */
proto.api.DocumentKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DocumentKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DocumentKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DocumentKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocumentKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocument();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string collection = 1;
 * @return {string}
 */
proto.api.DocumentKey.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DocumentKey} returns this
 */
proto.api.DocumentKey.prototype.setCollection = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string document = 2;
 * @return {string}
 */
proto.api.DocumentKey.prototype.getDocument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.DocumentKey} returns this
 */
proto.api.DocumentKey.prototype.setDocument = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverSeq: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    clientSeq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Checkpoint}
 */
proto.api.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Checkpoint;
  return proto.api.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Checkpoint}
 */
proto.api.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setServerSeq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerSeq();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getClientSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 server_seq = 1;
 * @return {string}
 */
proto.api.Checkpoint.prototype.getServerSeq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.Checkpoint} returns this
 */
proto.api.Checkpoint.prototype.setServerSeq = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint32 client_seq = 2;
 * @return {number}
 */
proto.api.Checkpoint.prototype.getClientSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Checkpoint} returns this
 */
proto.api.Checkpoint.prototype.setClientSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TextNodePos.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TextNodePos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TextNodePos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodePos.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: (f = msg.getCreatedAt()) && proto.api.TimeTicket.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    relativeOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TextNodePos}
 */
proto.api.TextNodePos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TextNodePos;
  return proto.api.TextNodePos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TextNodePos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TextNodePos}
 */
proto.api.TextNodePos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TimeTicket;
      reader.readMessage(value,proto.api.TimeTicket.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelativeOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TextNodePos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TextNodePos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TextNodePos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TextNodePos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TimeTicket.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRelativeOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional TimeTicket created_at = 1;
 * @return {?proto.api.TimeTicket}
 */
proto.api.TextNodePos.prototype.getCreatedAt = function() {
  return /** @type{?proto.api.TimeTicket} */ (
    jspb.Message.getWrapperField(this, proto.api.TimeTicket, 1));
};


/**
 * @param {?proto.api.TimeTicket|undefined} value
 * @return {!proto.api.TextNodePos} returns this
*/
proto.api.TextNodePos.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TextNodePos.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.api.TextNodePos.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 relative_offset = 3;
 * @return {number}
 */
proto.api.TextNodePos.prototype.getRelativeOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TextNodePos} returns this
 */
proto.api.TextNodePos.prototype.setRelativeOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TimeTicket.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TimeTicket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TimeTicket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TimeTicket.toObject = function(includeInstance, msg) {
  var f, obj = {
    lamport: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    delimiter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actorId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TimeTicket}
 */
proto.api.TimeTicket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TimeTicket;
  return proto.api.TimeTicket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TimeTicket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TimeTicket}
 */
proto.api.TimeTicket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLamport(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelimiter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TimeTicket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TimeTicket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TimeTicket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TimeTicket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLamport();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getDelimiter();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 lamport = 1;
 * @return {string}
 */
proto.api.TimeTicket.prototype.getLamport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setLamport = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint32 delimiter = 2;
 * @return {number}
 */
proto.api.TimeTicket.prototype.getDelimiter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setDelimiter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string actor_id = 3;
 * @return {string}
 */
proto.api.TimeTicket.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TimeTicket} returns this
 */
proto.api.TimeTicket.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.api.ValueType = {
  NULL: 0,
  BOOLEAN: 1,
  INTEGER: 2,
  LONG: 3,
  DOUBLE: 4,
  STRING: 5,
  BYTES: 6,
  DATE: 7,
  JSON_OBJECT: 8,
  JSON_ARRAY: 9,
  TEXT: 10,
  RICH_TEXT: 11
};

/**
 * @enum {number}
 */
proto.api.EventType = {
  DOCUMENTS_CHANGED: 0,
  DOCUMENTS_WATCHED: 1,
  DOCUMENTS_UNWATCHED: 2
};

goog.object.extend(exports, proto.api);


/***/ }),

/***/ "./src/core/client.ts":
/*!****************************!*\
  !*** ./src/core/client.ts ***!
  \****************************/
/*! exports provided: ClientStatus, Client */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientStatus", function() { return ClientStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Client", function() { return Client; });
/* harmony import */ var _util_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/observable */ "./src/util/observable.ts");
/* harmony import */ var _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/yorkie_pb */ "./src/api/yorkie_pb.js");
/* harmony import */ var _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _api_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/converter */ "./src/api/converter.ts");
/* harmony import */ var _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/yorkie_grpc_web_pb */ "./src/api/yorkie_grpc_web_pb.js");
/* harmony import */ var _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/error */ "./src/util/error.ts");
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/uuid */ "./src/util/uuid.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var ClientStatus;
(function (ClientStatus) {
    ClientStatus[ClientStatus["Deactivated"] = 0] = "Deactivated";
    ClientStatus[ClientStatus["Activated"] = 1] = "Activated";
})(ClientStatus || (ClientStatus = {}));
var ClientEventType;
(function (ClientEventType) {
    ClientEventType["StatusChanged"] = "status-changed";
    ClientEventType["DocumentsChanged"] = "documents-changed";
    ClientEventType["DocumentsWatchingPeerChanged"] = "documents-watching-peer-changed";
})(ClientEventType || (ClientEventType = {}));
const DefaultClientOptions = {
    syncLoopDuration: 50,
    reconnectStreamDelay: 1000,
};
/**
 * Client is a normal client that can communicate with the agent.
 * It has documents and sends changes of the documents in local
 * to the agent to synchronize with other replicas in remote.
 */
class Client {
    constructor(rpcAddr, opts) {
        opts = opts || DefaultClientOptions;
        this.key = opts.key ? opts.key : Object(_util_uuid__WEBPACK_IMPORTED_MODULE_6__["uuid"])();
        this.status = ClientStatus.Deactivated;
        this.attachmentMap = new Map();
        this.syncLoopDuration = opts.syncLoopDuration;
        this.reconnectStreamDelay = opts.reconnectStreamDelay;
        this.client = new _api_yorkie_grpc_web_pb__WEBPACK_IMPORTED_MODULE_3__["YorkieClient"](rpcAddr, null, null);
        this.eventStream = Object(_util_observable__WEBPACK_IMPORTED_MODULE_0__["createObservable"])((observer) => {
            this.eventStreamObserver = observer;
        });
    }
    /**
     * ativate activates this client. That is, it register itself to the agent
     * and receives a unique ID from the agent. The given ID is used to distinguish
     * different clients.
     */
    activate() {
        if (this.isActive()) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["ActivateClientRequest"]();
            req.setClientKey(this.key);
            this.client.activateClient(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[AC] c:"${this.getKey()}" err :"${err}"`);
                    reject(err);
                    return;
                }
                this.id = res.getClientId();
                this.status = ClientStatus.Activated;
                this.runSyncLoop();
                this.runWatchLoop();
                this.eventStreamObserver.next({
                    name: ClientEventType.StatusChanged,
                    value: this.status,
                });
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[AC] c:"${this.getKey()}" activated, id:"${res.getClientId()}"`);
                resolve();
            });
        });
    }
    /**
     * deactivate deactivates this client.
     */
    deactivate() {
        if (this.status === ClientStatus.Deactivated) {
            return Promise.resolve();
        }
        if (this.remoteChangeEventStream) {
            this.remoteChangeEventStream.cancel();
            this.remoteChangeEventStream = null;
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["DeactivateClientRequest"]();
            req.setClientId(this.id);
            this.client.deactivateClient(req, {}, (err) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[DC] c:"${this.getKey()}" err :"${err}"`);
                    reject(err);
                    return;
                }
                this.status = ClientStatus.Deactivated;
                this.eventStreamObserver.next({
                    name: ClientEventType.StatusChanged,
                    value: this.status,
                });
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[DC] c"${this.getKey()}" deactivated`);
                resolve();
            });
        });
    }
    /**
     * attach attaches the given document to this client. It tells the agent that
     * this client will synchronize the given document.
     */
    attach(doc, isManualSync) {
        if (!this.isActive()) {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_4__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_4__["Code"].ClientNotActive, `${this.key} is not active`);
        }
        doc.setActor(this.id);
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["AttachDocumentRequest"]();
            req.setClientId(this.id);
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].toChangePack(doc.createChangePack()));
            this.client.attachDocument(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[AD] c:"${this.getKey()}" err :"${err}"`);
                    reject(err);
                    return;
                }
                const pack = _api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].fromChangePack(res.getChangePack());
                doc.applyChangePack(pack);
                this.attachmentMap.set(doc.getKey().toIDString(), {
                    doc: doc,
                    isRealtimeSync: !isManualSync,
                    peerClients: new Map(),
                });
                this.runWatchLoop();
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[AD] c:"${this.getKey()}" attaches d:"${doc.getKey().toIDString()}"`);
                resolve(doc);
            });
        });
    }
    /**
     * detach dettaches the given document from this client. It tells the
     * agent that this client will no longer synchronize the given document.
     *
     * To collect garbage things like CRDT tombstones left on the document, all the
     * changes should be applied to other replicas before GC time. For this, if the
     * document is no longer used by this client, it should be detached.
     */
    detach(doc) {
        if (!this.isActive()) {
            throw new _util_error__WEBPACK_IMPORTED_MODULE_4__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_4__["Code"].ClientNotActive, `${this.key} is not active`);
        }
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["DetachDocumentRequest"]();
            req.setClientId(this.id);
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].toChangePack(doc.createChangePack()));
            this.client.detachDocument(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[DD] c:"${this.getKey()}" err :"${err}"`);
                    reject(err);
                    return;
                }
                const pack = _api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].fromChangePack(res.getChangePack());
                doc.applyChangePack(pack);
                if (this.attachmentMap.has(doc.getKey().toIDString())) {
                    this.attachmentMap.delete(doc.getKey().toIDString());
                }
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[DD] c:"${this.getKey()}" detaches d:"${doc.getKey().toIDString()}"`);
                resolve(doc);
            });
        });
    }
    /**
     * sync pushes local changes of the attached documents to the Agent and
     * receives changes of the remote replica from the agent then apply them to
     * local documents.
     */
    sync() {
        const promises = [];
        for (const [, attachment] of this.attachmentMap) {
            promises.push(this.syncInternal(attachment.doc));
        }
        return Promise.all(promises).then((docs) => {
            return docs;
        });
    }
    subscribe(nextOrObserver, error, complete) {
        return this.eventStream.subscribe(nextOrObserver, error, complete);
    }
    getID() {
        return this.id;
    }
    getKey() {
        return this.key;
    }
    isActive() {
        return this.status === ClientStatus.Activated;
    }
    runSyncLoop() {
        const doLoop = () => {
            if (!this.isActive()) {
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug(`[SL] c:"${this.getKey()}" exit sync loop`);
                return;
            }
            const promises = [];
            for (const [, attachment] of this.attachmentMap) {
                if (attachment.isRealtimeSync &&
                    (attachment.doc.hasLocalChanges() ||
                        attachment.remoteChangeEventReceived)) {
                    attachment.remoteChangeEventReceived = false;
                    promises.push(this.syncInternal(attachment.doc));
                }
            }
            Promise.all(promises).then(() => {
                setTimeout(doLoop, this.syncLoopDuration);
            }).catch((err) => {
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[SL] c:"${this.getKey()}" sync failed: ${err.message}`);
            });
        };
        _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug(`[SL] c:"${this.getKey()}" run sync loop`);
        doLoop();
    }
    runWatchLoop() {
        const doLoop = () => {
            if (!this.isActive()) {
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug(`[WL] c:"${this.getKey()}" exit watch loop`);
                return;
            }
            if (this.remoteChangeEventStream) {
                this.remoteChangeEventStream.cancel();
                this.remoteChangeEventStream = null;
            }
            if (this.watchLoopTimerID) {
                clearTimeout(this.watchLoopTimerID);
                this.watchLoopTimerID = null;
            }
            const keys = [];
            for (const [, attachment] of this.attachmentMap) {
                if (attachment.isRealtimeSync) {
                    keys.push(attachment.doc.getKey());
                }
            }
            if (!keys.length) {
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug(`[WL] c:"${this.getKey()}" exit watch loop`);
                return;
            }
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["WatchDocumentsRequest"]();
            req.setClientId(this.id);
            req.setDocumentKeysList(_api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].toDocumentKeys(keys));
            const stream = this.client.watchDocuments(req, {});
            stream.on('data', (resp) => {
                if (resp.hasInitialization()) {
                    const peersMap = resp.getInitialization().getPeersMapByDocMap();
                    peersMap.forEach((peers, docID) => {
                        const attachment = this.attachmentMap.get(docID);
                        for (const peer of peers.getClientIdsList()) {
                            attachment.peerClients.set(peer, true);
                        }
                    });
                    this.eventStreamObserver.next({
                        name: ClientEventType.DocumentsWatchingPeerChanged,
                        value: keys.reduce((peersMap, key) => {
                            const attachment = this.attachmentMap.get(key.toIDString());
                            peersMap[key.toIDString()] = Array.from(attachment.peerClients.keys());
                            return peersMap;
                        }, {}),
                    });
                    return;
                }
                const watchEvent = resp.getEvent();
                const respKeys = _api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].fromDocumentKeys(watchEvent.getDocumentKeysList());
                for (const key of respKeys) {
                    const attachment = this.attachmentMap.get(key.toIDString());
                    switch (watchEvent.getEventType()) {
                        case _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_WATCHED:
                            attachment.peerClients.set(watchEvent.getClientId(), true);
                            break;
                        case _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_UNWATCHED:
                            attachment.peerClients.delete(watchEvent.getClientId());
                            break;
                        case _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_CHANGED:
                            attachment.remoteChangeEventReceived = true;
                            break;
                    }
                }
                if (watchEvent.getEventType() === _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_CHANGED) {
                    this.eventStreamObserver.next({
                        name: ClientEventType.DocumentsChanged,
                        value: respKeys,
                    });
                }
                else if (watchEvent.getEventType() === _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_WATCHED ||
                    watchEvent.getEventType() === _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["EventType"].DOCUMENTS_UNWATCHED) {
                    this.eventStreamObserver.next({
                        name: ClientEventType.DocumentsWatchingPeerChanged,
                        value: respKeys.reduce((peersMap, key) => {
                            const attachment = this.attachmentMap.get(key.toIDString());
                            peersMap[key.toIDString()] = Array.from(attachment.peerClients.keys());
                            return peersMap;
                        }, {}),
                    });
                }
            });
            stream.on('end', () => {
                // stream end signal
                this.remoteChangeEventStream = null;
                this.watchLoopTimerID = setTimeout(doLoop, this.reconnectStreamDelay);
            });
            this.remoteChangeEventStream = stream;
            _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[WD] c:"${this.getKey()}" watches d:"${keys.map((key) => key.toIDString())}"`);
        };
        _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug(`[WL] c:"${this.getKey()}" run watch loop`);
        doLoop();
    }
    syncInternal(doc) {
        return new Promise((resolve, reject) => {
            const req = new _api_yorkie_pb__WEBPACK_IMPORTED_MODULE_1__["PushPullRequest"]();
            req.setClientId(this.id);
            const reqPack = doc.createChangePack();
            const localSize = reqPack.getChangeSize();
            req.setChangePack(_api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].toChangePack(reqPack));
            let isRejected = false;
            this.client.pushPull(req, {}, (err, res) => {
                if (err) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].error(`[PP] c:"${this.getKey()}" err :"${err}"`);
                    isRejected = true;
                    reject(err);
                    return;
                }
                const respPack = _api_converter__WEBPACK_IMPORTED_MODULE_2__["converter"].fromChangePack(res.getChangePack());
                doc.applyChangePack(respPack);
                const docKey = doc.getKey().toIDString();
                const remoteSize = respPack.getChangeSize();
                _util_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].info(`[PP] c:"${this.getKey()}" sync d:"${docKey}", push:${localSize} pull:${remoteSize} cp:${respPack.getCheckpoint().getAnnotatedString()}`);
            }).on('end', () => {
                if (isRejected) {
                    return;
                }
                resolve(doc);
            });
        });
    }
}


/***/ }),

/***/ "./src/document/change/change.ts":
/*!***************************************!*\
  !*** ./src/document/change/change.ts ***!
  \***************************************/
/*! exports provided: Change */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Change", function() { return Change; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Change represents a unit of modification in the document.
 */
class Change {
    constructor(id, message, operations) {
        this.id = id;
        this.message = message;
        this.operations = operations;
    }
    static create(id, message, operations) {
        return new Change(id, message, operations);
    }
    getID() {
        return this.id;
    }
    getMessage() {
        return this.message;
    }
    getOperations() {
        return this.operations;
    }
    setActor(actorID) {
        for (const operation of this.operations) {
            operation.setActor(actorID);
        }
        this.id = this.id.setActor(actorID);
    }
    execute(root) {
        for (const operation of this.operations) {
            operation.execute(root);
        }
    }
    getAnnotatedString() {
        return `${this.operations.map((operation) => operation.getAnnotatedString()).join(',')}`;
    }
}


/***/ }),

/***/ "./src/document/change/change_id.ts":
/*!******************************************!*\
  !*** ./src/document/change/change_id.ts ***!
  \******************************************/
/*! exports provided: ChangeID, InitialChangeID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeID", function() { return ChangeID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitialChangeID", function() { return InitialChangeID; });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _time_actor_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../time/actor_id */ "./src/document/time/actor_id.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * ChangeID is for identifying the Change. This is immutable.
 **/
class ChangeID {
    constructor(clientSeq, lamport, actor) {
        this.clientSeq = clientSeq;
        this.lamport = lamport;
        this.actor = typeof actor !== 'undefined' ? actor : null;
    }
    static of(clientSeq, lamport, actor) {
        return new ChangeID(clientSeq, lamport, actor);
    }
    next() {
        return new ChangeID(this.clientSeq + 1, this.lamport.add(1), this.actor);
    }
    syncLamport(otherLamport) {
        if (otherLamport.greaterThan(this.lamport)) {
            return new ChangeID(this.clientSeq, otherLamport, this.actor);
        }
        return new ChangeID(this.clientSeq, this.lamport.add(1), this.actor);
    }
    createTimeTicket(delimiter) {
        return _time_ticket__WEBPACK_IMPORTED_MODULE_2__["TimeTicket"].of(this.lamport, delimiter, this.actor);
    }
    setActor(actorID) {
        return new ChangeID(this.clientSeq, this.lamport, actorID);
    }
    getClientSeq() {
        return this.clientSeq;
    }
    getLamport() {
        return this.lamport;
    }
    getLamportAsString() {
        return this.lamport.toString();
    }
    getActorID() {
        return this.actor;
    }
    getAnnotatedString() {
        if (this.actor == null) {
            return `${this.lamport.toString()}:nil:${this.clientSeq}`;
        }
        return `${this.lamport.toString()}:${this.actor.substring(22, 24)}:${this.clientSeq}`;
    }
}
const InitialChangeID = new ChangeID(0, long__WEBPACK_IMPORTED_MODULE_0___default.a.fromInt(0, true), _time_actor_id__WEBPACK_IMPORTED_MODULE_1__["InitialActorID"]);


/***/ }),

/***/ "./src/document/change/change_pack.ts":
/*!********************************************!*\
  !*** ./src/document/change/change_pack.ts ***!
  \********************************************/
/*! exports provided: ChangePack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangePack", function() { return ChangePack; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ChangePack is a unit for delivering changes in a document to the remote.
 */
class ChangePack {
    constructor(key, checkpoint, changes, snapshot) {
        this.key = key;
        this.checkpoint = checkpoint;
        this.changes = changes;
        this.snapshot = snapshot;
    }
    static create(key, checkpoint, changes, snapshot) {
        return new ChangePack(key, checkpoint, changes, snapshot);
    }
    getKey() {
        return this.key;
    }
    getCheckpoint() {
        return this.checkpoint;
    }
    getChanges() {
        return this.changes;
    }
    hasChanges() {
        return this.changes.length > 0;
    }
    getChangeSize() {
        return this.changes.length;
    }
    hasSnapshot() {
        return !!this.snapshot && !!this.snapshot.length;
    }
    getSnapshot() {
        return this.snapshot;
    }
}


/***/ }),

/***/ "./src/document/change/context.ts":
/*!****************************************!*\
  !*** ./src/document/change/context.ts ***!
  \****************************************/
/*! exports provided: ChangeContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeContext", function() { return ChangeContext; });
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _change__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./change */ "./src/document/change/change.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * ChangeContext is used to record the context of modification when editing
 * a document. Each time we add an operation, a new time ticket is issued.
 * Finally returns a Change after the modification has been completed.
 */
class ChangeContext {
    constructor(id, message, root) {
        this.id = id;
        this.root = root;
        this.message = message;
        this.operations = [];
        this.delimiter = _time_ticket__WEBPACK_IMPORTED_MODULE_0__["InitialDelimiter"];
    }
    /**
     * create creates a new instance of ChangeContext.
     */
    static create(id, message, root) {
        return new ChangeContext(id, message, root);
    }
    push(operation) {
        this.operations.push(operation);
    }
    registerElement(element) {
        this.root.registerElement(element);
    }
    getChange() {
        return _change__WEBPACK_IMPORTED_MODULE_1__["Change"].create(this.id, this.message, this.operations);
    }
    hasOperations() {
        return this.operations.length > 0;
    }
    /**
     * issueTimeTicket creates a time ticket to be used to create a new operation.
     */
    issueTimeTicket() {
        this.delimiter += 1;
        return this.id.createTimeTicket(this.delimiter);
    }
}


/***/ }),

/***/ "./src/document/checkpoint/checkpoint.ts":
/*!***********************************************!*\
  !*** ./src/document/checkpoint/checkpoint.ts ***!
  \***********************************************/
/*! exports provided: Checkpoint, InitialCheckpoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Checkpoint", function() { return Checkpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitialCheckpoint", function() { return InitialCheckpoint; });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Checkpoint is used to determine the changes sent and received by the client.
 **/
class Checkpoint {
    constructor(serverSeq, clientSeq) {
        this.serverSeq = serverSeq;
        this.clientSeq = clientSeq;
    }
    static of(serverSeq, clientSeq) {
        return new Checkpoint(serverSeq, clientSeq);
    }
    increaseClientSeq(inc) {
        if (inc === 0) {
            return this;
        }
        return new Checkpoint(this.serverSeq, this.clientSeq + inc);
    }
    forward(other) {
        if (this.clientSeq == other.clientSeq &&
            this.serverSeq.equals(other.serverSeq)) {
            return this;
        }
        const serverSeq = this.serverSeq.greaterThan(other.serverSeq)
            ? this.serverSeq
            : other.serverSeq;
        const clientSeq = Math.max(this.clientSeq, other.clientSeq);
        return Checkpoint.of(serverSeq, clientSeq);
    }
    getServerSeqAsString() {
        return this.serverSeq.toString();
    }
    getClientSeq() {
        return this.clientSeq;
    }
    getServerSeq() {
        return this.serverSeq;
    }
    equals(other) {
        return (this.clientSeq === other.clientSeq &&
            this.serverSeq.equals(other.serverSeq));
    }
    getAnnotatedString() {
        return `serverSeq=${this.serverSeq}, clientSeq=${this.clientSeq}`;
    }
}
const InitialCheckpoint = new Checkpoint(long__WEBPACK_IMPORTED_MODULE_0___default.a.fromInt(0, true), 0);


/***/ }),

/***/ "./src/document/document.ts":
/*!**********************************!*\
  !*** ./src/document/document.ts ***!
  \**********************************/
/*! exports provided: DocEventType, Document */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocEventType", function() { return DocEventType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Document", function() { return Document; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/observable */ "./src/util/observable.ts");
/* harmony import */ var _key_document_key__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./key/document_key */ "./src/document/key/document_key.ts");
/* harmony import */ var _change_change_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./change/change_id */ "./src/document/change/change_id.ts");
/* harmony import */ var _change_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./change/context */ "./src/document/change/context.ts");
/* harmony import */ var _api_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../api/converter */ "./src/api/converter.ts");
/* harmony import */ var _change_change_pack__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./change/change_pack */ "./src/document/change/change_pack.ts");
/* harmony import */ var _json_root__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./json/root */ "./src/document/json/root.ts");
/* harmony import */ var _proxy_proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./proxy/proxy */ "./src/document/proxy/proxy.ts");
/* harmony import */ var _checkpoint_checkpoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./checkpoint/checkpoint */ "./src/document/checkpoint/checkpoint.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










var DocEventType;
(function (DocEventType) {
    DocEventType["Snapshot"] = "snapshot";
    DocEventType["LocalChange"] = "local-change";
    DocEventType["RemoteChange"] = "remote-change";
})(DocEventType || (DocEventType = {}));
/**
 * Document represents a document in MongoDB and contains logical clocks.
 */
class Document {
    constructor(collection, document) {
        this.key = _key_document_key__WEBPACK_IMPORTED_MODULE_2__["DocumentKey"].of(collection, document);
        this.root = _json_root__WEBPACK_IMPORTED_MODULE_7__["JSONRoot"].create();
        this.changeID = _change_change_id__WEBPACK_IMPORTED_MODULE_3__["InitialChangeID"];
        this.checkpoint = _checkpoint_checkpoint__WEBPACK_IMPORTED_MODULE_9__["InitialCheckpoint"];
        this.localChanges = [];
        this.eventStream = Object(_util_observable__WEBPACK_IMPORTED_MODULE_1__["createObservable"])((observer) => {
            this.eventStreamObserver = observer;
        });
    }
    /**
     * create creates a new instance of Document.
     */
    static create(collection, document) {
        return new Document(collection, document);
    }
    /**
     * update executes the given updater to update this document.
     */
    update(updater, message) {
        this.ensureClone();
        const context = _change_context__WEBPACK_IMPORTED_MODULE_4__["ChangeContext"].create(this.changeID.next(), message, this.clone);
        try {
            const proxy = Object(_proxy_proxy__WEBPACK_IMPORTED_MODULE_8__["createProxy"])(context, this.clone.getObject());
            updater(proxy);
        }
        catch (err) {
            // drop clone because it is contaminated.
            this.clone = null;
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error(err);
            throw err;
        }
        if (context.hasOperations()) {
            if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`trying to update a local change: ${this.toJSON()}`);
            }
            const change = context.getChange();
            change.execute(this.root);
            this.localChanges.push(change);
            this.changeID = change.getID();
            if (this.eventStreamObserver) {
                this.eventStreamObserver.next({
                    name: DocEventType.LocalChange,
                    value: [change],
                });
            }
            if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`after update a local change: ${this.toJSON()}`);
            }
        }
    }
    subscribe(nextOrObserver, error, complete) {
        return this.eventStream.subscribe(nextOrObserver, error, complete);
    }
    /**
     * applyChangePack applies the given change pack into this document.
     */
    applyChangePack(pack) {
        if (pack.hasSnapshot()) {
            this.applySnapshot(pack.getSnapshot(), pack.getCheckpoint().getServerSeq());
        }
        else if (pack.hasChanges()) {
            this.applyChanges(pack.getChanges());
        }
        // 02. Remove local changes applied to server.
        while (this.localChanges.length) {
            const change = this.localChanges[0];
            if (change.getID().getClientSeq() > pack.getCheckpoint().getClientSeq()) {
                break;
            }
            this.localChanges.shift();
        }
        // 03. Update the checkpoint.
        this.checkpoint = this.checkpoint.forward(pack.getCheckpoint());
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`${this.root.toJSON()}`);
        }
    }
    getCheckpoint() {
        return this.checkpoint;
    }
    hasLocalChanges() {
        return this.localChanges.length > 0;
    }
    ensureClone() {
        if (this.clone) {
            return;
        }
        this.clone = this.root.deepcopy();
    }
    /**
     * createChangePack create change pack of the local changes to send to the remote server.
     */
    createChangePack() {
        const changes = this.localChanges;
        const checkpoint = this.checkpoint.increaseClientSeq(changes.length);
        return _change_change_pack__WEBPACK_IMPORTED_MODULE_6__["ChangePack"].create(this.key, checkpoint, changes);
    }
    /**
     * setActor sets actor into this document. This is also applied in the local
     * changes the document has.
     */
    setActor(actorID) {
        for (const change of this.localChanges) {
            change.setActor(actorID);
        }
        this.changeID = this.changeID.setActor(actorID);
        // TODO also apply into root.
    }
    getKey() {
        return this.key;
    }
    getRootObject() {
        this.ensureClone();
        const context = _change_context__WEBPACK_IMPORTED_MODULE_4__["ChangeContext"].create(this.changeID.next(), '', this.clone);
        return Object(_proxy_proxy__WEBPACK_IMPORTED_MODULE_8__["createProxy"])(context, this.clone.getObject());
    }
    getRoot() {
        return this.root.getObject();
    }
    toJSON() {
        return this.root.toJSON();
    }
    toSortedJSON() {
        return this.root.toSortedJSON();
    }
    applySnapshot(snapshot, serverSeq) {
        const obj = _api_converter__WEBPACK_IMPORTED_MODULE_5__["converter"].bytesToObject(snapshot);
        this.root = new _json_root__WEBPACK_IMPORTED_MODULE_7__["JSONRoot"](obj);
        for (const change of this.localChanges) {
            change.execute(this.root);
        }
        this.changeID = this.changeID.syncLamport(serverSeq);
        // drop clone because it is contaminated.
        this.clone = null;
        if (this.eventStreamObserver) {
            this.eventStreamObserver.next({
                name: DocEventType.Snapshot,
                value: snapshot,
            });
        }
    }
    applyChanges(changes) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`trying to apply ${changes.length} remote changes`);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(changes.map((change) => `${change.getID().getAnnotatedString()}\t${change.getAnnotatedString()}`).join('\n'));
        }
        this.ensureClone();
        for (const change of changes) {
            change.execute(this.clone);
        }
        for (const change of changes) {
            change.execute(this.root);
            this.changeID = this.changeID.syncLamport(change.getID().getLamport());
        }
        if (changes.length && this.eventStreamObserver) {
            this.eventStreamObserver.next({
                name: DocEventType.RemoteChange,
                value: changes,
            });
        }
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`after appling ${changes.length} remote changes`);
    }
}


/***/ }),

/***/ "./src/document/json/array.ts":
/*!************************************!*\
  !*** ./src/document/json/array.ts ***!
  \************************************/
/*! exports provided: JSONArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONArray", function() { return JSONArray; });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rga_tree_list */ "./src/document/json/rga_tree_list.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * JSONArray represents JSON array data structure including logical clock.
 */
class JSONArray extends _element__WEBPACK_IMPORTED_MODULE_0__["JSONContainer"] {
    constructor(createdAt, elements) {
        super(createdAt);
        this.elements = elements;
    }
    static create(createdAt) {
        return new JSONArray(createdAt, _rga_tree_list__WEBPACK_IMPORTED_MODULE_1__["RGATreeList"].create());
    }
    insertAfter(prevCreatedAt, value) {
        this.elements.insertAfter(prevCreatedAt, value);
    }
    moveAfter(prevCreatedAt, createdAt, executedAt) {
        this.elements.moveAfter(prevCreatedAt, createdAt, executedAt);
    }
    get(createdAt) {
        return this.elements.get(createdAt);
    }
    getByIndex(index) {
        return this.elements.getByIndex(index).getValue();
    }
    getLast() {
        return this.elements.getLast();
    }
    getPrevCreatedAt(createdAt) {
        return this.elements.getPrevCreatedAt(createdAt);
    }
    delete(createdAt, editedAt) {
        return this.elements.delete(createdAt, editedAt);
    }
    deleteByIndex(index, editedAt) {
        return this.elements.deleteByIndex(index, editedAt);
    }
    getLastCreatedAt() {
        return this.elements.getLastCreatedAt();
    }
    get length() {
        return this.elements.length;
    }
    *[Symbol.iterator]() {
        for (const node of this.elements) {
            if (!node.isRemoved()) {
                yield node.getValue();
            }
        }
    }
    *getDescendants() {
        for (const node of this.elements) {
            const element = node.getValue();
            if (element instanceof _element__WEBPACK_IMPORTED_MODULE_0__["JSONContainer"]) {
                for (const descendant of element.getDescendants()) {
                    yield descendant;
                }
            }
            yield element;
        }
    }
    toJSON() {
        const json = [];
        for (const value of this) {
            json.push(value.toJSON());
        }
        return `[${json.join(',')}]`;
    }
    toSortedJSON() {
        return this.toJSON();
    }
    getElements() {
        return this.elements;
    }
    deepcopy() {
        const clone = JSONArray.create(this.getCreatedAt());
        for (const node of this.elements) {
            clone.elements.insertAfter(clone.getLastCreatedAt(), node.getValue().deepcopy());
        }
        clone.remove(this.getRemovedAt());
        return clone;
    }
}


/***/ }),

/***/ "./src/document/json/element.ts":
/*!**************************************!*\
  !*** ./src/document/json/element.ts ***!
  \**************************************/
/*! exports provided: JSONElement, JSONContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONElement", function() { return JSONElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONContainer", function() { return JSONContainer; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * JSONElement represents JSON element including logical clock.
 */
class JSONElement {
    constructor(createdAt) {
        this.createdAt = createdAt;
    }
    getCreatedAt() {
        return this.createdAt;
    }
    getID() {
        return this.createdAt;
    }
    getUpdatedAt() {
        return this.updatedAt;
    }
    getRemovedAt() {
        return this.removedAt;
    }
    setUpdatedAt(updatedAt) {
        if (!this.updatedAt || (updatedAt && updatedAt.after(this.updatedAt))) {
            this.updatedAt = updatedAt;
            return true;
        }
        return false;
    }
    remove(removedAt) {
        if (!this.removedAt || (removedAt && removedAt.after(this.removedAt))) {
            this.removedAt = removedAt;
            return true;
        }
        return false;
    }
    isRemoved() {
        return !!this.removedAt;
    }
}
class JSONContainer extends JSONElement {
    constructor(createdAt) {
        super(createdAt);
    }
}


/***/ }),

/***/ "./src/document/json/object.ts":
/*!*************************************!*\
  !*** ./src/document/json/object.ts ***!
  \*************************************/
/*! exports provided: JSONObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONObject", function() { return JSONObject; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rht_pq_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rht_pq_map */ "./src/document/json/rht_pq_map.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * JSONObject represents a JSON object, but unlike regular JSON, it has time
 * tickets which is created by logical clock.
 */
class JSONObject extends _element__WEBPACK_IMPORTED_MODULE_1__["JSONContainer"] {
    constructor(createdAt, memberNodes) {
        super(createdAt);
        this.memberNodes = memberNodes;
    }
    static create(createdAt) {
        return new JSONObject(createdAt, _rht_pq_map__WEBPACK_IMPORTED_MODULE_2__["RHTPQMap"].create());
    }
    createText(key) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported: this method should be called by proxy: ${key}`);
        return null;
    }
    createRichText(key) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported: this method should be called by proxy: ${key}`);
        return null;
    }
    set(key, value) {
        this.memberNodes.set(key, value);
    }
    delete(createdAt, executedAt) {
        return this.memberNodes.delete(createdAt, executedAt);
    }
    deleteByKey(key, executedAt) {
        return this.memberNodes.deleteByKey(key, executedAt);
    }
    get(key) {
        return this.memberNodes.get(key);
    }
    has(key) {
        return this.memberNodes.has(key);
    }
    toJSON() {
        const json = [];
        for (const [key, value] of this) {
            json.push(`"${key}":${value.toJSON()}`);
        }
        return `{${json.join(',')}}`;
    }
    toSortedJSON() {
        const keys = Array();
        for (const [key] of this) {
            keys.push(key);
        }
        const json = [];
        for (const key of keys.sort()) {
            const node = this.memberNodes.get(key);
            json.push(`"${key}":${node.toSortedJSON()}`);
        }
        return `{${json.join(',')}}`;
    }
    getRHT() {
        return this.memberNodes;
    }
    deepcopy() {
        const clone = JSONObject.create(this.getCreatedAt());
        for (const node of this.memberNodes) {
            clone.memberNodes.set(node.getStrKey(), node.getValue().deepcopy());
        }
        clone.remove(this.getRemovedAt());
        return clone;
    }
    *getDescendants() {
        for (const node of this.memberNodes) {
            const element = node.getValue();
            if (element instanceof _element__WEBPACK_IMPORTED_MODULE_1__["JSONContainer"]) {
                for (const descendant of element.getDescendants()) {
                    yield descendant;
                }
            }
            yield element;
        }
    }
    *[Symbol.iterator]() {
        const keySet = new Set();
        for (const node of this.memberNodes) {
            if (!keySet.has(node.getStrKey())) {
                keySet.add(node.getStrKey());
                if (!node.isRemoved()) {
                    yield [node.getStrKey(), node.getValue()];
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/document/json/primitive.ts":
/*!****************************************!*\
  !*** ./src/document/json/primitive.ts ***!
  \****************************************/
/*! exports provided: PrimitiveType, JSONPrimitive */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimitiveType", function() { return PrimitiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONPrimitive", function() { return JSONPrimitive; });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/error */ "./src/util/error.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var PrimitiveType;
(function (PrimitiveType) {
    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
    PrimitiveType[PrimitiveType["Boolean"] = 1] = "Boolean";
    PrimitiveType[PrimitiveType["Integer"] = 2] = "Integer";
    PrimitiveType[PrimitiveType["Long"] = 3] = "Long";
    PrimitiveType[PrimitiveType["Double"] = 4] = "Double";
    PrimitiveType[PrimitiveType["String"] = 5] = "String";
    PrimitiveType[PrimitiveType["Bytes"] = 6] = "Bytes";
    PrimitiveType[PrimitiveType["Date"] = 7] = "Date";
})(PrimitiveType || (PrimitiveType = {}));
/**
 * Primitive represents JSON primitive data type including logical lock.
 * This is immutable.
 */
class JSONPrimitive extends _element__WEBPACK_IMPORTED_MODULE_2__["JSONElement"] {
    constructor(value, createdAt) {
        super(createdAt);
        this.valueType = JSONPrimitive.getPrimitiveType(value);
        this.value = value;
    }
    static of(value, createdAt) {
        return new JSONPrimitive(value, createdAt);
    }
    static valueFromBytes(primitiveType, bytes) {
        switch (primitiveType) {
            case PrimitiveType.Boolean:
                return bytes[0] ? true : false;
            case PrimitiveType.Integer:
                return bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);
            case PrimitiveType.Double: {
                const view = new DataView(bytes.buffer);
                bytes.forEach(function (b, i) {
                    view.setUint8(i, b);
                });
                return view.getFloat64(0, true);
            }
            case PrimitiveType.String:
                return new TextDecoder('utf-8').decode(bytes);
            case PrimitiveType.Long:
                return long__WEBPACK_IMPORTED_MODULE_0___default.a.fromBytesLE(Array.from(bytes));
            case PrimitiveType.Bytes:
                return bytes;
            case PrimitiveType.Date:
                return new Date(long__WEBPACK_IMPORTED_MODULE_0___default.a.fromBytesLE(Array.from(bytes)).toNumber());
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented type: ${primitiveType}`);
        }
    }
    toJSON() {
        if (this.valueType === PrimitiveType.String) {
            return `"${this.value}"`;
        }
        return `${this.value}`;
    }
    toSortedJSON() {
        return this.toJSON();
    }
    deepcopy() {
        return this;
    }
    getType() {
        return this.valueType;
    }
    static getPrimitiveType(value) {
        switch (typeof value) {
            case 'boolean':
                return PrimitiveType.Boolean;
            case 'number':
                return PrimitiveType.Double;
            case 'string':
                return PrimitiveType.String;
            case 'object':
                if (value instanceof long__WEBPACK_IMPORTED_MODULE_0___default.a) {
                    return PrimitiveType.Long;
                }
                else if (value instanceof Uint8Array) {
                    return PrimitiveType.Bytes;
                }
                else if (value instanceof Date) {
                    return PrimitiveType.Date;
                }
        }
        return null;
    }
    static isSupport(value) {
        return !!JSONPrimitive.getPrimitiveType(value);
    }
    static isInteger(num) {
        return num % 1 === 0;
    }
    getValue() {
        return this.value;
    }
    toBytes() {
        switch (this.valueType) {
            case PrimitiveType.Boolean: {
                const boolVal = this.value;
                return boolVal ? new Uint8Array([1]) : new Uint8Array([0]);
            }
            case PrimitiveType.Integer: {
                const intVal = this.value;
                return new Uint8Array([
                    intVal & 0xff,
                    (intVal >> 8) & 0xff,
                    (intVal >> 16) & 0xff,
                    (intVal >> 24) & 0xff,
                ]);
            }
            case PrimitiveType.Double: {
                const doubleVal = this.value;
                const uint8Array = new Uint8Array(8);
                const view = new DataView(uint8Array.buffer);
                view.setFloat64(0, doubleVal, true);
                return uint8Array;
            }
            case PrimitiveType.String: {
                return new TextEncoder().encode(this.value);
            }
            case PrimitiveType.Long: {
                const longVal = this.value;
                const longToBytes = longVal.toBytesLE();
                return Uint8Array.from(longToBytes);
            }
            case PrimitiveType.Bytes: {
                const bytesVal = this.value;
                return bytesVal;
            }
            case PrimitiveType.Date: {
                const dateVal = this.value;
                const dateToBytes = long__WEBPACK_IMPORTED_MODULE_0___default.a.fromNumber(dateVal.getTime()).toBytesLE();
                return Uint8Array.from(dateToBytes);
            }
            default:
                throw new _util_error__WEBPACK_IMPORTED_MODULE_1__["YorkieError"](_util_error__WEBPACK_IMPORTED_MODULE_1__["Code"].Unimplemented, `unimplemented type: ${this.valueType}`);
        }
    }
}


/***/ }),

/***/ "./src/document/json/rga_tree_list.ts":
/*!********************************************!*\
  !*** ./src/document/json/rga_tree_list.ts ***!
  \********************************************/
/*! exports provided: RGATreeList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGATreeList", function() { return RGATreeList; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/splay_tree */ "./src/util/splay_tree.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _primitive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primitive */ "./src/document/json/primitive.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class RGATreeListNode extends _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__["SplayNode"] {
    constructor(value) {
        super(value);
        this.value = value;
        this.prev = null;
        this.next = null;
    }
    static createAfter(prev, value) {
        const newNode = new RGATreeListNode(value);
        const prevNext = prev.next;
        prev.next = newNode;
        newNode.prev = prev;
        newNode.next = prevNext;
        if (prevNext) {
            prevNext.prev = newNode;
        }
        return newNode;
    }
    remove(removedAt) {
        return this.value.remove(removedAt);
    }
    getCreatedAt() {
        return this.value.getCreatedAt();
    }
    release() {
        this.prev.next = this.next;
        if (this.next) {
            this.next.prev = this.prev;
        }
    }
    getLength() {
        return this.value.isRemoved() ? 0 : 1;
    }
    getPrev() {
        return this.prev;
    }
    getNext() {
        return this.next;
    }
    getValue() {
        return this.value;
    }
    isRemoved() {
        return this.value.isRemoved();
    }
}
/**
 * RGATreeList is replicated growable array.
 */
class RGATreeList {
    constructor() {
        const dummyValue = _primitive__WEBPACK_IMPORTED_MODULE_3__["JSONPrimitive"].of(0, _time_ticket__WEBPACK_IMPORTED_MODULE_2__["InitialTimeTicket"]);
        dummyValue.remove(_time_ticket__WEBPACK_IMPORTED_MODULE_2__["InitialTimeTicket"]);
        this.dummyHead = new RGATreeListNode(dummyValue);
        this.last = this.dummyHead;
        this.size = 0;
        this.nodeMapByIndex = new _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__["SplayTree"]();
        this.nodeMapByCreatedAt = new Map();
        this.nodeMapByIndex.insert(this.dummyHead);
        this.nodeMapByCreatedAt.set(this.dummyHead.getCreatedAt().toIDString(), this.dummyHead);
    }
    static create() {
        return new RGATreeList();
    }
    get length() {
        return this.size;
    }
    findByCreatedAt(prevCreatedAt, createdAt) {
        let node = this.nodeMapByCreatedAt.get(prevCreatedAt.toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`cant find the given node: ${prevCreatedAt.toIDString()}`);
        }
        while (node.getNext() && node.getNext().getCreatedAt().after(createdAt)) {
            node = node.getNext();
        }
        return node;
    }
    release(node) {
        if (this.last == node) {
            this.last = node.getPrev();
        }
        node.release();
        this.nodeMapByIndex.delete(node);
        this.nodeMapByCreatedAt.delete(node.getValue().getCreatedAt().toIDString());
        this.size -= 1;
    }
    insertAfter(prevCreatedAt, value) {
        const prevNode = this.findByCreatedAt(prevCreatedAt, value.getCreatedAt());
        const newNode = RGATreeListNode.createAfter(prevNode, value);
        if (prevNode === this.last) {
            this.last = newNode;
        }
        this.nodeMapByIndex.insertAfter(prevNode, newNode);
        this.nodeMapByCreatedAt.set(newNode.getCreatedAt().toIDString(), newNode);
        this.size += 1;
    }
    moveAfter(prevCreatedAt, createdAt, executedAt) {
        const prevNode = this.nodeMapByCreatedAt.get(prevCreatedAt.toIDString());
        if (!prevNode) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`cant find the given node: ${prevCreatedAt.toIDString()}`);
        }
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`cant find the given node: ${createdAt.toIDString()}`);
        }
        if (!node.getValue().getUpdatedAt() ||
            executedAt.after(node.getValue().getUpdatedAt())) {
            node.release();
            this.insertAfter(prevNode.getCreatedAt(), node.getValue());
            node.getValue().setUpdatedAt(executedAt);
        }
    }
    insert(value) {
        this.insertAfter(this.last.getCreatedAt(), value);
    }
    get(createdAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        return node.getValue();
    }
    getByIndex(idx) {
        const [node, offset] = this.nodeMapByIndex.find(idx);
        let rgaNode = node;
        if (idx === 0 && node === this.dummyHead) {
            do {
                rgaNode = rgaNode.getNext();
            } while (rgaNode.isRemoved());
        }
        else if (offset > 0) {
            do {
                rgaNode = rgaNode.getNext();
            } while (rgaNode.isRemoved());
        }
        return rgaNode;
    }
    getPrevCreatedAt(createdAt) {
        let node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        do {
            node = node.getPrev();
        } while (this.dummyHead !== node && node.isRemoved());
        return node.getValue().getCreatedAt();
    }
    delete(createdAt, editedAt) {
        const node = this.nodeMapByCreatedAt.get(createdAt.toIDString());
        if (node.remove(editedAt)) {
            this.nodeMapByIndex.splayNode(node);
            this.size -= 1;
        }
        return node.getValue();
    }
    deleteByIndex(index, editedAt) {
        const node = this.getByIndex(index);
        if (node.remove(editedAt)) {
            this.nodeMapByIndex.splayNode(node);
            this.size -= 1;
        }
        return node.getValue();
    }
    getLast() {
        return this.last.getValue();
    }
    getLastCreatedAt() {
        return this.last.getCreatedAt();
    }
    getAnnotatedString() {
        const json = [];
        for (const node of this) {
            const elem = `${node
                .getCreatedAt()
                .toIDString()}:${node.getValue().toJSON()}`;
            if (node.isRemoved()) {
                json.push(`{${elem}}`);
            }
            else {
                json.push(`[${elem}]`);
            }
        }
        return json.join('');
    }
    *[Symbol.iterator]() {
        let node = this.dummyHead.getNext();
        while (node) {
            yield node;
            node = node.getNext();
        }
    }
}


/***/ }),

/***/ "./src/document/json/rga_tree_split.ts":
/*!*********************************************!*\
  !*** ./src/document/json/rga_tree_split.ts ***!
  \*********************************************/
/*! exports provided: ChangeType, RGATreeSplitNodeID, RGATreeSplitNodePos, RGATreeSplitNode, RGATreeSplit, Selection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeType", function() { return ChangeType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGATreeSplitNodeID", function() { return RGATreeSplitNodeID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGATreeSplitNodePos", function() { return RGATreeSplitNodePos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGATreeSplitNode", function() { return RGATreeSplitNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGATreeSplit", function() { return RGATreeSplit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Selection", function() { return Selection; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/splay_tree */ "./src/util/splay_tree.ts");
/* harmony import */ var _util_llrb_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/llrb_tree */ "./src/util/llrb_tree.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var ChangeType;
(function (ChangeType) {
    ChangeType["Content"] = "content";
    ChangeType["Selection"] = "selection";
    ChangeType["Style"] = "style";
})(ChangeType || (ChangeType = {}));
class RGATreeSplitNodeID {
    constructor(createdAt, offset) {
        this.createdAt = createdAt;
        this.offset = offset;
    }
    static of(createdAt, offset) {
        return new RGATreeSplitNodeID(createdAt, offset);
    }
    getCreatedAt() {
        return this.createdAt;
    }
    getOffset() {
        return this.offset;
    }
    equals(other) {
        return (this.createdAt.compare(other.createdAt) === 0 &&
            this.offset === other.offset);
    }
    hasSameCreatedAt(other) {
        return this.createdAt.compare(other.createdAt) === 0;
    }
    split(offset) {
        return new RGATreeSplitNodeID(this.createdAt, this.offset + offset);
    }
    getAnnotatedString() {
        return `${this.createdAt.getAnnotatedString()}:${this.offset}`;
    }
}
const InitialRGATreeSplitNodeID = RGATreeSplitNodeID.of(_time_ticket__WEBPACK_IMPORTED_MODULE_3__["InitialTimeTicket"], 0);
class RGATreeSplitNodePos {
    constructor(id, relativeOffset) {
        this.id = id;
        this.relativeOffset = relativeOffset;
    }
    static of(id, relativeOffset) {
        return new RGATreeSplitNodePos(id, relativeOffset);
    }
    getID() {
        return this.id;
    }
    getRelativeOffset() {
        return this.relativeOffset;
    }
    getAbsoluteID() {
        return RGATreeSplitNodeID.of(this.id.getCreatedAt(), this.id.getOffset() + this.relativeOffset);
    }
    getAnnotatedString() {
        return `${this.id.getAnnotatedString()}:${this.relativeOffset}`;
    }
}
class RGATreeSplitNode extends _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__["SplayNode"] {
    constructor(id, value, removedAt) {
        super(value);
        this.id = id;
        this.removedAt = removedAt;
    }
    static create(id, value) {
        return new RGATreeSplitNode(id, value);
    }
    static createComparator() {
        return (p1, p2) => {
            const compare = p1.getCreatedAt().compare(p2.getCreatedAt());
            if (compare !== 0) {
                return compare;
            }
            if (p1.getOffset() > p2.getOffset()) {
                return 1;
            }
            else if (p1.getOffset() < p2.getOffset()) {
                return -1;
            }
            return 0;
        };
    }
    getID() {
        return this.id;
    }
    getCreatedAt() {
        return this.id.getCreatedAt();
    }
    getLength() {
        if (this.removedAt) {
            return 0;
        }
        return this.getContentLength();
    }
    getContentLength() {
        return (this.value && this.value.length) || 0;
    }
    getNext() {
        return this.next;
    }
    getInsPrev() {
        return this.insPrev;
    }
    getInsNext() {
        return this.insNext;
    }
    getInsPrevID() {
        return this.insPrev.getID();
    }
    setPrev(node) {
        this.prev = node;
        node.next = this;
    }
    setInsPrev(node) {
        this.insPrev = node;
        node.insNext = this;
    }
    hasNext() {
        return !!this.next;
    }
    hasInsPrev() {
        return !!this.insPrev;
    }
    isRemoved() {
        return !!this.removedAt;
    }
    getRemovedAt() {
        return this.removedAt;
    }
    split(offset) {
        return new RGATreeSplitNode(this.id.split(offset), this.splitValue(offset));
    }
    canDelete(editedAt, latestCreatedAt) {
        return (!this.getCreatedAt().after(latestCreatedAt) &&
            (!this.removedAt || editedAt.after(this.removedAt)));
    }
    remove(editedAt) {
        this.removedAt = editedAt;
    }
    createRange() {
        return [
            RGATreeSplitNodePos.of(this.id, 0),
            RGATreeSplitNodePos.of(this.id, this.getLength()),
        ];
    }
    deepcopy() {
        return new RGATreeSplitNode(this.id, this.value, this.removedAt);
    }
    getAnnotatedString() {
        return `${this.id.getAnnotatedString()} ${this.value ? this.value : ''}`;
    }
    splitValue(offset) {
        const value = this.value;
        this.value = value.substring(0, offset);
        return value.substring(offset, value.length);
    }
}
class RGATreeSplit {
    constructor() {
        this.head = RGATreeSplitNode.create(InitialRGATreeSplitNodeID);
        this.treeByIndex = new _util_splay_tree__WEBPACK_IMPORTED_MODULE_1__["SplayTree"]();
        this.treeByID = new _util_llrb_tree__WEBPACK_IMPORTED_MODULE_2__["LLRBTree"](RGATreeSplitNode.createComparator());
        this.treeByIndex.insert(this.head);
        this.treeByID.put(this.head.getID(), this.head);
    }
    static create() {
        return new RGATreeSplit();
    }
    edit(range, value, latestCreatedAtMapByActor, editedAt) {
        // 01. split nodes with from and to
        const [toLeft, toRight] = this.findNodeWithSplit(range[1], editedAt);
        const [fromLeft, fromRight] = this.findNodeWithSplit(range[0], editedAt);
        // 02. delete between from and to
        const nodesToDelete = this.findBetween(fromRight, toRight);
        const [changes, latestCreatedAtMap] = this.deleteNodes(nodesToDelete, latestCreatedAtMapByActor, editedAt);
        const caretID = toRight ? toRight.getID() : toLeft.getID();
        let caretPos = RGATreeSplitNodePos.of(caretID, 0);
        // 03. insert a new node
        if (value) {
            const idx = this.findIdxFromNodePos(fromLeft.createRange()[1], true);
            const inserted = this.insertAfter(fromLeft, RGATreeSplitNode.create(RGATreeSplitNodeID.of(editedAt, 0), value));
            changes.push({
                type: ChangeType.Content,
                actor: editedAt.getActorID(),
                from: idx,
                to: idx,
                content: value.toString(),
            });
            caretPos = RGATreeSplitNodePos.of(inserted.getID(), inserted.getContentLength());
        }
        return [caretPos, latestCreatedAtMap, changes];
    }
    findNodePos(idx) {
        const [node, offset] = this.treeByIndex.find(idx);
        const splitNode = node;
        return RGATreeSplitNodePos.of(splitNode.getID(), offset);
    }
    findIndexesFromRange(range) {
        const [fromPos, toPos] = range;
        return [
            this.findIdxFromNodePos(fromPos, false),
            this.findIdxFromNodePos(toPos, true),
        ];
    }
    findIdxFromNodePos(pos, preferToLeft) {
        const absoluteID = pos.getAbsoluteID();
        const node = preferToLeft
            ? this.findFloorNodePerferToLeft(absoluteID)
            : this.findFloorNode(absoluteID);
        const index = this.treeByIndex.indexOf(node);
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`the node of the given id should be found: ${absoluteID.getAnnotatedString()}`);
        }
        const offset = node.isRemoved()
            ? 0
            : absoluteID.getOffset() - node.getID().getOffset();
        return index + offset;
    }
    findNode(id) {
        return this.findFloorNode(id);
    }
    toJSON() {
        const json = [];
        for (const node of this) {
            if (!node.isRemoved()) {
                json.push(node.getValue());
            }
        }
        return json.join('');
    }
    *[Symbol.iterator]() {
        let node = this.head.getNext();
        while (node) {
            yield node;
            node = node.getNext();
        }
    }
    getHead() {
        return this.head;
    }
    deepcopy() {
        const clone = new RGATreeSplit();
        let node = this.head.getNext();
        let prev = clone.head;
        let current;
        while (node) {
            current = clone.insertAfter(prev, node.deepcopy());
            if (node.hasInsPrev()) {
                const insPrevNode = clone.findNode(node.getInsPrevID());
                current.setInsPrev(insPrevNode);
            }
            prev = current;
            node = node.getNext();
        }
        return clone;
    }
    getAnnotatedString() {
        const result = [];
        let node = this.head;
        while (node) {
            if (node.isRemoved()) {
                result.push(`{${node.getAnnotatedString()}}`);
            }
            else {
                result.push(`[${node.getAnnotatedString()}]`);
            }
            node = node.getNext();
        }
        return result.join('');
    }
    insertAfter(prevNode, newNode) {
        const next = prevNode.getNext();
        newNode.setPrev(prevNode);
        if (next) {
            next.setPrev(newNode);
        }
        this.treeByID.put(newNode.getID(), newNode);
        this.treeByIndex.insertAfter(prevNode, newNode);
        return newNode;
    }
    findNodeWithSplit(pos, editedAt) {
        const absoluteID = pos.getAbsoluteID();
        let node = this.findFloorNodePerferToLeft(absoluteID);
        const relativeOffset = absoluteID.getOffset() - node.getID().getOffset();
        this.splitNode(node, relativeOffset);
        while (node.hasNext() && node.getNext().getCreatedAt().after(editedAt)) {
            node = node.getNext();
        }
        return [node, node.getNext()];
    }
    findFloorNodePerferToLeft(id) {
        let node = this.findFloorNode(id);
        if (!node) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`the node of the given id should be found: ${id.getAnnotatedString()}`);
        }
        if (id.getOffset() > 0 && node.getID().getOffset() == id.getOffset()) {
            if (!node.hasInsPrev()) {
                _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('insPrev should be presence');
            }
            node = node.getInsPrev();
        }
        return node;
    }
    findFloorNode(id) {
        const entry = this.treeByID.floorEntry(id);
        if (!entry) {
            return null;
        }
        if (!entry.key.equals(id) && !entry.key.hasSameCreatedAt(id)) {
            return null;
        }
        return entry.value;
    }
    findBetween(fromNode, toNode) {
        const nodes = [];
        let current = fromNode;
        while (current && current !== toNode) {
            nodes.push(current);
            current = current.getNext();
        }
        return nodes;
    }
    splitNode(node, offset) {
        if (offset > node.getContentLength()) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('offset should be less than or equal to length');
        }
        if (offset === 0) {
            return node;
        }
        else if (offset === node.getContentLength()) {
            return node.getNext();
        }
        const splitNode = node.split(offset);
        this.treeByIndex.updateSubtree(splitNode);
        this.insertAfter(node, splitNode);
        const insNext = node.getInsNext();
        if (insNext) {
            insNext.setInsPrev(splitNode);
        }
        splitNode.setInsPrev(node);
        return splitNode;
    }
    deleteNodes(candidates, latestCreatedAtMapByActor, editedAt) {
        const isRemote = !!latestCreatedAtMapByActor;
        const changes = [];
        const createdAtMapByActor = new Map();
        const nodesToDelete = [];
        // NOTE: We need to collect indexes for change first then delete the nodes.
        for (const node of candidates) {
            const actorID = node.getCreatedAt().getActorID();
            const latestCreatedAt = isRemote
                ? latestCreatedAtMapByActor.has(actorID)
                    ? latestCreatedAtMapByActor.get(actorID)
                    : _time_ticket__WEBPACK_IMPORTED_MODULE_3__["InitialTimeTicket"]
                : _time_ticket__WEBPACK_IMPORTED_MODULE_3__["MaxTimeTicket"];
            // Delete nodes created before the latest time remaining in the replica that performed the deletion.
            if (node.canDelete(editedAt, latestCreatedAt)) {
                nodesToDelete.push(node);
                const [fromIdx, toIdx] = this.findIndexesFromRange(node.createRange());
                const change = {
                    type: ChangeType.Content,
                    actor: editedAt.getActorID(),
                    from: fromIdx,
                    to: toIdx,
                };
                // Reduce adjacent deletions: i.g) [(1, 2), (2, 3)] => [(1, 3)]
                if (changes.length && changes[0].to === change.from) {
                    changes[0].to = change.to;
                }
                else {
                    changes.unshift(change);
                }
                if (!createdAtMapByActor.has(actorID) ||
                    node.getID().getCreatedAt().after(createdAtMapByActor.get(actorID))) {
                    createdAtMapByActor.set(actorID, node.getID().getCreatedAt());
                }
            }
        }
        for (const node of nodesToDelete) {
            node.remove(editedAt);
            this.treeByIndex.splayNode(node);
        }
        return [changes, createdAtMapByActor];
    }
}
class Selection {
    constructor(from, to, updatedAt) {
        this.from = from;
        this.to = to;
        this.updatedAt = updatedAt;
    }
    static of(range, updatedAt) {
        return new Selection(range[0], range[1], updatedAt);
    }
    getUpdatedAt() {
        return this.updatedAt;
    }
}


/***/ }),

/***/ "./src/document/json/rht.ts":
/*!**********************************!*\
  !*** ./src/document/json/rht.ts ***!
  \**********************************/
/*! exports provided: RHTNode, RHT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RHTNode", function() { return RHTNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RHT", function() { return RHT; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RHTNode {
    constructor(key, value, updatedAt) {
        this.key = key;
        this.value = value;
        this.updatedAt = updatedAt;
    }
    static of(key, value, createdAt) {
        return new RHTNode(key, value, createdAt);
    }
    getKey() {
        return this.key;
    }
    getValue() {
        return this.value;
    }
    getUpdatedAt() {
        return this.updatedAt;
    }
}
/**
 * RHT is replicated hash table with priority queue by creation time.
 */
class RHT {
    constructor() {
        this.nodeMapByKey = new Map();
        this.nodeMapByCreatedAt = new Map();
    }
    static create() {
        return new RHT();
    }
    set(key, value, updatedAt) {
        const prev = this.nodeMapByKey.get(key);
        if (prev === undefined || updatedAt.after(prev.getUpdatedAt())) {
            const node = RHTNode.of(key, value, updatedAt);
            this.nodeMapByKey.set(key, node);
            this.nodeMapByCreatedAt.set(updatedAt.toIDString(), node);
        }
    }
    has(key) {
        return this.nodeMapByKey.has(key);
    }
    get(key) {
        if (!this.nodeMapByKey.has(key)) {
            return null;
        }
        return this.nodeMapByKey.get(key).getValue();
    }
    toJSON() {
        const items = [];
        for (const [key, node] of this.nodeMapByKey) {
            items.push(`"${key}":"${node.getValue()}"`);
        }
        return `{${items.join(',')}}`;
    }
    toObject() {
        const obj = {};
        for (const [key, node] of this.nodeMapByKey) {
            obj[key] = node.getValue();
        }
        return obj;
    }
    *[Symbol.iterator]() {
        for (const [, node] of this.nodeMapByKey) {
            yield node;
        }
    }
}


/***/ }),

/***/ "./src/document/json/rht_pq_map.ts":
/*!*****************************************!*\
  !*** ./src/document/json/rht_pq_map.ts ***!
  \*****************************************/
/*! exports provided: RHTPQMapNode, RHTPQMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RHTPQMapNode", function() { return RHTPQMapNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RHTPQMap", function() { return RHTPQMap; });
/* harmony import */ var _util_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/heap */ "./src/util/heap.ts");
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class RHTPQMapNode extends _util_heap__WEBPACK_IMPORTED_MODULE_0__["HeapNode"] {
    constructor(strKey, value) {
        super(value.getCreatedAt(), value);
        this.strKey = strKey;
    }
    static of(strKey, value) {
        return new RHTPQMapNode(strKey, value);
    }
    isRemoved() {
        return this.getValue().isRemoved();
    }
    getStrKey() {
        return this.strKey;
    }
    remove(removedAt) {
        this.getValue().remove(removedAt);
    }
}
/**
 * RHT is replicated hash table with priority queue by creation time.
 */
class RHTPQMap {
    constructor() {
        this.elementQueueMapByKey = new Map();
        this.nodeMapByCreatedAt = new Map();
    }
    static create() {
        return new RHTPQMap();
    }
    set(key, value) {
        if (!this.elementQueueMapByKey.has(key)) {
            this.elementQueueMapByKey.set(key, new _util_heap__WEBPACK_IMPORTED_MODULE_0__["Heap"](_time_ticket__WEBPACK_IMPORTED_MODULE_1__["TicketComparator"]));
        }
        const node = RHTPQMapNode.of(key, value);
        this.elementQueueMapByKey.get(key).push(node);
        this.nodeMapByCreatedAt.set(value.getCreatedAt().toIDString(), node);
    }
    delete(createdAt, executedAt) {
        if (!this.nodeMapByCreatedAt.has(createdAt.toIDString())) {
            return null;
        }
        this.nodeMapByCreatedAt.get(createdAt.toIDString()).remove(executedAt);
    }
    deleteByKey(key, removedAt) {
        if (!this.elementQueueMapByKey.has(key)) {
            return null;
        }
        const node = this.elementQueueMapByKey.get(key).peek();
        node.remove(removedAt);
        return node.getValue();
    }
    has(key) {
        if (!this.elementQueueMapByKey.has(key)) {
            return false;
        }
        const node = this.elementQueueMapByKey.get(key).peek();
        return !node.isRemoved();
    }
    get(key) {
        if (!this.elementQueueMapByKey.has(key)) {
            return null;
        }
        return this.elementQueueMapByKey.get(key).peek().getValue();
    }
    *[Symbol.iterator]() {
        for (const [, heap] of this.elementQueueMapByKey) {
            for (const node of heap) {
                yield node;
            }
        }
    }
}


/***/ }),

/***/ "./src/document/json/rich_text.ts":
/*!****************************************!*\
  !*** ./src/document/json/rich_text.ts ***!
  \****************************************/
/*! exports provided: RichTextValue, RichText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichTextValue", function() { return RichTextValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichText", function() { return RichText; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _rht__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rht */ "./src/document/json/rht.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_split__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class RichTextValue {
    constructor(content) {
        this.attributes = _rht__WEBPACK_IMPORTED_MODULE_1__["RHT"].create();
        this.content = content;
    }
    static create(content) {
        return new RichTextValue(content);
    }
    get length() {
        return this.content.length;
    }
    substring(indexStart, indexEnd) {
        return new RichTextValue(this.content.substring(indexStart, indexEnd));
    }
    setAttr(key, value, updatedAt) {
        this.attributes.set(key, value, updatedAt);
    }
    toString() {
        return this.content;
    }
    toJSON() {
        return `{"attrs":${this.attributes.toJSON()},"content":${this.content}}`;
    }
    getAttributes() {
        return this.attributes.toObject();
    }
    getContent() {
        return this.content;
    }
}
class RichText extends _element__WEBPACK_IMPORTED_MODULE_2__["JSONElement"] {
    constructor(rgaTreeSplit, createdAt) {
        super(createdAt);
        this.rgaTreeSplit = rgaTreeSplit;
        this.selectionMap = new Map();
        this.remoteChangeLock = false;
    }
    static create(rgaTreeSplit, createdAt) {
        const text = new RichText(rgaTreeSplit, createdAt);
        const range = text.createRange(0, 0);
        text.editInternal(range, '\n', null, null, createdAt);
        return text;
    }
    edit(fromIdx, toIdx, content, attributes) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported: this method should be called by proxy, ${fromIdx}-${toIdx} ${content}`);
        return null;
    }
    setStyle(fromIdx, toIdx, key, value) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported: this method should be called by proxy, ${fromIdx}-${toIdx} ${key} ${value}`);
        return null;
    }
    editInternal(range, content, attributes, latestCreatedAtMapByActor, editedAt) {
        const value = content ? RichTextValue.create(content) : null;
        if (content && attributes) {
            for (const [k, v] of Object.entries(attributes)) {
                value.setAttr(k, v, editedAt);
            }
        }
        const [caretPos, latestCreatedAtMap, changes] = this.rgaTreeSplit.edit(range, value, latestCreatedAtMapByActor, editedAt);
        if (content && attributes) {
            const change = changes[changes.length - 1];
            change.attributes = attributes;
        }
        const selectionChange = this.updateSelectionInternal([caretPos, caretPos], editedAt);
        if (selectionChange) {
            changes.push(selectionChange);
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
        return latestCreatedAtMap;
    }
    setStyleInternal(range, attributes, editedAt) {
        // 01. split nodes with from and to
        const [, toRight] = this.rgaTreeSplit.findNodeWithSplit(range[1], editedAt);
        const [, fromRight] = this.rgaTreeSplit.findNodeWithSplit(range[0], editedAt);
        // 02. style nodes between from and to
        const changes = [];
        const nodes = this.rgaTreeSplit.findBetween(fromRight, toRight);
        for (const node of nodes) {
            if (node.isRemoved()) {
                continue;
            }
            const [fromIdx, toIdx] = this.rgaTreeSplit.findIndexesFromRange(node.createRange());
            changes.push({
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_3__["ChangeType"].Style,
                actor: editedAt.getActorID(),
                from: fromIdx,
                to: toIdx,
                attributes: attributes,
            });
            for (const [key, value] of Object.entries(attributes)) {
                node.getValue().setAttr(key, value, editedAt);
            }
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
    }
    updateSelection(range, updatedAt) {
        if (this.remoteChangeLock) {
            return;
        }
        const change = this.updateSelectionInternal(range, updatedAt);
        if (this.onChangesHandler && change) {
            this.remoteChangeLock = true;
            this.onChangesHandler([change]);
            this.remoteChangeLock = false;
        }
    }
    hasRemoteChangeLock() {
        return this.remoteChangeLock;
    }
    onChanges(handler) {
        this.onChangesHandler = handler;
    }
    createRange(fromIdx, toIdx) {
        const fromPos = this.rgaTreeSplit.findNodePos(fromIdx);
        if (fromIdx === toIdx) {
            return [fromPos, fromPos];
        }
        return [fromPos, this.rgaTreeSplit.findNodePos(toIdx)];
    }
    toJSON() {
        const json = [];
        for (const node of this.rgaTreeSplit) {
            if (!node.isRemoved()) {
                json.push(node.getValue().toJSON());
            }
        }
        return `[${json.join(',')}]`;
    }
    toSortedJSON() {
        return this.toJSON();
    }
    getValue() {
        const values = [];
        for (const node of this.rgaTreeSplit) {
            if (!node.isRemoved()) {
                const value = node.getValue();
                values.push({
                    attributes: value.getAttributes(),
                    content: value.getContent(),
                });
            }
        }
        return values;
    }
    getRGATreeSplit() {
        return this.rgaTreeSplit;
    }
    getAnnotatedString() {
        return this.rgaTreeSplit.getAnnotatedString();
    }
    deepcopy() {
        const text = new RichText(this.rgaTreeSplit.deepcopy(), this.getCreatedAt());
        text.remove(this.getRemovedAt());
        return text;
    }
    updateSelectionInternal(range, updatedAt) {
        if (!this.selectionMap.has(updatedAt.getActorID())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_3__["Selection"].of(range, updatedAt));
            return null;
        }
        const prevSelection = this.selectionMap.get(updatedAt.getActorID());
        if (updatedAt.after(prevSelection.getUpdatedAt())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_3__["Selection"].of(range, updatedAt));
            const [from, to] = this.rgaTreeSplit.findIndexesFromRange(range);
            return {
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_3__["ChangeType"].Selection,
                actor: updatedAt.getActorID(),
                from,
                to,
            };
        }
    }
}


/***/ }),

/***/ "./src/document/json/root.ts":
/*!***********************************!*\
  !*** ./src/document/json/root.ts ***!
  \***********************************/
/*! exports provided: JSONRoot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSONRoot", function() { return JSONRoot; });
/* harmony import */ var _time_ticket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time/ticket */ "./src/document/time/ticket.ts");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object */ "./src/document/json/object.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * JSONRoot is a structure represents the root of JSON. It has a hash table of
 * all JSON elements to find a specific element when appling remote changes
 * received from agent.
 *
 * Every element has a unique time ticket at creation, which allows us to find
 * a particular element.
 */
class JSONRoot {
    constructor(rootObject) {
        this.rootObject = rootObject;
        this.elementMapByCreatedAt = new Map();
        this.registerElement(this.rootObject);
        for (const elem of this.getDescendants()) {
            this.registerElement(elem);
        }
    }
    static create() {
        return new JSONRoot(_object__WEBPACK_IMPORTED_MODULE_1__["JSONObject"].create(_time_ticket__WEBPACK_IMPORTED_MODULE_0__["InitialTimeTicket"]));
    }
    /**
     * findByCreatedAt returns the element of given creation time.
     */
    findByCreatedAt(createdAt) {
        return this.elementMapByCreatedAt.get(createdAt.toIDString());
    }
    /**
     * registerElement registers the given element to hash table.
     */
    registerElement(element) {
        this.elementMapByCreatedAt.set(element.getCreatedAt().toIDString(), element);
    }
    *getDescendants() {
        for (const descendant of this.rootObject.getDescendants()) {
            yield descendant;
        }
    }
    getElementMapSize() {
        return this.elementMapByCreatedAt.size;
    }
    getObject() {
        return this.rootObject;
    }
    deepcopy() {
        return new JSONRoot(this.rootObject.deepcopy());
    }
    toJSON() {
        return this.rootObject.toJSON();
    }
    toSortedJSON() {
        return this.rootObject.toSortedJSON();
    }
}


/***/ }),

/***/ "./src/document/json/text.ts":
/*!***********************************!*\
  !*** ./src/document/json/text.ts ***!
  \***********************************/
/*! exports provided: PlainText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainText", function() { return PlainText; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/document/json/element.ts");
/* harmony import */ var _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class PlainText extends _element__WEBPACK_IMPORTED_MODULE_1__["JSONElement"] {
    constructor(rgaTreeSplit, createdAt) {
        super(createdAt);
        this.rgaTreeSplit = rgaTreeSplit;
        this.selectionMap = new Map();
        this.remoteChangeLock = false;
    }
    static create(rgaTreeSplit, createdAt) {
        return new PlainText(rgaTreeSplit, createdAt);
    }
    edit(fromIdx, toIdx, content) {
        _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported: this method should be called by proxy, ${fromIdx}-${toIdx} ${content}`);
        return null;
    }
    editInternal(range, content, latestCreatedAtMapByActor, editedAt) {
        const [caretPos, latestCreatedAtMap, changes] = this.rgaTreeSplit.edit(range, content, latestCreatedAtMapByActor, editedAt);
        const selectionChange = this.updateSelectionInternal([caretPos, caretPos], editedAt);
        if (selectionChange) {
            changes.push(selectionChange);
        }
        if (this.onChangesHandler) {
            this.remoteChangeLock = true;
            this.onChangesHandler(changes);
            this.remoteChangeLock = false;
        }
        return latestCreatedAtMap;
    }
    updateSelection(range, updatedAt) {
        if (this.remoteChangeLock) {
            return;
        }
        const change = this.updateSelectionInternal(range, updatedAt);
        if (this.onChangesHandler && change) {
            this.remoteChangeLock = true;
            this.onChangesHandler([change]);
            this.remoteChangeLock = false;
        }
    }
    hasRemoteChangeLock() {
        return this.remoteChangeLock;
    }
    onChanges(handler) {
        this.onChangesHandler = handler;
    }
    createRange(fromIdx, toIdx) {
        const fromPos = this.rgaTreeSplit.findNodePos(fromIdx);
        if (fromIdx === toIdx) {
            return [fromPos, fromPos];
        }
        return [fromPos, this.rgaTreeSplit.findNodePos(toIdx)];
    }
    toJSON() {
        return `"${this.rgaTreeSplit.toJSON()}"`;
    }
    toSortedJSON() {
        return this.toJSON();
    }
    getValue() {
        return this.rgaTreeSplit.toJSON();
    }
    getRGATreeSplit() {
        return this.rgaTreeSplit;
    }
    getAnnotatedString() {
        return this.rgaTreeSplit.getAnnotatedString();
    }
    deepcopy() {
        const text = PlainText.create(this.rgaTreeSplit.deepcopy(), this.getCreatedAt());
        text.remove(this.getRemovedAt());
        return text;
    }
    updateSelectionInternal(range, updatedAt) {
        if (!this.selectionMap.has(updatedAt.getActorID())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__["Selection"].of(range, updatedAt));
            return null;
        }
        const prevSelection = this.selectionMap.get(updatedAt.getActorID());
        if (updatedAt.after(prevSelection.getUpdatedAt())) {
            this.selectionMap.set(updatedAt.getActorID(), _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__["Selection"].of(range, updatedAt));
            const [from, to] = this.rgaTreeSplit.findIndexesFromRange(range);
            return {
                type: _rga_tree_split__WEBPACK_IMPORTED_MODULE_2__["ChangeType"].Selection,
                actor: updatedAt.getActorID(),
                from,
                to,
            };
        }
    }
}


/***/ }),

/***/ "./src/document/key/document_key.ts":
/*!******************************************!*\
  !*** ./src/document/key/document_key.ts ***!
  \******************************************/
/*! exports provided: DocumentKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentKey", function() { return DocumentKey; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Immutable
class DocumentKey {
    constructor(collection, document) {
        this.collection = collection;
        this.document = document;
    }
    static of(collection, document) {
        return new DocumentKey(collection, document);
    }
    getCollection() {
        return this.collection;
    }
    getDocument() {
        return this.document;
    }
    toIDString() {
        return `${this.collection}$${this.document}`;
    }
}


/***/ }),

/***/ "./src/document/operation/add_operation.ts":
/*!*************************************************!*\
  !*** ./src/document/operation/add_operation.ts ***!
  \*************************************************/
/*! exports provided: AddOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOperation", function() { return AddOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class AddOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(parentCreatedAt, prevCreatedAt, value, executedAt) {
        super(parentCreatedAt, executedAt);
        this.prevCreatedAt = prevCreatedAt;
        this.value = value;
    }
    static create(parentCreatedAt, prevCreatedAt, value, executedAt) {
        return new AddOperation(parentCreatedAt, prevCreatedAt, value, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__["JSONArray"]) {
            const array = parentObject;
            const value = this.value.deepcopy();
            array.insertAfter(this.prevCreatedAt, value);
            root.registerElement(value);
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only array can execute add`);
        }
    }
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.ADD`;
    }
    getPrevCreatedAt() {
        return this.prevCreatedAt;
    }
    getValue() {
        return this.value;
    }
}


/***/ }),

/***/ "./src/document/operation/edit_operation.ts":
/*!**************************************************!*\
  !*** ./src/document/operation/edit_operation.ts ***!
  \**************************************************/
/*! exports provided: EditOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditOperation", function() { return EditOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/text */ "./src/document/json/text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class EditOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;
        this.content = content;
    }
    static create(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt) {
        return new EditOperation(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_text__WEBPACK_IMPORTED_MODULE_1__["PlainText"]) {
            const text = parentObject;
            text.editInternal([this.fromPos, this.toPos], this.content, this.maxCreatedAtMapByActor, this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only PlainText can execute edit`);
        }
    }
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const content = this.content;
        return `${parent}.EDIT(${fromPos},${toPos},${content})`;
    }
    getFromPos() {
        return this.fromPos;
    }
    getToPos() {
        return this.toPos;
    }
    getContent() {
        return this.content;
    }
    getMaxCreatedAtMapByActor() {
        return this.maxCreatedAtMapByActor;
    }
}


/***/ }),

/***/ "./src/document/operation/move_operation.ts":
/*!**************************************************!*\
  !*** ./src/document/operation/move_operation.ts ***!
  \**************************************************/
/*! exports provided: MoveOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveOperation", function() { return MoveOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class MoveOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(parentCreatedAt, prevCreatedAt, createdAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.prevCreatedAt = prevCreatedAt;
        this.createdAt = createdAt;
    }
    static create(parentCreatedAt, prevCreatedAt, createdAt, executedAt) {
        return new MoveOperation(parentCreatedAt, prevCreatedAt, createdAt, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__["JSONArray"]) {
            const array = parentObject;
            array.moveAfter(this.prevCreatedAt, this.createdAt, this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only array can execute add`);
        }
    }
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.MOV`;
    }
    getPrevCreatedAt() {
        return this.prevCreatedAt;
    }
    getCreatedAt() {
        return this.createdAt;
    }
}


/***/ }),

/***/ "./src/document/operation/operation.ts":
/*!*********************************************!*\
  !*** ./src/document/operation/operation.ts ***!
  \*********************************************/
/*! exports provided: Operation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Operation", function() { return Operation; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Operation {
    constructor(parentCreatedAt, executedAt) {
        this.parentCreatedAt = parentCreatedAt;
        this.executedAt = executedAt;
    }
    getParentCreatedAt() {
        return this.parentCreatedAt;
    }
    getExecutedAt() {
        return this.executedAt;
    }
    setActor(actorID) {
        this.executedAt = this.executedAt.setActor(actorID);
    }
}


/***/ }),

/***/ "./src/document/operation/remove_operation.ts":
/*!****************************************************!*\
  !*** ./src/document/operation/remove_operation.ts ***!
  \****************************************************/
/*! exports provided: RemoveOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoveOperation", function() { return RemoveOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class RemoveOperation extends _operation__WEBPACK_IMPORTED_MODULE_3__["Operation"] {
    constructor(parentCreatedAt, createdAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.createdAt = createdAt;
    }
    static create(parentCreatedAt, createdAt, executedAt) {
        return new RemoveOperation(parentCreatedAt, createdAt, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_object__WEBPACK_IMPORTED_MODULE_1__["JSONObject"]) {
            const obj = parentObject;
            obj.delete(this.createdAt, this.getExecutedAt());
        }
        else if (parentObject instanceof _json_array__WEBPACK_IMPORTED_MODULE_2__["JSONArray"]) {
            const array = parentObject;
            array.delete(this.createdAt, this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`only object and array can execute remove: ${parentObject}`);
        }
    }
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.REMOVE`;
    }
    getCreatedAt() {
        return this.createdAt;
    }
}


/***/ }),

/***/ "./src/document/operation/rich_edit_operation.ts":
/*!*******************************************************!*\
  !*** ./src/document/operation/rich_edit_operation.ts ***!
  \*******************************************************/
/*! exports provided: RichEditOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichEditOperation", function() { return RichEditOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class RichEditOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.maxCreatedAtMapByActor = maxCreatedAtMapByActor;
        this.content = content;
        this.attributes = attributes;
    }
    static create(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt) {
        return new RichEditOperation(parentCreatedAt, fromPos, toPos, maxCreatedAtMapByActor, content, attributes, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_1__["RichText"]) {
            const text = parentObject;
            text.editInternal([this.fromPos, this.toPos], this.content, Object.fromEntries(this.attributes), this.maxCreatedAtMapByActor, this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only RichText can execute edit`);
        }
    }
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const content = this.content;
        return `${parent}.EDIT(${fromPos},${toPos},${content})`;
    }
    getFromPos() {
        return this.fromPos;
    }
    getToPos() {
        return this.toPos;
    }
    getContent() {
        return this.content;
    }
    getAttributes() {
        return this.attributes || new Map();
    }
    getMaxCreatedAtMapByActor() {
        return this.maxCreatedAtMapByActor;
    }
}


/***/ }),

/***/ "./src/document/operation/select_operation.ts":
/*!****************************************************!*\
  !*** ./src/document/operation/select_operation.ts ***!
  \****************************************************/
/*! exports provided: SelectOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectOperation", function() { return SelectOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/text */ "./src/document/json/text.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class SelectOperation extends _operation__WEBPACK_IMPORTED_MODULE_3__["Operation"] {
    constructor(parentCreatedAt, fromPos, toPos, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
    }
    static create(parentCreatedAt, fromPos, toPos, executedAt) {
        return new SelectOperation(parentCreatedAt, fromPos, toPos, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_text__WEBPACK_IMPORTED_MODULE_1__["PlainText"]) {
            const text = parentObject;
            text.updateSelection([this.fromPos, this.toPos], this.getExecutedAt());
        }
        else if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_2__["RichText"]) {
            const text = parentObject;
            text.updateSelection([this.fromPos, this.toPos], this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only PlainText, RichText can execute select`);
        }
    }
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        return `${parent}.SELT(${fromPos},${toPos})`;
    }
    getFromPos() {
        return this.fromPos;
    }
    getToPos() {
        return this.toPos;
    }
}


/***/ }),

/***/ "./src/document/operation/set_operation.ts":
/*!*************************************************!*\
  !*** ./src/document/operation/set_operation.ts ***!
  \*************************************************/
/*! exports provided: SetOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetOperation", function() { return SetOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class SetOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(key, value, parentCreatedAt, executedAt) {
        super(parentCreatedAt, executedAt);
        this.key = key;
        this.value = value;
    }
    static create(key, value, parentCreatedAt, executedAt) {
        return new SetOperation(key, value, parentCreatedAt, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_object__WEBPACK_IMPORTED_MODULE_1__["JSONObject"]) {
            const obj = parentObject;
            const value = this.value.deepcopy();
            obj.set(this.key, value);
            root.registerElement(value);
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only object can execute set`);
        }
    }
    getAnnotatedString() {
        return `${this.getParentCreatedAt().getAnnotatedString()}.SET`;
    }
    getKey() {
        return this.key;
    }
    getValue() {
        return this.value;
    }
}


/***/ }),

/***/ "./src/document/operation/style_operation.ts":
/*!***************************************************!*\
  !*** ./src/document/operation/style_operation.ts ***!
  \***************************************************/
/*! exports provided: StyleOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleOperation", function() { return StyleOperation; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./src/document/operation/operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class StyleOperation extends _operation__WEBPACK_IMPORTED_MODULE_2__["Operation"] {
    constructor(parentCreatedAt, fromPos, toPos, attributes, executedAt) {
        super(parentCreatedAt, executedAt);
        this.fromPos = fromPos;
        this.toPos = toPos;
        this.attributes = attributes;
    }
    static create(parentCreatedAt, fromPos, toPos, attributes, executedAt) {
        return new StyleOperation(parentCreatedAt, fromPos, toPos, attributes, executedAt);
    }
    execute(root) {
        const parentObject = root.findByCreatedAt(this.getParentCreatedAt());
        if (parentObject instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_1__["RichText"]) {
            const text = parentObject;
            text.setStyleInternal([this.fromPos, this.toPos], this.attributes ? Object.fromEntries(this.attributes) : {}, this.getExecutedAt());
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`fail to execute, only PlainText can execute edit`);
        }
    }
    getAnnotatedString() {
        const parent = this.getParentCreatedAt().getAnnotatedString();
        const fromPos = this.fromPos.getAnnotatedString();
        const toPos = this.toPos.getAnnotatedString();
        const attributes = this.attributes;
        return `${parent}.STYL(${fromPos},${toPos},${JSON.stringify(attributes)})`;
    }
    getFromPos() {
        return this.fromPos;
    }
    getToPos() {
        return this.toPos;
    }
    getAttributes() {
        return this.attributes;
    }
}


/***/ }),

/***/ "./src/document/proxy/array_proxy.ts":
/*!*******************************************!*\
  !*** ./src/document/proxy/array_proxy.ts ***!
  \*******************************************/
/*! exports provided: ArrayProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayProxy", function() { return ArrayProxy; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_add_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/add_operation */ "./src/document/operation/add_operation.ts");
/* harmony import */ var _operation_move_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/move_operation */ "./src/document/operation/move_operation.ts");
/* harmony import */ var _operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _object_proxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./object_proxy */ "./src/document/proxy/object_proxy.ts");
/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./proxy */ "./src/document/proxy/proxy.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









function isNumericString(val) {
    if (typeof val === 'string' || val instanceof String) {
        return !isNaN(val);
    }
    return false;
}
class ArrayProxy {
    constructor(context, array) {
        this.context = context;
        this.array = array;
        this.handlers = {
            get: (target, method, receiver) => {
                // Yorkie extension API
                if (method === 'getID') {
                    return () => {
                        return target.getCreatedAt();
                    };
                }
                else if (method === 'getElementByID') {
                    return (createdAt) => {
                        return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, target.get(createdAt));
                    };
                }
                else if (method === 'getElementByIndex') {
                    return (index) => {
                        const elem = target.getByIndex(index);
                        if (elem instanceof _json_primitive__WEBPACK_IMPORTED_MODULE_6__["JSONPrimitive"]) {
                            return elem;
                        }
                        return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, elem);
                    };
                }
                else if (method === 'getLast') {
                    return () => {
                        return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, target.getLast());
                    };
                }
                else if (method === 'deleteByID') {
                    return (createdAt) => {
                        const deleted = ArrayProxy.deleteInternalByID(context, target, createdAt);
                        return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, deleted);
                    };
                }
                else if (method === 'insertAfter') {
                    return (prevID, value) => {
                        const inserted = ArrayProxy.insertAfterInternal(context, target, prevID, value);
                        return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, inserted);
                    };
                }
                else if (method === 'moveBefore') {
                    return (prevID, itemID) => {
                        ArrayProxy.moveBeforeInternal(context, target, prevID, itemID);
                    };
                    // JavaScript Native API
                }
                else if (isNumericString(method)) {
                    return Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, target.getByIndex(+method));
                }
                else if (method === 'push') {
                    return (value) => {
                        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`array.push(${JSON.stringify(value)})`);
                        }
                        return ArrayProxy.pushInternal(context, target, value);
                    };
                }
                else if (method === 'filter') {
                    return (callback) => {
                        return Array.from(target).map((e) => Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, e)).filter(callback);
                    };
                }
                else if (method === 'reduce') {
                    return (callback, accumulator) => {
                        return Array.from(target).map((e) => Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(context, e)).reduce(callback, accumulator);
                    };
                }
                else if (method === 'length') {
                    return target.length;
                }
                else if (method === Symbol.iterator) {
                    return ArrayProxy.iteratorInternal.bind(this, context, target);
                }
                // TODO we need to distinguish between the case we need to call default
                // behavior and the case where we need to call an internal method
                // throw new TypeError(`Unsupported method: ${String(method)}`);
                return Reflect.get(target, method, receiver);
            },
            deleteProperty: (target, key) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`array[${key}]`);
                }
                ArrayProxy.deleteInternalByIndex(context, target, key);
                return true;
            },
        };
    }
    static *iteratorInternal(change, target) {
        for (const elem of target) {
            yield Object(_proxy__WEBPACK_IMPORTED_MODULE_8__["toProxy"])(change, elem);
        }
    }
    static create(context, target) {
        const arrayProxy = new ArrayProxy(context, target);
        return new Proxy(target, arrayProxy.getHandlers());
    }
    static pushInternal(context, target, value) {
        ArrayProxy.insertAfterInternal(context, target, target.getLastCreatedAt(), value);
        return target.length;
    }
    static moveBeforeInternal(context, target, nextCreatedAt, createdAt) {
        const ticket = context.issueTimeTicket();
        const prevCreatedAt = target.getPrevCreatedAt(nextCreatedAt);
        target.moveAfter(prevCreatedAt, createdAt, ticket);
        context.push(_operation_move_operation__WEBPACK_IMPORTED_MODULE_2__["MoveOperation"].create(target.getCreatedAt(), prevCreatedAt, createdAt, ticket));
    }
    static insertAfterInternal(context, target, prevCreatedAt, value) {
        const ticket = context.issueTimeTicket();
        if (_json_primitive__WEBPACK_IMPORTED_MODULE_6__["JSONPrimitive"].isSupport(value)) {
            const primitive = _json_primitive__WEBPACK_IMPORTED_MODULE_6__["JSONPrimitive"].of(value, ticket);
            target.insertAfter(prevCreatedAt, primitive);
            context.registerElement(primitive);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__["AddOperation"].create(target.getCreatedAt(), prevCreatedAt, primitive, ticket));
            return primitive;
        }
        else if (Array.isArray(value)) {
            const array = _json_array__WEBPACK_IMPORTED_MODULE_5__["JSONArray"].create(ticket);
            target.insertAfter(prevCreatedAt, array);
            context.registerElement(array);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__["AddOperation"].create(target.getCreatedAt(), prevCreatedAt, array, ticket));
            for (const element of value) {
                ArrayProxy.pushInternal(context, array, element);
            }
            return array;
        }
        else if (typeof value === 'object') {
            const obj = _json_object__WEBPACK_IMPORTED_MODULE_4__["JSONObject"].create(ticket);
            target.insertAfter(prevCreatedAt, obj);
            context.registerElement(obj);
            context.push(_operation_add_operation__WEBPACK_IMPORTED_MODULE_1__["AddOperation"].create(target.getCreatedAt(), prevCreatedAt, obj, ticket));
            for (const [k, v] of Object.entries(value)) {
                _object_proxy__WEBPACK_IMPORTED_MODULE_7__["ObjectProxy"].setInternal(context, obj, k, v);
            }
            return obj;
        }
        else {
            throw new TypeError(`Unsupported type of value: ${typeof value}`);
        }
    }
    static deleteInternalByIndex(context, target, index) {
        const ticket = context.issueTimeTicket();
        const deleted = target.deleteByIndex(index, ticket);
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__["RemoveOperation"].create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
        return deleted;
    }
    static deleteInternalByID(context, target, createdAt) {
        const ticket = context.issueTimeTicket();
        const deleted = target.delete(createdAt, ticket);
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_3__["RemoveOperation"].create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
        return deleted;
    }
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/proxy/object_proxy.ts":
/*!********************************************!*\
  !*** ./src/document/proxy/object_proxy.ts ***!
  \********************************************/
/*! exports provided: ObjectProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectProxy", function() { return ObjectProxy; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_set_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/set_operation */ "./src/document/operation/set_operation.ts");
/* harmony import */ var _operation_remove_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/remove_operation */ "./src/document/operation/remove_operation.ts");
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../json/rga_tree_split */ "./src/document/json/rga_tree_split.ts");
/* harmony import */ var _json_text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../json/text */ "./src/document/json/text.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _array_proxy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./array_proxy */ "./src/document/proxy/array_proxy.ts");
/* harmony import */ var _text_proxy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./text_proxy */ "./src/document/proxy/text_proxy.ts");
/* harmony import */ var _rich_text_proxy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rich_text_proxy */ "./src/document/proxy/rich_text_proxy.ts");
/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./proxy */ "./src/document/proxy/proxy.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */













class ObjectProxy {
    constructor(context) {
        this.context = context;
        this.handlers = {
            set: (target, key, value) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${key}]=${JSON.stringify(value)}`);
                }
                ObjectProxy.setInternal(context, target, key, value);
                return true;
            },
            get: (target, keyOrMethod) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${keyOrMethod}]`);
                }
                if (keyOrMethod === 'getID') {
                    return () => {
                        return target.getCreatedAt();
                    };
                }
                else if (keyOrMethod === 'toJSON') {
                    return () => {
                        return target.toJSON();
                    };
                }
                else if (keyOrMethod === 'createText') {
                    return (key) => {
                        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${key}]=Text`);
                        }
                        return ObjectProxy.createText(context, target, key);
                    };
                }
                else if (keyOrMethod === 'createRichText') {
                    return (key) => {
                        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${key}]=Text`);
                        }
                        return ObjectProxy.createRichText(context, target, key);
                    };
                }
                return Object(_proxy__WEBPACK_IMPORTED_MODULE_12__["toProxy"])(context, target.get(keyOrMethod));
            },
            deleteProperty: (target, key) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${key}]`);
                }
                ObjectProxy.deleteInternal(context, target, key);
                return true;
            },
        };
    }
    static create(context, target) {
        const objectProxy = new ObjectProxy(context);
        return new Proxy(target, objectProxy.getHandlers());
    }
    static setInternal(context, target, key, value) {
        const ticket = context.issueTimeTicket();
        if (_json_primitive__WEBPACK_IMPORTED_MODULE_5__["JSONPrimitive"].isSupport(value)) {
            const primitive = _json_primitive__WEBPACK_IMPORTED_MODULE_5__["JSONPrimitive"].of(value, ticket);
            target.set(key, primitive);
            context.registerElement(primitive);
            context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, primitive, target.getCreatedAt(), ticket));
        }
        else if (Array.isArray(value)) {
            const array = _json_array__WEBPACK_IMPORTED_MODULE_4__["JSONArray"].create(ticket);
            target.set(key, array);
            context.registerElement(array);
            context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, array.deepcopy(), target.getCreatedAt(), ticket));
            for (const element of value) {
                _array_proxy__WEBPACK_IMPORTED_MODULE_9__["ArrayProxy"].pushInternal(context, array, element);
            }
        }
        else if (typeof value === 'object') {
            if (value instanceof _json_text__WEBPACK_IMPORTED_MODULE_7__["PlainText"]) {
                target.set(key, value);
                context.registerElement(value);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, value.deepcopy(), target.getCreatedAt(), ticket));
            }
            else {
                const obj = _json_object__WEBPACK_IMPORTED_MODULE_3__["JSONObject"].create(ticket);
                target.set(key, obj);
                context.registerElement(obj);
                context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, obj.deepcopy(), target.getCreatedAt(), ticket));
                for (const [k, v] of Object.entries(value)) {
                    ObjectProxy.setInternal(context, obj, k, v);
                }
            }
        }
        else {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported type of value: ${typeof value}`);
        }
    }
    static createText(context, target, key) {
        const ticket = context.issueTimeTicket();
        const text = _json_text__WEBPACK_IMPORTED_MODULE_7__["PlainText"].create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__["RGATreeSplit"].create(), ticket);
        target.set(key, text);
        context.registerElement(text);
        context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, text.deepcopy(), target.getCreatedAt(), ticket));
        return _text_proxy__WEBPACK_IMPORTED_MODULE_10__["TextProxy"].create(context, text);
    }
    static createRichText(context, target, key) {
        const ticket = context.issueTimeTicket();
        const text = _json_rich_text__WEBPACK_IMPORTED_MODULE_8__["RichText"].create(_json_rga_tree_split__WEBPACK_IMPORTED_MODULE_6__["RGATreeSplit"].create(), ticket);
        target.set(key, text);
        context.registerElement(text);
        context.push(_operation_set_operation__WEBPACK_IMPORTED_MODULE_1__["SetOperation"].create(key, text.deepcopy(), target.getCreatedAt(), ticket));
        return _rich_text_proxy__WEBPACK_IMPORTED_MODULE_11__["RichTextProxy"].create(context, text);
    }
    static deleteInternal(context, target, key) {
        const ticket = context.issueTimeTicket();
        const deleted = target.deleteByKey(key, ticket);
        context.push(_operation_remove_operation__WEBPACK_IMPORTED_MODULE_2__["RemoveOperation"].create(target.getCreatedAt(), deleted.getCreatedAt(), ticket));
    }
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/proxy/proxy.ts":
/*!*************************************!*\
  !*** ./src/document/proxy/proxy.ts ***!
  \*************************************/
/*! exports provided: createProxy, toProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createProxy", function() { return createProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toProxy", function() { return toProxy; });
/* harmony import */ var _json_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../json/object */ "./src/document/json/object.ts");
/* harmony import */ var _json_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/array */ "./src/document/json/array.ts");
/* harmony import */ var _json_primitive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../json/primitive */ "./src/document/json/primitive.ts");
/* harmony import */ var _json_rich_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../json/rich_text */ "./src/document/json/rich_text.ts");
/* harmony import */ var _json_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../json/text */ "./src/document/json/text.ts");
/* harmony import */ var _object_proxy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object_proxy */ "./src/document/proxy/object_proxy.ts");
/* harmony import */ var _array_proxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./array_proxy */ "./src/document/proxy/array_proxy.ts");
/* harmony import */ var _text_proxy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./text_proxy */ "./src/document/proxy/text_proxy.ts");
/* harmony import */ var _rich_text_proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rich_text_proxy */ "./src/document/proxy/rich_text_proxy.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









function createProxy(context, target) {
    return _object_proxy__WEBPACK_IMPORTED_MODULE_5__["ObjectProxy"].create(context, target);
}
function toProxy(context, elem) {
    if (elem instanceof _json_primitive__WEBPACK_IMPORTED_MODULE_2__["JSONPrimitive"]) {
        const primitive = elem;
        return primitive.getValue();
    }
    else if (elem instanceof _json_object__WEBPACK_IMPORTED_MODULE_0__["JSONObject"]) {
        const obj = elem;
        return _object_proxy__WEBPACK_IMPORTED_MODULE_5__["ObjectProxy"].create(context, obj);
    }
    else if (elem instanceof _json_array__WEBPACK_IMPORTED_MODULE_1__["JSONArray"]) {
        const array = elem;
        return _array_proxy__WEBPACK_IMPORTED_MODULE_6__["ArrayProxy"].create(context, array);
    }
    else if (elem instanceof _json_text__WEBPACK_IMPORTED_MODULE_4__["PlainText"]) {
        const text = elem;
        return _text_proxy__WEBPACK_IMPORTED_MODULE_7__["TextProxy"].create(context, text);
    }
    else if (elem instanceof _json_rich_text__WEBPACK_IMPORTED_MODULE_3__["RichText"]) {
        const text = elem;
        return _rich_text_proxy__WEBPACK_IMPORTED_MODULE_8__["RichTextProxy"].create(context, text);
    }
    else if (elem === null) {
        return null;
    }
    else {
        throw new TypeError(`Unsupported type of element: ${typeof elem}`);
    }
}


/***/ }),

/***/ "./src/document/proxy/rich_text_proxy.ts":
/*!***********************************************!*\
  !*** ./src/document/proxy/rich_text_proxy.ts ***!
  \***********************************************/
/*! exports provided: RichTextProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichTextProxy", function() { return RichTextProxy; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/rich_edit_operation */ "./src/document/operation/rich_edit_operation.ts");
/* harmony import */ var _operation_style_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/style_operation */ "./src/document/operation/style_operation.ts");
/* harmony import */ var _operation_select_operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation/select_operation */ "./src/document/operation/select_operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class RichTextProxy {
    constructor(context) {
        this.context = context;
        this.handlers = {
            get: (target, method) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${method}]`);
                }
                if (method === 'edit') {
                    return (fromIdx, toIdx, content, attributes) => {
                        this.edit(target, fromIdx, toIdx, content, attributes);
                        return true;
                    };
                }
                if (method === 'setStyle') {
                    return (fromIdx, toIdx, attributes) => {
                        this.setStyle(target, fromIdx, toIdx, attributes);
                        return true;
                    };
                }
                else if (method === 'updateSelection') {
                    return (fromIdx, toIdx) => {
                        this.updateSelection(target, fromIdx, toIdx);
                        return true;
                    };
                }
                else if (method === 'getAnnotatedString') {
                    return () => {
                        return target.getAnnotatedString();
                    };
                }
                else if (method === 'getValue') {
                    return () => {
                        return target.getValue();
                    };
                }
                else if (method === 'createRange') {
                    return (fromIdx, toIdx) => {
                        return target.createRange(fromIdx, toIdx);
                    };
                }
                else if (method === 'onChanges') {
                    return (handler) => {
                        target.onChanges(handler);
                    };
                }
                _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported method: ${method}`);
            },
        };
    }
    static create(context, target) {
        const textProxy = new RichTextProxy(context);
        return new Proxy(target, textProxy.getHandlers());
    }
    edit(target, fromIdx, toIdx, content, attributes) {
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('from should be less than or equal to to');
        }
        const range = target.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`EDIT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} c:${content}`);
        }
        const ticket = this.context.issueTimeTicket();
        const maxCreatedAtMapByActor = target.editInternal(range, content, attributes, null, ticket);
        this.context.push(new _operation_rich_edit_operation__WEBPACK_IMPORTED_MODULE_1__["RichEditOperation"](target.getCreatedAt(), range[0], range[1], maxCreatedAtMapByActor, content, attributes ? new Map(Object.entries(attributes)) : new Map(), ticket));
    }
    setStyle(target, fromIdx, toIdx, attributes) {
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('from should be less than or equal to to');
        }
        const range = target.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`STYL: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} a:${JSON.stringify(attributes)}`);
        }
        const ticket = this.context.issueTimeTicket();
        target.setStyleInternal(range, attributes, ticket);
        this.context.push(new _operation_style_operation__WEBPACK_IMPORTED_MODULE_2__["StyleOperation"](target.getCreatedAt(), range[0], range[1], new Map(Object.entries(attributes)), ticket));
    }
    updateSelection(target, fromIdx, toIdx) {
        const range = target.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`SELT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()}`);
        }
        const ticket = this.context.issueTimeTicket();
        target.updateSelection(range, ticket);
        this.context.push(new _operation_select_operation__WEBPACK_IMPORTED_MODULE_3__["SelectOperation"](target.getCreatedAt(), range[0], range[1], ticket));
    }
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/proxy/text_proxy.ts":
/*!******************************************!*\
  !*** ./src/document/proxy/text_proxy.ts ***!
  \******************************************/
/*! exports provided: TextProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextProxy", function() { return TextProxy; });
/* harmony import */ var _util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logger */ "./src/util/logger.ts");
/* harmony import */ var _operation_edit_operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation/edit_operation */ "./src/document/operation/edit_operation.ts");
/* harmony import */ var _operation_select_operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation/select_operation */ "./src/document/operation/select_operation.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



class TextProxy {
    constructor(context) {
        this.context = context;
        this.handlers = {
            get: (target, method) => {
                if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trivial)) {
                    _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].trivial(`obj[${method}]`);
                }
                if (method === 'edit') {
                    return (fromIdx, toIdx, content) => {
                        this.edit(target, fromIdx, toIdx, content);
                        return true;
                    };
                }
                else if (method === 'updateSelection') {
                    return (fromIdx, toIdx) => {
                        this.updateSelection(target, fromIdx, toIdx);
                        return true;
                    };
                }
                else if (method === 'getAnnotatedString') {
                    return () => {
                        return target.getAnnotatedString();
                    };
                }
                else if (method === 'getValue') {
                    return () => {
                        return target.getValue();
                    };
                }
                else if (method === 'createRange') {
                    return (fromIdx, toIdx) => {
                        return target.createRange(fromIdx, toIdx);
                    };
                }
                else if (method === 'onChanges') {
                    return (handler) => {
                        target.onChanges(handler);
                    };
                }
                _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`unsupported method: ${method}`);
            },
        };
    }
    static create(context, target) {
        const textProxy = new TextProxy(context);
        return new Proxy(target, textProxy.getHandlers());
    }
    edit(target, fromIdx, toIdx, content) {
        if (fromIdx > toIdx) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('from should be less than or equal to to');
        }
        const range = target.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`EDIT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()} c:${content}`);
        }
        const ticket = this.context.issueTimeTicket();
        const maxCreatedAtMapByActor = target.editInternal(range, content, null, ticket);
        this.context.push(new _operation_edit_operation__WEBPACK_IMPORTED_MODULE_1__["EditOperation"](target.getCreatedAt(), range[0], range[1], maxCreatedAtMapByActor, content, ticket));
    }
    updateSelection(target, fromIdx, toIdx) {
        const range = target.createRange(fromIdx, toIdx);
        if (_util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].isEnabled(_util_logger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Debug)) {
            _util_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug(`SELT: f:${fromIdx}->${range[0].getAnnotatedString()}, t:${toIdx}->${range[1].getAnnotatedString()}`);
        }
        const ticket = this.context.issueTimeTicket();
        target.updateSelection(range, ticket);
        this.context.push(new _operation_select_operation__WEBPACK_IMPORTED_MODULE_2__["SelectOperation"](target.getCreatedAt(), range[0], range[1], ticket));
    }
    getHandlers() {
        return this.handlers;
    }
}


/***/ }),

/***/ "./src/document/time/actor_id.ts":
/*!***************************************!*\
  !*** ./src/document/time/actor_id.ts ***!
  \***************************************/
/*! exports provided: InitialActorID, MaxActorID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitialActorID", function() { return InitialActorID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxActorID", function() { return MaxActorID; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const InitialActorID = '000000000000000000000000';
const MaxActorID = 'FFFFFFFFFFFFFFFFFFFFFFFF';


/***/ }),

/***/ "./src/document/time/ticket.ts":
/*!*************************************!*\
  !*** ./src/document/time/ticket.ts ***!
  \*************************************/
/*! exports provided: TicketComparator, TimeTicket, InitialDelimiter, MaxDelemiter, MaxLamport, InitialTimeTicket, MaxTimeTicket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TicketComparator", function() { return TicketComparator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeTicket", function() { return TimeTicket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitialDelimiter", function() { return InitialDelimiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxDelemiter", function() { return MaxDelemiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxLamport", function() { return MaxLamport; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitialTimeTicket", function() { return InitialTimeTicket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxTimeTicket", function() { return MaxTimeTicket; });
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _actor_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actor_id */ "./src/document/time/actor_id.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const TicketComparator = (p1, p2) => {
    return p1.compare(p2);
};
// Immutable
class TimeTicket {
    constructor(lamport, delimiter, actorID) {
        this.lamport = lamport;
        this.delimiter = delimiter;
        this.actorID = actorID;
    }
    static of(lamport, delimiter, actorID) {
        return new TimeTicket(lamport, delimiter, actorID);
    }
    toIDString() {
        if (this.actorID == null) {
            return `${this.lamport.toString()}:nil:${this.delimiter}`;
        }
        return `${this.lamport.toString()}:${this.actorID}:${this.delimiter}`;
    }
    getAnnotatedString() {
        if (this.actorID == null) {
            return `${this.lamport.toString()}:nil:${this.delimiter}`;
        }
        return `${this.lamport.toString()}:${this.actorID.substring(22, 24)}:${this.delimiter}`;
    }
    setActor(actorID) {
        return new TimeTicket(this.lamport, this.delimiter, actorID);
    }
    getLamportAsString() {
        return this.lamport.toString();
    }
    getDelimiter() {
        return this.delimiter;
    }
    getActorID() {
        return this.actorID;
    }
    after(other) {
        return this.compare(other) > 0;
    }
    equals(other) {
        return this.compare(other) === 0;
    }
    compare(other) {
        if (this.lamport.greaterThan(other.lamport)) {
            return 1;
        }
        else if (other.lamport.greaterThan(this.lamport)) {
            return -1;
        }
        const compare = this.actorID.localeCompare(other.actorID);
        if (compare !== 0) {
            return compare;
        }
        if (this.delimiter > other.delimiter) {
            return 1;
        }
        else if (other.delimiter > this.delimiter) {
            return -1;
        }
        return 0;
    }
}
const InitialDelimiter = 0;
const MaxDelemiter = 4294967295;
const MaxLamport = long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString('18446744073709551615', true);
const InitialTimeTicket = new TimeTicket(long__WEBPACK_IMPORTED_MODULE_0___default.a.fromNumber(0, true), InitialDelimiter, _actor_id__WEBPACK_IMPORTED_MODULE_1__["InitialActorID"]);
const MaxTimeTicket = new TimeTicket(MaxLamport, MaxDelemiter, _actor_id__WEBPACK_IMPORTED_MODULE_1__["MaxActorID"]);


/***/ }),

/***/ "./src/util/comparator.ts":
/*!********************************!*\
  !*** ./src/util/comparator.ts ***!
  \********************************/
/*! exports provided: DefaultComparator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultComparator", function() { return DefaultComparator; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DefaultComparator = (a, b) => {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
};


/***/ }),

/***/ "./src/util/error.ts":
/*!***************************!*\
  !*** ./src/util/error.ts ***!
  \***************************/
/*! exports provided: Code, YorkieError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Code", function() { return Code; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YorkieError", function() { return YorkieError; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Code = {
    Ok: 'ok',
    ClientNotActive: 'client-not-active',
    Unimplemented: 'unimplemented',
    Unsupported: 'unsupported',
};
class YorkieError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        this.message = message;
        this.name = 'YorkieError';
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
    }
}


/***/ }),

/***/ "./src/util/heap.ts":
/*!**************************!*\
  !*** ./src/util/heap.ts ***!
  \**************************/
/*! exports provided: HeapNode, Heap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeapNode", function() { return HeapNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return Heap; });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comparator */ "./src/util/comparator.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class HeapNode {
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
    getKey() {
        return this.key;
    }
    getValue() {
        return this.value;
    }
}
class Heap {
    constructor(comparator) {
        this.comparator = comparator || _comparator__WEBPACK_IMPORTED_MODULE_0__["DefaultComparator"];
        this.nodes = [];
    }
    peek() {
        if (!this.nodes.length) {
            return null;
        }
        return this.nodes[0];
    }
    push(node) {
        this.nodes.push(node);
        this.moveUp(this.nodes.length - 1);
    }
    pop() {
        const count = this.nodes.length;
        const head = this.nodes[0];
        if (count <= 0) {
            return undefined;
        }
        else if (count == 1) {
            // clear array
            this.nodes.length = 0;
        }
        else {
            this.nodes[0] = this.nodes.pop();
            this.moveDown(0);
        }
        return head;
    }
    *[Symbol.iterator]() {
        for (const node of this.nodes) {
            yield node;
        }
    }
    moveUp(index) {
        const node = this.nodes[index];
        while (index > 0) {
            const parentIndex = this.getParentIndex(index);
            if (this.comparator(this.nodes[parentIndex].getKey(), node.getKey()) < 0) {
                this.nodes[index] = this.nodes[parentIndex];
                index = parentIndex;
            }
            else {
                break;
            }
        }
        this.nodes[index] = node;
    }
    moveDown(index) {
        const count = this.nodes.length;
        const node = this.nodes[index];
        while (index < count >> 1) {
            const leftChildIndex = this.getLeftChildIndex(index);
            const rightChildIndex = this.getRightChildIndex(index);
            const smallerChildIndex = rightChildIndex < count &&
                this.comparator(this.nodes[leftChildIndex].getKey(), this.nodes[rightChildIndex].getKey()) < 0 ?
                rightChildIndex : leftChildIndex;
            if (this.comparator(this.nodes[smallerChildIndex].getKey(), node.getKey()) < 0) {
                break;
            }
            this.nodes[index] = this.nodes[smallerChildIndex];
            index = smallerChildIndex;
        }
        this.nodes[index] = node;
    }
    getParentIndex(index) {
        return (index - 1) >> 1;
    }
    getLeftChildIndex(index) {
        return index * 2 + 1;
    }
    getRightChildIndex(index) {
        return index * 2 + 2;
    }
}


/***/ }),

/***/ "./src/util/llrb_tree.ts":
/*!*******************************!*\
  !*** ./src/util/llrb_tree.ts ***!
  \*******************************/
/*! exports provided: SortedMapIterator, LLRBTree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortedMapIterator", function() { return SortedMapIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LLRBTree", function() { return LLRBTree; });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comparator */ "./src/util/comparator.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class LLRBNode {
    constructor(key, value, isRed) {
        this.key = key;
        this.value = value;
        this.isRed = isRed;
        this.left;
        this.right;
    }
}
class SortedMapIterator {
    constructor(root) {
        this.stack = [];
        this.traverseInorder(root);
    }
    // TODO: Replace with iterative approach, if we encounter performance problem.
    traverseInorder(node) {
        if (!node) {
            return;
        }
        this.traverseInorder(node.left);
        this.stack.push({
            key: node.key,
            value: node.value,
        });
        this.traverseInorder(node.right);
    }
}
/**
 * LLRBTree is an implementation of Left-learning Red-Black Tree.
 *
 * Original paper on Left-leaning Red-Black Trees:
 * - http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf
 *
 * Invariant 1: No red node has a red child
 * Invariant 2: Every leaf path has the same number of black nodes
 * Invariant 3: Only the left child can be red (left leaning)
 */
class LLRBTree {
    constructor(comparator) {
        this.root = null;
        this.comparator =
            typeof comparator !== 'undefined' ? comparator : _comparator__WEBPACK_IMPORTED_MODULE_0__["DefaultComparator"];
        this.counter = 0;
    }
    put(key, value) {
        this.root = this.putInternal(this.root, key, value);
        this.root.isRed = false;
        return value;
    }
    get(key) {
        const node = this.getInternal(this.root, key);
        return node ? node.value : null;
    }
    remove(key) {
        if (!this.isRed(this.root.left) && !this.isRed(this.root.right)) {
            this.root.isRed = true;
        }
        this.root = this.removeInternal(this.root, key);
        if (this.root) {
            this.root.isRed = false;
        }
    }
    getIterator() {
        return new SortedMapIterator(this.root);
    }
    values() {
        const values = [];
        for (const entry of this.getIterator().stack) {
            values.push(entry.value);
        }
        return values;
    }
    floorEntry(key) {
        let node = this.root;
        while (node) {
            const compare = this.comparator(key, node.key);
            if (compare > 0) {
                if (node.right) {
                    node.right.parent = node;
                    node = node.right;
                }
                else {
                    return node;
                }
            }
            else if (compare < 0) {
                if (node.left) {
                    node.left.parent = node;
                    node = node.left;
                }
                else {
                    let parent = node.parent;
                    let childNode = node;
                    while (parent && childNode === parent.left) {
                        childNode = parent;
                        parent = parent.parent;
                    }
                    return parent;
                }
            }
            else {
                return node;
            }
        }
        return null;
    }
    lastEntry() {
        if (!this.root) {
            return this.root;
        }
        let node = this.root;
        while (node.right) {
            node = node.right;
        }
        return node;
    }
    size() {
        return this.counter;
    }
    isEmpty() {
        return this.counter === 0;
    }
    getInternal(node, key) {
        while (node) {
            const compare = this.comparator(key, node.key);
            if (compare === 0) {
                return node;
            }
            else if (compare < 0) {
                node = node.left;
            }
            else if (compare > 0) {
                node = node.right;
            }
        }
        return null;
    }
    putInternal(node, key, value) {
        if (!node) {
            this.counter += 1;
            return new LLRBNode(key, value, true);
        }
        const compare = this.comparator(key, node.key);
        if (compare < 0) {
            node.left = this.putInternal(node.left, key, value);
        }
        else if (compare > 0) {
            node.right = this.putInternal(node.right, key, value);
        }
        else {
            node.value = value;
        }
        if (this.isRed(node.right) && !this.isRed(node.left)) {
            node = this.rotateLeft(node);
        }
        if (this.isRed(node.left) && this.isRed(node.left.left)) {
            node = this.rotateRight(node);
        }
        if (this.isRed(node.left) && this.isRed(node.right)) {
            this.flipColors(node);
        }
        return node;
    }
    removeInternal(node, key) {
        if (this.comparator(key, node.key) < 0) {
            if (!this.isRed(node.left) && !this.isRed(node.left.left)) {
                node = this.moveRedLeft(node);
            }
            node.left = this.removeInternal(node.left, key);
        }
        else {
            if (this.isRed(node.left)) {
                node = this.rotateRight(node);
            }
            if (this.comparator(key, node.key) === 0 && !node.right) {
                this.counter -= 1;
                return null;
            }
            if (!this.isRed(node.right) && !this.isRed(node.right.left)) {
                node = this.moveRedRight(node);
            }
            if (this.comparator(key, node.key) === 0) {
                this.counter -= 1;
                const smallest = this.min(node.right);
                node.value = smallest.value;
                node.key = smallest.key;
                node.right = this.removeMin(node.right);
            }
            else {
                node.right = this.removeInternal(node.right, key);
            }
        }
        return this.fixUp(node);
    }
    min(node) {
        if (!node.left) {
            return node;
        }
        else {
            return this.min(node.left);
        }
    }
    removeMin(node) {
        if (!node.left) {
            return null;
        }
        if (!this.isRed(node.left) && !this.isRed(node.left.left)) {
            node = this.moveRedLeft(node);
        }
        node.left = this.removeMin(node.left);
        return this.fixUp(node);
    }
    fixUp(node) {
        if (this.isRed(node.right)) {
            node = this.rotateLeft(node);
        }
        if (this.isRed(node.left) && this.isRed(node.left.left)) {
            node = this.rotateRight(node);
        }
        if (this.isRed(node.left) && this.isRed(node.right)) {
            this.flipColors(node);
        }
        return node;
    }
    moveRedLeft(node) {
        this.flipColors(node);
        if (this.isRed(node.right.left)) {
            node.right = this.rotateRight(node.right);
            node = this.rotateLeft(node);
            this.flipColors(node);
        }
        return node;
    }
    moveRedRight(node) {
        this.flipColors(node);
        if (this.isRed(node.left.left)) {
            node = this.rotateRight(node);
            this.flipColors(node);
        }
        return node;
    }
    isRed(node) {
        return node && node.isRed;
    }
    rotateLeft(node) {
        const x = node.right;
        node.right = x.left;
        x.left = node;
        x.isRed = x.left.isRed;
        x.left.isRed = true;
        return x;
    }
    rotateRight(node) {
        const x = node.left;
        node.left = x.right;
        x.right = node;
        x.isRed = x.right.isRed;
        x.right.isRed = true;
        return x;
    }
    flipColors(node) {
        node.isRed = !node.isRed;
        node.left.isRed = !node.left.isRed;
        node.right.isRed = !node.right.isRed;
    }
}


/***/ }),

/***/ "./src/util/logger.ts":
/*!****************************!*\
  !*** ./src/util/logger.ts ***!
  \****************************/
/*! exports provided: LogLevel, setLogLevel, logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return setLogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trivial"] = 0] = "Trivial";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warn"] = 3] = "Warn";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Fatal"] = 5] = "Fatal";
})(LogLevel || (LogLevel = {}));
let level = LogLevel.Debug;
function setLogLevel(l) {
    level = l;
}
const logger = {
    trivial: (message) => {
        if (level > LogLevel.Trivial) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log(`YORKIE T: ${message}`);
        }
    },
    debug: (message) => {
        if (level > LogLevel.Debug) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log(`YORKIE D: ${message}`);
        }
    },
    info: (message) => {
        if (level > LogLevel.Info) {
            return;
        }
        if (typeof console != 'undefined') {
            console.log(`YORKIE I: ${message}`);
        }
    },
    warn: (message) => {
        if (level > LogLevel.Warn) {
            return;
        }
        if (typeof console != 'undefined') {
            if (typeof console.warn !== 'undefined') {
                console.warn(`YORKIE W: ${message}`);
            }
            else {
                console.log(`YORKIE W: ${message}`);
            }
        }
    },
    error: (message) => {
        if (level > LogLevel.Error) {
            return;
        }
        if (typeof console != 'undefined') {
            if (typeof console.error !== 'undefined') {
                console.error(`YORKIE E: ${message}`);
            }
            else {
                console.log(`YORKIE E: ${message}`);
            }
        }
    },
    fatal: (message) => {
        if (typeof console != 'undefined') {
            if (typeof console.error !== 'undefined') {
                console.error(`YORKIE F: ${message}`);
            }
            else {
                console.log(`YORKIE F: ${message}`);
            }
        }
        throw new Error(`YORKIE F: ${message}`);
    },
    isEnabled: (l) => {
        return level <= l;
    },
};


/***/ }),

/***/ "./src/util/observable.ts":
/*!********************************!*\
  !*** ./src/util/observable.ts ***!
  \********************************/
/*! exports provided: createObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createObservable", function() { return createObservable; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/util/logger.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const Noop = () => {
    // Do nothing
};
class ObserverProxy {
    constructor(executor, onNoObservers) {
        this.finalized = false;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.onNoObservers = onNoObservers;
        this.task.then(() => {
            executor(this);
        }).catch((error) => {
            this.error(error);
        });
    }
    next(value) {
        this.forEachObserver((observer) => {
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer) => {
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer) => {
            observer.complete();
        });
        this.close();
    }
    subscribe(nextOrObserver, error, complete) {
        let observer;
        if (!nextOrObserver) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('missing observer');
        }
        if (this.finalized) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal('observable is finalized due to previous error');
        }
        if (typeof nextOrObserver === 'object') {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error,
                complete,
            };
        }
        if (observer.next === undefined) {
            observer.next = Noop;
        }
        if (observer.error === undefined) {
            observer.error = Noop;
        }
        if (observer.complete === undefined) {
            observer.complete = Noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
            this.task.then(() => {
                try {
                    if (this.finalError) {
                        observer.error(this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (err) {
                    // nothing
                    _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(err);
                }
                return;
            });
        }
        this.observers.push(observer);
        this.observerCount += 1;
        return unsub;
    }
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    }
    forEachObserver(fn) {
        if (this.finalized) {
            return;
        }
        for (let i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    }
    sendOne(i, fn) {
        this.task.then(() => {
            if (this.observers !== undefined && this.observers[i] !== undefined) {
                try {
                    fn(this.observers[i]);
                }
                catch (err) {
                    _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error(err);
                }
            }
        });
    }
    close(err) {
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        this.task.then(() => {
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
function createObservable(executor) {
    const proxy = new ObserverProxy(executor);
    return {
        subscribe: proxy.subscribe.bind(proxy),
        getProxy: () => {
            return proxy;
        },
    };
}


/***/ }),

/***/ "./src/util/splay_tree.ts":
/*!********************************!*\
  !*** ./src/util/splay_tree.ts ***!
  \********************************/
/*! exports provided: SplayNode, SplayTree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplayNode", function() { return SplayNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplayTree", function() { return SplayTree; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/util/logger.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class SplayNode {
    constructor(value) {
        this.value = value;
        this.initWeight();
    }
    getNodeString() {
        return `${this.weight}${this.value}`;
    }
    getValue() {
        return this.value;
    }
    getLeftWeight() {
        return !this.hasLeft() ? 0 : this.left.getWeight();
    }
    getRightWeight() {
        return !this.hasRight() ? 0 : this.right.getWeight();
    }
    getWeight() {
        return this.weight;
    }
    getLeft() {
        return this.left;
    }
    getRight() {
        return this.right;
    }
    setRight(right) {
        this.right = right;
    }
    hasLeft() {
        return !!this.left;
    }
    hasRight() {
        return !!this.right;
    }
    hasParent() {
        return !!this.parent;
    }
    setParent(parent) {
        this.parent = parent;
    }
    setLeft(left) {
        this.left = left;
    }
    getParent() {
        return this.parent;
    }
    increaseWeight(weight) {
        this.weight += weight;
    }
    initWeight() {
        this.weight = this.getLength();
    }
}
/**
 * SplayTree is weighted binary search tree which is based on Splay tree.
 * original paper on Splay Trees:
 *  - https://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf
 */
class SplayTree {
    constructor(root) {
        this.root = root;
    }
    find(pos) {
        if (!this.root) {
            return [null, 0];
        }
        let node = this.root;
        for (;;) {
            if (node.hasLeft() && pos <= node.getLeftWeight()) {
                node = node.getLeft();
            }
            else if (node.hasRight() &&
                node.getLeftWeight() + node.getLength() < pos) {
                pos -= node.getLeftWeight() + node.getLength();
                node = node.getRight();
            }
            else {
                pos -= node.getLeftWeight();
                break;
            }
        }
        if (pos > node.getLength()) {
            _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].fatal(`out of bound of text index: pos: ${pos} > node.length: ${node.getLength()}`);
        }
        return [node, pos];
    }
    /**
     * Find the index of the given node in BST.
     * @param node the given node
     * @return the index of given node
     */
    indexOf(node) {
        if (!node) {
            return -1;
        }
        let index = 0;
        let current = node;
        let prev = null;
        while (current) {
            if (!prev || prev === current.getRight()) {
                index +=
                    current.getLength() +
                        (current.hasLeft() ? current.getLeftWeight() : 0);
            }
            prev = current;
            current = current.getParent();
        }
        return index - node.getLength();
    }
    getRoot() {
        return this.root;
    }
    insert(newNode) {
        return this.insertAfter(this.root, newNode);
    }
    insertAfter(target, newNode) {
        if (!target) {
            this.root = newNode;
            return newNode;
        }
        this.splayNode(target);
        this.root = newNode;
        newNode.setRight(target.getRight());
        if (target.hasRight()) {
            target.getRight().setParent(newNode);
        }
        newNode.setLeft(target);
        target.setParent(newNode);
        target.setRight(null);
        this.updateSubtree(target);
        this.updateSubtree(newNode);
        return newNode;
    }
    updateSubtree(node) {
        node.initWeight();
        if (node.hasLeft()) {
            node.increaseWeight(node.getLeftWeight());
        }
        if (node.hasRight()) {
            node.increaseWeight(node.getRightWeight());
        }
    }
    splayNode(node) {
        if (!node) {
            return;
        }
        for (;;) {
            if (this.isLeftChild(node.getParent()) && this.isRightChild(node)) {
                // zig-zag
                this.rotateLeft(node);
                this.rotateRight(node);
            }
            else if (this.isRightChild(node.getParent()) &&
                this.isLeftChild(node)) {
                // zig-zag
                this.rotateRight(node);
                this.rotateLeft(node);
            }
            else if (this.isLeftChild(node.getParent()) && this.isLeftChild(node)) {
                // zig-zig
                this.rotateRight(node.getParent());
                this.rotateRight(node);
            }
            else if (this.isRightChild(node.getParent()) &&
                this.isRightChild(node)) {
                // zig-zig
                this.rotateLeft(node.getParent());
                this.rotateLeft(node);
            }
            else {
                // zig
                if (this.isLeftChild(node)) {
                    this.rotateRight(node);
                }
                else if (this.isRightChild(node)) {
                    this.rotateLeft(node);
                }
                return;
            }
        }
    }
    delete(node) {
        this.splayNode(node);
        const leftTree = new SplayTree(node.getLeft());
        if (leftTree.root) {
            leftTree.root.setParent(null);
        }
        const rightTree = new SplayTree(node.getRight());
        if (rightTree.root) {
            rightTree.root.setParent(null);
        }
        if (leftTree.root) {
            const maxNode = leftTree.getMaximum();
            leftTree.splayNode(maxNode);
            leftTree.root.setRight(rightTree.root);
            this.root = leftTree.root;
        }
        else {
            this.root = rightTree.root;
        }
    }
    getAnnotatedString() {
        const metaString = [];
        this.traverseInorder(this.root, metaString);
        return metaString.map((node) => `[${node.getWeight()},${node.getLength()}]${node.getValue()}`).join('');
    }
    getMaximum() {
        let node = this.root;
        while (node.hasRight()) {
            node = node.getRight();
        }
        return node;
    }
    traverseInorder(node, stack) {
        if (!node) {
            return;
        }
        this.traverseInorder(node.getLeft(), stack);
        stack.push(node);
        this.traverseInorder(node.getRight(), stack);
    }
    rotateLeft(pivot) {
        const root = pivot.getParent();
        if (root.hasParent()) {
            if (root === root.getParent().getLeft()) {
                root.getParent().setLeft(pivot);
            }
            else {
                root.getParent().setRight(pivot);
            }
        }
        else {
            this.root = pivot;
        }
        pivot.setParent(root.getParent());
        root.setRight(pivot.getLeft());
        if (root.hasRight()) {
            root.getRight().setParent(root);
        }
        pivot.setLeft(root);
        pivot.getLeft().setParent(pivot);
        this.updateSubtree(root);
        this.updateSubtree(pivot);
    }
    rotateRight(pivot) {
        const root = pivot.getParent();
        if (root.hasParent()) {
            if (root === root.getParent().getLeft()) {
                root.getParent().setLeft(pivot);
            }
            else {
                root.getParent().setRight(pivot);
            }
        }
        else {
            this.root = pivot;
        }
        pivot.setParent(root.getParent());
        root.setLeft(pivot.getRight());
        if (root.hasLeft()) {
            root.getLeft().setParent(root);
        }
        pivot.setRight(root);
        pivot.getRight().setParent(pivot);
        this.updateSubtree(root);
        this.updateSubtree(pivot);
    }
    isLeftChild(node) {
        return node && node.hasParent() && node.getParent().getLeft() === node;
    }
    isRightChild(node) {
        return node && node.hasParent() && node.getParent().getRight() === node;
    }
}


/***/ }),

/***/ "./src/util/uuid.ts":
/*!**************************!*\
  !*** ./src/util/uuid.ts ***!
  \**************************/
/*! exports provided: uuid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uuid", function() { return uuid; });
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// http://www.ietf.org/rfc/rfc4122.txt
function uuid() {
    return 'xxxxxxxx-xxxx-4xxxy-xxxx-xxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}


/***/ }),

/***/ "./src/yorkie.ts":
/*!***********************!*\
  !*** ./src/yorkie.ts ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/client */ "./src/core/client.ts");
/* harmony import */ var _document_document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./document/document */ "./src/document/document.ts");
/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// yorkie namespace.
//  e.g) yorkie.createClient(...)
/* harmony default export */ __webpack_exports__["default"] = ({
    createClient: function (rpcAddr, opts) {
        return new _core_client__WEBPACK_IMPORTED_MODULE_1__["Client"](rpcAddr, opts);
    },
    createDocument: function (collection, document) {
        return new _document_document__WEBPACK_IMPORTED_MODULE_2__["Document"](collection, document);
    },
    Long: long__WEBPACK_IMPORTED_MODULE_0___default.a,
});


/***/ })

/******/ })["default"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,