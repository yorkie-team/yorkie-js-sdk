// Generated from antlr/YorkieSchema.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class YorkieSchemaLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly T__11 = 12;
  public static readonly T__12 = 13;
  public static readonly T__13 = 14;
  public static readonly T__14 = 15;
  public static readonly T__15 = 16;
  public static readonly T__16 = 17;
  public static readonly T__17 = 18;
  public static readonly T__18 = 19;
  public static readonly T__19 = 20;
  public static readonly T__20 = 21;
  public static readonly T__21 = 22;
  public static readonly T__22 = 23;
  public static readonly T__23 = 24;
  public static readonly T__24 = 25;
  public static readonly T__25 = 26;
  public static readonly T__26 = 27;
  public static readonly T__27 = 28;
  public static readonly T__28 = 29;
  public static readonly T__29 = 30;
  public static readonly T__30 = 31;
  public static readonly Identifier = 32;
  public static readonly StringLiteral = 33;
  public static readonly NumberLiteral = 34;
  public static readonly BooleanLiteral = 35;
  public static readonly SingleLineComment = 36;
  public static readonly MultiLineComment = 37;
  public static readonly WS = 38;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: Array<string> = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: Array<string> = ['DEFAULT_MODE'];

  public static readonly ruleNames: Array<string> = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'T__26',
    'T__27',
    'T__28',
    'T__29',
    'T__30',
    'Identifier',
    'StringLiteral',
    'NumberLiteral',
    'BooleanLiteral',
    'SingleLineComment',
    'MultiLineComment',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'type'",
    "'='",
    "';'",
    "'let'",
    "':'",
    "'|'",
    "'&'",
    "'['",
    "']'",
    "'Array'",
    "'number'",
    "'string'",
    "'boolean'",
    "'any'",
    "'void'",
    "'null'",
    "'undefined'",
    "'{'",
    "'}'",
    "'?'",
    "'yorkie.Object'",
    "'yorkie.Array'",
    "'yorkie.Counter'",
    "'yorkie.Text'",
    "'yorkie.Tree'",
    "'('",
    "')'",
    "'<'",
    "','",
    "'>'",
    "'extends'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'Identifier',
    'StringLiteral',
    'NumberLiteral',
    'BooleanLiteral',
    'SingleLineComment',
    'MultiLineComment',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    YorkieSchemaLexer._LITERAL_NAMES,
    YorkieSchemaLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return YorkieSchemaLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(YorkieSchemaLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'YorkieSchema.g4';
  }

  // @Override
  public get ruleNames(): Array<string> {
    return YorkieSchemaLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return YorkieSchemaLexer._serializedATN;
  }

  // @Override
  public get channelNames(): Array<string> {
    return YorkieSchemaLexer.channelNames;
  }

  // @Override
  public get modeNames(): Array<string> {
    return YorkieSchemaLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\u013C\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x03\x02\x03\x02\x03\x02\x03" +
    '\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03' +
    '\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03' +
    '\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03' +
    '\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03' +
    '\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03' +
    '\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03' +
    '\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03' +
    '\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03' +
    '\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03' +
    '\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03' +
    '\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03' +
    '\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03' +
    '\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03' +
    '\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03' +
    '!\x03!\x07!\xF7\n!\f!\x0E!\xFA\v!\x03"\x03"\x07"\xFE\n"\f"\x0E"' +
    '\u0101\v"\x03"\x03"\x03#\x06#\u0106\n#\r#\x0E#\u0107\x03#\x03#\x06' +
    '#\u010C\n#\r#\x0E#\u010D\x05#\u0110\n#\x03$\x03$\x03$\x03$\x03$\x03$\x03' +
    '$\x03$\x03$\x05$\u011B\n$\x03%\x03%\x03%\x03%\x07%\u0121\n%\f%\x0E%\u0124' +
    '\v%\x03%\x03%\x03&\x03&\x03&\x03&\x07&\u012C\n&\f&\x0E&\u012F\v&\x03&' +
    "\x03&\x03&\x03&\x03&\x03'\x06'\u0137\n'\r'\x0E'\u0138\x03'\x03'" +
    '\x03\u012D\x02\x02(\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02' +
    '\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02' +
    "\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'" +
    '\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C' +
    '7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02%I\x02' +
    "&K\x02'M\x02(\x03\x02\b\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02\f\f\x0F" +
    '\x0F$$\x03\x022;\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F""\x02\u0144' +
    '\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02' +
    '\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02' +
    '\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02' +
    '\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02' +
    '\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02' +
    "!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03" +
    '\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02' +
    '\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02' +
    '5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02' +
    '\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02' +
    '\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03' +
    '\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x03O\x03\x02\x02' +
    '\x02\x05T\x03\x02\x02\x02\x07V\x03\x02\x02\x02\tX\x03\x02\x02\x02\v\\' +
    '\x03\x02\x02\x02\r^\x03\x02\x02\x02\x0F`\x03\x02\x02\x02\x11b\x03\x02' +
    '\x02\x02\x13d\x03\x02\x02\x02\x15f\x03\x02\x02\x02\x17l\x03\x02\x02\x02' +
    '\x19s\x03\x02\x02\x02\x1Bz\x03\x02\x02\x02\x1D\x82\x03\x02\x02\x02\x1F' +
    '\x86\x03\x02\x02\x02!\x8B\x03\x02\x02\x02#\x90\x03\x02\x02\x02%\x9A\x03' +
    "\x02\x02\x02'\x9C\x03\x02\x02\x02)\x9E\x03\x02\x02\x02+\xA0\x03\x02\x02" +
    '\x02-\xAE\x03\x02\x02\x02/\xBB\x03\x02\x02\x021\xCA\x03\x02\x02\x023\xD6' +
    '\x03\x02\x02\x025\xE2\x03\x02\x02\x027\xE4\x03\x02\x02\x029\xE6\x03\x02' +
    '\x02\x02;\xE8\x03\x02\x02\x02=\xEA\x03\x02\x02\x02?\xEC\x03\x02\x02\x02' +
    'A\xF4\x03\x02\x02\x02C\xFB\x03\x02\x02\x02E\u0105\x03\x02\x02\x02G\u011A' +
    '\x03\x02\x02\x02I\u011C\x03\x02\x02\x02K\u0127\x03\x02\x02\x02M\u0136' +
    '\x03\x02\x02\x02OP\x07v\x02\x02PQ\x07{\x02\x02QR\x07r\x02\x02RS\x07g\x02' +
    '\x02S\x04\x03\x02\x02\x02TU\x07?\x02\x02U\x06\x03\x02\x02\x02VW\x07=\x02' +
    '\x02W\b\x03\x02\x02\x02XY\x07n\x02\x02YZ\x07g\x02\x02Z[\x07v\x02\x02[' +
    '\n\x03\x02\x02\x02\\]\x07<\x02\x02]\f\x03\x02\x02\x02^_\x07~\x02\x02_' +
    '\x0E\x03\x02\x02\x02`a\x07(\x02\x02a\x10\x03\x02\x02\x02bc\x07]\x02\x02' +
    'c\x12\x03\x02\x02\x02de\x07_\x02\x02e\x14\x03\x02\x02\x02fg\x07C\x02\x02' +
    'gh\x07t\x02\x02hi\x07t\x02\x02ij\x07c\x02\x02jk\x07{\x02\x02k\x16\x03' +
    '\x02\x02\x02lm\x07p\x02\x02mn\x07w\x02\x02no\x07o\x02\x02op\x07d\x02\x02' +
    'pq\x07g\x02\x02qr\x07t\x02\x02r\x18\x03\x02\x02\x02st\x07u\x02\x02tu\x07' +
    'v\x02\x02uv\x07t\x02\x02vw\x07k\x02\x02wx\x07p\x02\x02xy\x07i\x02\x02' +
    'y\x1A\x03\x02\x02\x02z{\x07d\x02\x02{|\x07q\x02\x02|}\x07q\x02\x02}~\x07' +
    'n\x02\x02~\x7F\x07g\x02\x02\x7F\x80\x07c\x02\x02\x80\x81\x07p\x02\x02' +
    '\x81\x1C\x03\x02\x02\x02\x82\x83\x07c\x02\x02\x83\x84\x07p\x02\x02\x84' +
    '\x85\x07{\x02\x02\x85\x1E\x03\x02\x02\x02\x86\x87\x07x\x02\x02\x87\x88' +
    '\x07q\x02\x02\x88\x89\x07k\x02\x02\x89\x8A\x07f\x02\x02\x8A \x03\x02\x02' +
    '\x02\x8B\x8C\x07p\x02\x02\x8C\x8D\x07w\x02\x02\x8D\x8E\x07n\x02\x02\x8E' +
    '\x8F\x07n\x02\x02\x8F"\x03\x02\x02\x02\x90\x91\x07w\x02\x02\x91\x92\x07' +
    'p\x02\x02\x92\x93\x07f\x02\x02\x93\x94\x07g\x02\x02\x94\x95\x07h\x02\x02' +
    '\x95\x96\x07k\x02\x02\x96\x97\x07p\x02\x02\x97\x98\x07g\x02\x02\x98\x99' +
    '\x07f\x02\x02\x99$\x03\x02\x02\x02\x9A\x9B\x07}\x02\x02\x9B&\x03\x02\x02' +
    '\x02\x9C\x9D\x07\x7F\x02\x02\x9D(\x03\x02\x02\x02\x9E\x9F\x07A\x02\x02' +
    '\x9F*\x03\x02\x02\x02\xA0\xA1\x07{\x02\x02\xA1\xA2\x07q\x02\x02\xA2\xA3' +
    '\x07t\x02\x02\xA3\xA4\x07m\x02\x02\xA4\xA5\x07k\x02\x02\xA5\xA6\x07g\x02' +
    '\x02\xA6\xA7\x070\x02\x02\xA7\xA8\x07Q\x02\x02\xA8\xA9\x07d\x02\x02\xA9' +
    '\xAA\x07l\x02\x02\xAA\xAB\x07g\x02\x02\xAB\xAC\x07e\x02\x02\xAC\xAD\x07' +
    'v\x02\x02\xAD,\x03\x02\x02\x02\xAE\xAF\x07{\x02\x02\xAF\xB0\x07q\x02\x02' +
    '\xB0\xB1\x07t\x02\x02\xB1\xB2\x07m\x02\x02\xB2\xB3\x07k\x02\x02\xB3\xB4' +
    '\x07g\x02\x02\xB4\xB5\x070\x02\x02\xB5\xB6\x07C\x02\x02\xB6\xB7\x07t\x02' +
    '\x02\xB7\xB8\x07t\x02\x02\xB8\xB9\x07c\x02\x02\xB9\xBA\x07{\x02\x02\xBA' +
    '.\x03\x02\x02\x02\xBB\xBC\x07{\x02\x02\xBC\xBD\x07q\x02\x02\xBD\xBE\x07' +
    't\x02\x02\xBE\xBF\x07m\x02\x02\xBF\xC0\x07k\x02\x02\xC0\xC1\x07g\x02\x02' +
    '\xC1\xC2\x070\x02\x02\xC2\xC3\x07E\x02\x02\xC3\xC4\x07q\x02\x02\xC4\xC5' +
    '\x07w\x02\x02\xC5\xC6\x07p\x02\x02\xC6\xC7\x07v\x02\x02\xC7\xC8\x07g\x02' +
    '\x02\xC8\xC9\x07t\x02\x02\xC90\x03\x02\x02\x02\xCA\xCB\x07{\x02\x02\xCB' +
    '\xCC\x07q\x02\x02\xCC\xCD\x07t\x02\x02\xCD\xCE\x07m\x02\x02\xCE\xCF\x07' +
    'k\x02\x02\xCF\xD0\x07g\x02\x02\xD0\xD1\x070\x02\x02\xD1\xD2\x07V\x02\x02' +
    '\xD2\xD3\x07g\x02\x02\xD3\xD4\x07z\x02\x02\xD4\xD5\x07v\x02\x02\xD52\x03' +
    '\x02\x02\x02\xD6\xD7\x07{\x02\x02\xD7\xD8\x07q\x02\x02\xD8\xD9\x07t\x02' +
    '\x02\xD9\xDA\x07m\x02\x02\xDA\xDB\x07k\x02\x02\xDB\xDC\x07g\x02\x02\xDC' +
    '\xDD\x070\x02\x02\xDD\xDE\x07V\x02\x02\xDE\xDF\x07t\x02\x02\xDF\xE0\x07' +
    'g\x02\x02\xE0\xE1\x07g\x02\x02\xE14\x03\x02\x02\x02\xE2\xE3\x07*\x02\x02' +
    '\xE36\x03\x02\x02\x02\xE4\xE5\x07+\x02\x02\xE58\x03\x02\x02\x02\xE6\xE7' +
    '\x07>\x02\x02\xE7:\x03\x02\x02\x02\xE8\xE9\x07.\x02\x02\xE9<\x03\x02\x02' +
    '\x02\xEA\xEB\x07@\x02\x02\xEB>\x03\x02\x02\x02\xEC\xED\x07g\x02\x02\xED' +
    '\xEE\x07z\x02\x02\xEE\xEF\x07v\x02\x02\xEF\xF0\x07g\x02\x02\xF0\xF1\x07' +
    'p\x02\x02\xF1\xF2\x07f\x02\x02\xF2\xF3\x07u\x02\x02\xF3@\x03\x02\x02\x02' +
    '\xF4\xF8\t\x02\x02\x02\xF5\xF7\t\x03\x02\x02\xF6\xF5\x03\x02\x02\x02\xF7' +
    '\xFA\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9\x03\x02\x02\x02\xF9' +
    'B\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFB\xFF\x07$\x02\x02\xFC\xFE' +
    '\n\x04\x02\x02\xFD\xFC\x03\x02\x02\x02\xFE\u0101\x03\x02\x02\x02\xFF\xFD' +
    '\x03\x02\x02\x02\xFF\u0100\x03\x02\x02\x02\u0100\u0102\x03\x02\x02\x02' +
    '\u0101\xFF\x03\x02\x02\x02\u0102\u0103\x07$\x02\x02\u0103D\x03\x02\x02' +
    '\x02\u0104\u0106\t\x05\x02\x02\u0105\u0104\x03\x02\x02\x02\u0106\u0107' +
    '\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02' +
    '\u0108\u010F\x03\x02\x02\x02\u0109\u010B\x070\x02\x02\u010A\u010C\t\x05' +
    '\x02\x02\u010B\u010A\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D' +
    '\u010B\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010E\u0110\x03\x02' +
    '\x02\x02\u010F\u0109\x03\x02\x02\x02\u010F\u0110\x03\x02\x02\x02\u0110' +
    'F\x03\x02\x02\x02\u0111\u0112\x07v\x02\x02\u0112\u0113\x07t\x02\x02\u0113' +
    '\u0114\x07w\x02\x02\u0114\u011B\x07g\x02\x02\u0115\u0116\x07h\x02\x02' +
    '\u0116\u0117\x07c\x02\x02\u0117\u0118\x07n\x02\x02\u0118\u0119\x07u\x02' +
    '\x02\u0119\u011B\x07g\x02\x02\u011A\u0111\x03\x02\x02\x02\u011A\u0115' +
    '\x03\x02\x02\x02\u011BH\x03\x02\x02\x02\u011C\u011D\x071\x02\x02\u011D' +
    '\u011E\x071\x02\x02\u011E\u0122\x03\x02\x02\x02\u011F\u0121\n\x06\x02' +
    '\x02\u0120\u011F\x03\x02\x02\x02\u0121\u0124\x03\x02\x02\x02\u0122\u0120' +
    '\x03\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123\u0125\x03\x02\x02\x02' +
    '\u0124\u0122\x03\x02\x02\x02\u0125\u0126\b%\x02\x02\u0126J\x03\x02\x02' +
    '\x02\u0127\u0128\x071\x02\x02\u0128\u0129\x07,\x02\x02\u0129\u012D\x03' +
    '\x02\x02\x02\u012A\u012C\v\x02\x02\x02\u012B\u012A\x03\x02\x02\x02\u012C' +
    '\u012F\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012D\u012B\x03\x02' +
    '\x02\x02\u012E\u0130\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02\u0130' +
    '\u0131\x07,\x02\x02\u0131\u0132\x071\x02\x02\u0132\u0133\x03\x02\x02\x02' +
    '\u0133\u0134\b&\x02\x02\u0134L\x03\x02\x02\x02\u0135\u0137\t\x07\x02\x02' +
    '\u0136\u0135\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138\u0136\x03' +
    '\x02\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139\u013A\x03\x02\x02\x02\u013A' +
    "\u013B\b'\x03\x02\u013BN\x03\x02\x02\x02\f\x02\xF8\xFF\u0107\u010D\u010F" +
    '\u011A\u0122\u012D\u0138\x04\x02\x03\x02\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!YorkieSchemaLexer.__ATN) {
      YorkieSchemaLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(YorkieSchemaLexer._serializedATN),
      );
    }

    return YorkieSchemaLexer.__ATN;
  }
}
