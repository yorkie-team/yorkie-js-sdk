//
// Copyright 2020 The Yorkie Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file src/api/yorkie/v1/yorkie.proto (package yorkie.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChangePack, DocEvent } from "./resources_pb";

/**
 * @generated from message yorkie.v1.ActivateClientRequest
 */
export class ActivateClientRequest extends Message<ActivateClientRequest> {
  /**
   * @generated from field: string client_key = 1;
   */
  clientKey = "";

  constructor(data?: PartialMessage<ActivateClientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.ActivateClientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateClientRequest {
    return new ActivateClientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateClientRequest {
    return new ActivateClientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateClientRequest {
    return new ActivateClientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateClientRequest | PlainMessage<ActivateClientRequest> | undefined, b: ActivateClientRequest | PlainMessage<ActivateClientRequest> | undefined): boolean {
    return proto3.util.equals(ActivateClientRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.ActivateClientResponse
 */
export class ActivateClientResponse extends Message<ActivateClientResponse> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  constructor(data?: PartialMessage<ActivateClientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.ActivateClientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateClientResponse {
    return new ActivateClientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateClientResponse {
    return new ActivateClientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateClientResponse {
    return new ActivateClientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateClientResponse | PlainMessage<ActivateClientResponse> | undefined, b: ActivateClientResponse | PlainMessage<ActivateClientResponse> | undefined): boolean {
    return proto3.util.equals(ActivateClientResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DeactivateClientRequest
 */
export class DeactivateClientRequest extends Message<DeactivateClientRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  constructor(data?: PartialMessage<DeactivateClientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DeactivateClientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateClientRequest {
    return new DeactivateClientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateClientRequest {
    return new DeactivateClientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateClientRequest {
    return new DeactivateClientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateClientRequest | PlainMessage<DeactivateClientRequest> | undefined, b: DeactivateClientRequest | PlainMessage<DeactivateClientRequest> | undefined): boolean {
    return proto3.util.equals(DeactivateClientRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DeactivateClientResponse
 */
export class DeactivateClientResponse extends Message<DeactivateClientResponse> {
  constructor(data?: PartialMessage<DeactivateClientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DeactivateClientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateClientResponse {
    return new DeactivateClientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateClientResponse {
    return new DeactivateClientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateClientResponse {
    return new DeactivateClientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateClientResponse | PlainMessage<DeactivateClientResponse> | undefined, b: DeactivateClientResponse | PlainMessage<DeactivateClientResponse> | undefined): boolean {
    return proto3.util.equals(DeactivateClientResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.AttachDocumentRequest
 */
export class AttachDocumentRequest extends Message<AttachDocumentRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 2;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<AttachDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.AttachDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachDocumentRequest {
    return new AttachDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachDocumentRequest {
    return new AttachDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachDocumentRequest {
    return new AttachDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AttachDocumentRequest | PlainMessage<AttachDocumentRequest> | undefined, b: AttachDocumentRequest | PlainMessage<AttachDocumentRequest> | undefined): boolean {
    return proto3.util.equals(AttachDocumentRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.AttachDocumentResponse
 */
export class AttachDocumentResponse extends Message<AttachDocumentResponse> {
  /**
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 2;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<AttachDocumentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.AttachDocumentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachDocumentResponse {
    return new AttachDocumentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachDocumentResponse {
    return new AttachDocumentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachDocumentResponse {
    return new AttachDocumentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AttachDocumentResponse | PlainMessage<AttachDocumentResponse> | undefined, b: AttachDocumentResponse | PlainMessage<AttachDocumentResponse> | undefined): boolean {
    return proto3.util.equals(AttachDocumentResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DetachDocumentRequest
 */
export class DetachDocumentRequest extends Message<DetachDocumentRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 3;
   */
  changePack?: ChangePack;

  /**
   * @generated from field: bool remove_if_not_attached = 4;
   */
  removeIfNotAttached = false;

  constructor(data?: PartialMessage<DetachDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DetachDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "change_pack", kind: "message", T: ChangePack },
    { no: 4, name: "remove_if_not_attached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetachDocumentRequest {
    return new DetachDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetachDocumentRequest {
    return new DetachDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetachDocumentRequest {
    return new DetachDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DetachDocumentRequest | PlainMessage<DetachDocumentRequest> | undefined, b: DetachDocumentRequest | PlainMessage<DetachDocumentRequest> | undefined): boolean {
    return proto3.util.equals(DetachDocumentRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DetachDocumentResponse
 */
export class DetachDocumentResponse extends Message<DetachDocumentResponse> {
  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 2;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<DetachDocumentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DetachDocumentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetachDocumentResponse {
    return new DetachDocumentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetachDocumentResponse {
    return new DetachDocumentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetachDocumentResponse {
    return new DetachDocumentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DetachDocumentResponse | PlainMessage<DetachDocumentResponse> | undefined, b: DetachDocumentResponse | PlainMessage<DetachDocumentResponse> | undefined): boolean {
    return proto3.util.equals(DetachDocumentResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.WatchDocumentRequest
 */
export class WatchDocumentRequest extends Message<WatchDocumentRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  constructor(data?: PartialMessage<WatchDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.WatchDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchDocumentRequest {
    return new WatchDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchDocumentRequest {
    return new WatchDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchDocumentRequest {
    return new WatchDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchDocumentRequest | PlainMessage<WatchDocumentRequest> | undefined, b: WatchDocumentRequest | PlainMessage<WatchDocumentRequest> | undefined): boolean {
    return proto3.util.equals(WatchDocumentRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.WatchDocumentResponse
 */
export class WatchDocumentResponse extends Message<WatchDocumentResponse> {
  /**
   * @generated from oneof yorkie.v1.WatchDocumentResponse.body
   */
  body: {
    /**
     * @generated from field: yorkie.v1.WatchDocumentResponse.Initialization initialization = 1;
     */
    value: WatchDocumentResponse_Initialization;
    case: "initialization";
  } | {
    /**
     * @generated from field: yorkie.v1.DocEvent event = 2;
     */
    value: DocEvent;
    case: "event";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WatchDocumentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.WatchDocumentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initialization", kind: "message", T: WatchDocumentResponse_Initialization, oneof: "body" },
    { no: 2, name: "event", kind: "message", T: DocEvent, oneof: "body" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchDocumentResponse {
    return new WatchDocumentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchDocumentResponse {
    return new WatchDocumentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchDocumentResponse {
    return new WatchDocumentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchDocumentResponse | PlainMessage<WatchDocumentResponse> | undefined, b: WatchDocumentResponse | PlainMessage<WatchDocumentResponse> | undefined): boolean {
    return proto3.util.equals(WatchDocumentResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.WatchDocumentResponse.Initialization
 */
export class WatchDocumentResponse_Initialization extends Message<WatchDocumentResponse_Initialization> {
  /**
   * @generated from field: repeated string client_ids = 1;
   */
  clientIds: string[] = [];

  constructor(data?: PartialMessage<WatchDocumentResponse_Initialization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.WatchDocumentResponse.Initialization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchDocumentResponse_Initialization {
    return new WatchDocumentResponse_Initialization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchDocumentResponse_Initialization {
    return new WatchDocumentResponse_Initialization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchDocumentResponse_Initialization {
    return new WatchDocumentResponse_Initialization().fromJsonString(jsonString, options);
  }

  static equals(a: WatchDocumentResponse_Initialization | PlainMessage<WatchDocumentResponse_Initialization> | undefined, b: WatchDocumentResponse_Initialization | PlainMessage<WatchDocumentResponse_Initialization> | undefined): boolean {
    return proto3.util.equals(WatchDocumentResponse_Initialization, a, b);
  }
}

/**
 * @generated from message yorkie.v1.RemoveDocumentRequest
 */
export class RemoveDocumentRequest extends Message<RemoveDocumentRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 3;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<RemoveDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.RemoveDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDocumentRequest {
    return new RemoveDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDocumentRequest {
    return new RemoveDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDocumentRequest {
    return new RemoveDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveDocumentRequest | PlainMessage<RemoveDocumentRequest> | undefined, b: RemoveDocumentRequest | PlainMessage<RemoveDocumentRequest> | undefined): boolean {
    return proto3.util.equals(RemoveDocumentRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.RemoveDocumentResponse
 */
export class RemoveDocumentResponse extends Message<RemoveDocumentResponse> {
  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 1;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<RemoveDocumentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.RemoveDocumentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDocumentResponse {
    return new RemoveDocumentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDocumentResponse {
    return new RemoveDocumentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDocumentResponse {
    return new RemoveDocumentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveDocumentResponse | PlainMessage<RemoveDocumentResponse> | undefined, b: RemoveDocumentResponse | PlainMessage<RemoveDocumentResponse> | undefined): boolean {
    return proto3.util.equals(RemoveDocumentResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.PushPullChangesRequest
 */
export class PushPullChangesRequest extends Message<PushPullChangesRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 3;
   */
  changePack?: ChangePack;

  /**
   * @generated from field: bool push_only = 4;
   */
  pushOnly = false;

  constructor(data?: PartialMessage<PushPullChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.PushPullChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "change_pack", kind: "message", T: ChangePack },
    { no: 4, name: "push_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullChangesRequest {
    return new PushPullChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullChangesRequest {
    return new PushPullChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullChangesRequest {
    return new PushPullChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PushPullChangesRequest | PlainMessage<PushPullChangesRequest> | undefined, b: PushPullChangesRequest | PlainMessage<PushPullChangesRequest> | undefined): boolean {
    return proto3.util.equals(PushPullChangesRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.PushPullChangesResponse
 */
export class PushPullChangesResponse extends Message<PushPullChangesResponse> {
  /**
   * @generated from field: yorkie.v1.ChangePack change_pack = 1;
   */
  changePack?: ChangePack;

  constructor(data?: PartialMessage<PushPullChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.PushPullChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change_pack", kind: "message", T: ChangePack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullChangesResponse {
    return new PushPullChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullChangesResponse {
    return new PushPullChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullChangesResponse {
    return new PushPullChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PushPullChangesResponse | PlainMessage<PushPullChangesResponse> | undefined, b: PushPullChangesResponse | PlainMessage<PushPullChangesResponse> | undefined): boolean {
    return proto3.util.equals(PushPullChangesResponse, a, b);
  }
}

/**
 * @generated from message yorkie.v1.BroadcastRequest
 */
export class BroadcastRequest extends Message<BroadcastRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  /**
   * @generated from field: string topic = 3;
   */
  topic = "";

  /**
   * @generated from field: bytes payload = 4;
   */
  payload = new Uint8Array(0);

  constructor(data?: PartialMessage<BroadcastRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.BroadcastRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastRequest {
    return new BroadcastRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastRequest {
    return new BroadcastRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastRequest {
    return new BroadcastRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastRequest | PlainMessage<BroadcastRequest> | undefined, b: BroadcastRequest | PlainMessage<BroadcastRequest> | undefined): boolean {
    return proto3.util.equals(BroadcastRequest, a, b);
  }
}

/**
 * @generated from message yorkie.v1.BroadcastResponse
 */
export class BroadcastResponse extends Message<BroadcastResponse> {
  constructor(data?: PartialMessage<BroadcastResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.BroadcastResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastResponse {
    return new BroadcastResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastResponse {
    return new BroadcastResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastResponse {
    return new BroadcastResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastResponse | PlainMessage<BroadcastResponse> | undefined, b: BroadcastResponse | PlainMessage<BroadcastResponse> | undefined): boolean {
    return proto3.util.equals(BroadcastResponse, a, b);
  }
}

