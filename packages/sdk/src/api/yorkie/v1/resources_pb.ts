//
// Copyright 2022 The Yorkie Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file src/api/yorkie/v1/resources.proto (package yorkie.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum yorkie.v1.ValueType
 */
export enum ValueType {
  /**
   * @generated from enum value: VALUE_TYPE_NULL = 0;
   */
  NULL = 0,

  /**
   * @generated from enum value: VALUE_TYPE_BOOLEAN = 1;
   */
  BOOLEAN = 1,

  /**
   * @generated from enum value: VALUE_TYPE_INTEGER = 2;
   */
  INTEGER = 2,

  /**
   * @generated from enum value: VALUE_TYPE_LONG = 3;
   */
  LONG = 3,

  /**
   * @generated from enum value: VALUE_TYPE_DOUBLE = 4;
   */
  DOUBLE = 4,

  /**
   * @generated from enum value: VALUE_TYPE_STRING = 5;
   */
  STRING = 5,

  /**
   * @generated from enum value: VALUE_TYPE_BYTES = 6;
   */
  BYTES = 6,

  /**
   * @generated from enum value: VALUE_TYPE_DATE = 7;
   */
  DATE = 7,

  /**
   * @generated from enum value: VALUE_TYPE_JSON_OBJECT = 8;
   */
  JSON_OBJECT = 8,

  /**
   * @generated from enum value: VALUE_TYPE_JSON_ARRAY = 9;
   */
  JSON_ARRAY = 9,

  /**
   * @generated from enum value: VALUE_TYPE_TEXT = 10;
   */
  TEXT = 10,

  /**
   * @generated from enum value: VALUE_TYPE_INTEGER_CNT = 11;
   */
  INTEGER_CNT = 11,

  /**
   * @generated from enum value: VALUE_TYPE_LONG_CNT = 12;
   */
  LONG_CNT = 12,

  /**
   * @generated from enum value: VALUE_TYPE_TREE = 13;
   */
  TREE = 13,
}
// Retrieve enum metadata with: proto3.getEnumType(ValueType)
proto3.util.setEnumType(ValueType, "yorkie.v1.ValueType", [
  { no: 0, name: "VALUE_TYPE_NULL" },
  { no: 1, name: "VALUE_TYPE_BOOLEAN" },
  { no: 2, name: "VALUE_TYPE_INTEGER" },
  { no: 3, name: "VALUE_TYPE_LONG" },
  { no: 4, name: "VALUE_TYPE_DOUBLE" },
  { no: 5, name: "VALUE_TYPE_STRING" },
  { no: 6, name: "VALUE_TYPE_BYTES" },
  { no: 7, name: "VALUE_TYPE_DATE" },
  { no: 8, name: "VALUE_TYPE_JSON_OBJECT" },
  { no: 9, name: "VALUE_TYPE_JSON_ARRAY" },
  { no: 10, name: "VALUE_TYPE_TEXT" },
  { no: 11, name: "VALUE_TYPE_INTEGER_CNT" },
  { no: 12, name: "VALUE_TYPE_LONG_CNT" },
  { no: 13, name: "VALUE_TYPE_TREE" },
]);

/**
 * @generated from enum yorkie.v1.DocEventType
 */
export enum DocEventType {
  /**
   * @generated from enum value: DOC_EVENT_TYPE_DOCUMENT_CHANGED = 0;
   */
  DOCUMENT_CHANGED = 0,

  /**
   * @generated from enum value: DOC_EVENT_TYPE_DOCUMENT_WATCHED = 1;
   */
  DOCUMENT_WATCHED = 1,

  /**
   * @generated from enum value: DOC_EVENT_TYPE_DOCUMENT_UNWATCHED = 2;
   */
  DOCUMENT_UNWATCHED = 2,

  /**
   * @generated from enum value: DOC_EVENT_TYPE_DOCUMENT_BROADCAST = 3;
   */
  DOCUMENT_BROADCAST = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DocEventType)
proto3.util.setEnumType(DocEventType, "yorkie.v1.DocEventType", [
  { no: 0, name: "DOC_EVENT_TYPE_DOCUMENT_CHANGED" },
  { no: 1, name: "DOC_EVENT_TYPE_DOCUMENT_WATCHED" },
  { no: 2, name: "DOC_EVENT_TYPE_DOCUMENT_UNWATCHED" },
  { no: 3, name: "DOC_EVENT_TYPE_DOCUMENT_BROADCAST" },
]);

/**
 * ///////////////////////////////////////
 * Messages for Snapshot               //
 * ///////////////////////////////////////
 *
 * @generated from message yorkie.v1.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * @generated from field: yorkie.v1.JSONElement root = 1;
   */
  root?: JSONElement;

  /**
   * @generated from field: map<string, yorkie.v1.Presence> presences = 2;
   */
  presences: { [key: string]: Presence } = {};

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root", kind: "message", T: JSONElement },
    { no: 2, name: "presences", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Presence} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot | PlainMessage<Snapshot> | undefined, b: Snapshot | PlainMessage<Snapshot> | undefined): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}

/**
 * ChangePack is a message that contains all changes that occurred in a document.
 * It is used to synchronize changes between clients and servers.
 *
 * @generated from message yorkie.v1.ChangePack
 */
export class ChangePack extends Message<ChangePack> {
  /**
   * @generated from field: string document_key = 1;
   */
  documentKey = "";

  /**
   * @generated from field: yorkie.v1.Checkpoint checkpoint = 2;
   */
  checkpoint?: Checkpoint;

  /**
   * @generated from field: bytes snapshot = 3;
   */
  snapshot = new Uint8Array(0);

  /**
   * @generated from field: repeated yorkie.v1.Change changes = 4;
   */
  changes: Change[] = [];

  /**
   * @generated from field: yorkie.v1.TimeTicket min_synced_ticket = 5;
   */
  minSyncedTicket?: TimeTicket;

  /**
   * @generated from field: bool is_removed = 6;
   */
  isRemoved = false;

  /**
   * @generated from field: yorkie.v1.VersionVector version_vector = 7;
   */
  versionVector?: VersionVector;

  constructor(data?: PartialMessage<ChangePack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.ChangePack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "checkpoint", kind: "message", T: Checkpoint },
    { no: 3, name: "snapshot", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 5, name: "min_synced_ticket", kind: "message", T: TimeTicket },
    { no: 6, name: "is_removed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "version_vector", kind: "message", T: VersionVector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePack {
    return new ChangePack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePack {
    return new ChangePack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePack {
    return new ChangePack().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePack | PlainMessage<ChangePack> | undefined, b: ChangePack | PlainMessage<ChangePack> | undefined): boolean {
    return proto3.util.equals(ChangePack, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Change
 */
export class Change extends Message<Change> {
  /**
   * @generated from field: yorkie.v1.ChangeID id = 1;
   */
  id?: ChangeID;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated yorkie.v1.Operation operations = 3;
   */
  operations: Operation[] = [];

  /**
   * @generated from field: yorkie.v1.PresenceChange presence_change = 4;
   */
  presenceChange?: PresenceChange;

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: ChangeID },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operations", kind: "message", T: Operation, repeated: true },
    { no: 4, name: "presence_change", kind: "message", T: PresenceChange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * @generated from message yorkie.v1.ChangeID
 */
export class ChangeID extends Message<ChangeID> {
  /**
   * @generated from field: uint32 client_seq = 1;
   */
  clientSeq = 0;

  /**
   * @generated from field: int64 server_seq = 2;
   */
  serverSeq = protoInt64.zero;

  /**
   * @generated from field: int64 lamport = 3;
   */
  lamport = protoInt64.zero;

  /**
   * @generated from field: bytes actor_id = 4;
   */
  actorId = new Uint8Array(0);

  /**
   * @generated from field: yorkie.v1.VersionVector version_vector = 5;
   */
  versionVector?: VersionVector;

  constructor(data?: PartialMessage<ChangeID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.ChangeID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_seq", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "server_seq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lamport", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "actor_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "version_vector", kind: "message", T: VersionVector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeID {
    return new ChangeID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeID {
    return new ChangeID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeID {
    return new ChangeID().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeID | PlainMessage<ChangeID> | undefined, b: ChangeID | PlainMessage<ChangeID> | undefined): boolean {
    return proto3.util.equals(ChangeID, a, b);
  }
}

/**
 * @generated from message yorkie.v1.VersionVector
 */
export class VersionVector extends Message<VersionVector> {
  /**
   * @generated from field: map<string, int64> vector = 1;
   */
  vector: { [key: string]: bigint } = {};

  constructor(data?: PartialMessage<VersionVector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.VersionVector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionVector {
    return new VersionVector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionVector {
    return new VersionVector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionVector {
    return new VersionVector().fromJsonString(jsonString, options);
  }

  static equals(a: VersionVector | PlainMessage<VersionVector> | undefined, b: VersionVector | PlainMessage<VersionVector> | undefined): boolean {
    return proto3.util.equals(VersionVector, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * @generated from oneof yorkie.v1.Operation.body
   */
  body: {
    /**
     * @generated from field: yorkie.v1.Operation.Set set = 1;
     */
    value: Operation_Set;
    case: "set";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Add add = 2;
     */
    value: Operation_Add;
    case: "add";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Move move = 3;
     */
    value: Operation_Move;
    case: "move";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Remove remove = 4;
     */
    value: Operation_Remove;
    case: "remove";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Edit edit = 5;
     */
    value: Operation_Edit;
    case: "edit";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Select select = 6;
     */
    value: Operation_Select;
    case: "select";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Style style = 7;
     */
    value: Operation_Style;
    case: "style";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.Increase increase = 8;
     */
    value: Operation_Increase;
    case: "increase";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.TreeEdit tree_edit = 9;
     */
    value: Operation_TreeEdit;
    case: "treeEdit";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.TreeStyle tree_style = 10;
     */
    value: Operation_TreeStyle;
    case: "treeStyle";
  } | {
    /**
     * @generated from field: yorkie.v1.Operation.ArraySet array_set = 11;
     */
    value: Operation_ArraySet;
    case: "arraySet";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set", kind: "message", T: Operation_Set, oneof: "body" },
    { no: 2, name: "add", kind: "message", T: Operation_Add, oneof: "body" },
    { no: 3, name: "move", kind: "message", T: Operation_Move, oneof: "body" },
    { no: 4, name: "remove", kind: "message", T: Operation_Remove, oneof: "body" },
    { no: 5, name: "edit", kind: "message", T: Operation_Edit, oneof: "body" },
    { no: 6, name: "select", kind: "message", T: Operation_Select, oneof: "body" },
    { no: 7, name: "style", kind: "message", T: Operation_Style, oneof: "body" },
    { no: 8, name: "increase", kind: "message", T: Operation_Increase, oneof: "body" },
    { no: 9, name: "tree_edit", kind: "message", T: Operation_TreeEdit, oneof: "body" },
    { no: 10, name: "tree_style", kind: "message", T: Operation_TreeStyle, oneof: "body" },
    { no: 11, name: "array_set", kind: "message", T: Operation_ArraySet, oneof: "body" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Set
 */
export class Operation_Set extends Message<Operation_Set> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: yorkie.v1.JSONElementSimple value = 3;
   */
  value?: JSONElementSimple;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 4;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Set>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Set";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "message", T: JSONElementSimple },
    { no: 4, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Set {
    return new Operation_Set().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Set {
    return new Operation_Set().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Set {
    return new Operation_Set().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Set | PlainMessage<Operation_Set> | undefined, b: Operation_Set | PlainMessage<Operation_Set> | undefined): boolean {
    return proto3.util.equals(Operation_Set, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Add
 */
export class Operation_Add extends Message<Operation_Add> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket prev_created_at = 2;
   */
  prevCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.JSONElementSimple value = 3;
   */
  value?: JSONElementSimple;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 4;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Add>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Add";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "prev_created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "value", kind: "message", T: JSONElementSimple },
    { no: 4, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Add {
    return new Operation_Add().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Add {
    return new Operation_Add().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Add {
    return new Operation_Add().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Add | PlainMessage<Operation_Add> | undefined, b: Operation_Add | PlainMessage<Operation_Add> | undefined): boolean {
    return proto3.util.equals(Operation_Add, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Move
 */
export class Operation_Move extends Message<Operation_Move> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket prev_created_at = 2;
   */
  prevCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 3;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 4;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Move>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Move";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "prev_created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "created_at", kind: "message", T: TimeTicket },
    { no: 4, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Move {
    return new Operation_Move().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Move {
    return new Operation_Move().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Move {
    return new Operation_Move().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Move | PlainMessage<Operation_Move> | undefined, b: Operation_Move | PlainMessage<Operation_Move> | undefined): boolean {
    return proto3.util.equals(Operation_Move, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Remove
 */
export class Operation_Remove extends Message<Operation_Remove> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 3;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Remove>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Remove";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Remove {
    return new Operation_Remove().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Remove {
    return new Operation_Remove().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Remove {
    return new Operation_Remove().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Remove | PlainMessage<Operation_Remove> | undefined, b: Operation_Remove | PlainMessage<Operation_Remove> | undefined): boolean {
    return proto3.util.equals(Operation_Remove, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Edit
 */
export class Operation_Edit extends Message<Operation_Edit> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TextNodePos from = 2;
   */
  from?: TextNodePos;

  /**
   * @generated from field: yorkie.v1.TextNodePos to = 3;
   */
  to?: TextNodePos;

  /**
   * @generated from field: map<string, yorkie.v1.TimeTicket> created_at_map_by_actor = 4;
   */
  createdAtMapByActor: { [key: string]: TimeTicket } = {};

  /**
   * @generated from field: string content = 5;
   */
  content = "";

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 6;
   */
  executedAt?: TimeTicket;

  /**
   * @generated from field: map<string, string> attributes = 7;
   */
  attributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Operation_Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "from", kind: "message", T: TextNodePos },
    { no: 3, name: "to", kind: "message", T: TextNodePos },
    { no: 4, name: "created_at_map_by_actor", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TimeTicket} },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "executed_at", kind: "message", T: TimeTicket },
    { no: 7, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Edit {
    return new Operation_Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Edit {
    return new Operation_Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Edit {
    return new Operation_Edit().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Edit | PlainMessage<Operation_Edit> | undefined, b: Operation_Edit | PlainMessage<Operation_Edit> | undefined): boolean {
    return proto3.util.equals(Operation_Edit, a, b);
  }
}

/**
 * NOTE(hackerwins): Select Operation is not used in the current version.
 * In the previous version, it was used to represent selection of Text.
 * However, it has been replaced by Presence now. It is retained for backward
 * compatibility purposes.
 *
 * @generated from message yorkie.v1.Operation.Select
 */
export class Operation_Select extends Message<Operation_Select> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TextNodePos from = 2;
   */
  from?: TextNodePos;

  /**
   * @generated from field: yorkie.v1.TextNodePos to = 3;
   */
  to?: TextNodePos;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 4;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Select>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Select";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "from", kind: "message", T: TextNodePos },
    { no: 3, name: "to", kind: "message", T: TextNodePos },
    { no: 4, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Select {
    return new Operation_Select().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Select {
    return new Operation_Select().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Select {
    return new Operation_Select().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Select | PlainMessage<Operation_Select> | undefined, b: Operation_Select | PlainMessage<Operation_Select> | undefined): boolean {
    return proto3.util.equals(Operation_Select, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Style
 */
export class Operation_Style extends Message<Operation_Style> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TextNodePos from = 2;
   */
  from?: TextNodePos;

  /**
   * @generated from field: yorkie.v1.TextNodePos to = 3;
   */
  to?: TextNodePos;

  /**
   * @generated from field: map<string, string> attributes = 4;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 5;
   */
  executedAt?: TimeTicket;

  /**
   * @generated from field: map<string, yorkie.v1.TimeTicket> created_at_map_by_actor = 6;
   */
  createdAtMapByActor: { [key: string]: TimeTicket } = {};

  constructor(data?: PartialMessage<Operation_Style>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Style";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "from", kind: "message", T: TextNodePos },
    { no: 3, name: "to", kind: "message", T: TextNodePos },
    { no: 4, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "executed_at", kind: "message", T: TimeTicket },
    { no: 6, name: "created_at_map_by_actor", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TimeTicket} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Style {
    return new Operation_Style().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Style {
    return new Operation_Style().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Style {
    return new Operation_Style().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Style | PlainMessage<Operation_Style> | undefined, b: Operation_Style | PlainMessage<Operation_Style> | undefined): boolean {
    return proto3.util.equals(Operation_Style, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.Increase
 */
export class Operation_Increase extends Message<Operation_Increase> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.JSONElementSimple value = 2;
   */
  value?: JSONElementSimple;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 3;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_Increase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.Increase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "value", kind: "message", T: JSONElementSimple },
    { no: 3, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_Increase {
    return new Operation_Increase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_Increase {
    return new Operation_Increase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_Increase {
    return new Operation_Increase().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_Increase | PlainMessage<Operation_Increase> | undefined, b: Operation_Increase | PlainMessage<Operation_Increase> | undefined): boolean {
    return proto3.util.equals(Operation_Increase, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.TreeEdit
 */
export class Operation_TreeEdit extends Message<Operation_TreeEdit> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TreePos from = 2;
   */
  from?: TreePos;

  /**
   * @generated from field: yorkie.v1.TreePos to = 3;
   */
  to?: TreePos;

  /**
   * @generated from field: map<string, yorkie.v1.TimeTicket> created_at_map_by_actor = 4;
   */
  createdAtMapByActor: { [key: string]: TimeTicket } = {};

  /**
   * @generated from field: repeated yorkie.v1.TreeNodes contents = 5;
   */
  contents: TreeNodes[] = [];

  /**
   * @generated from field: int32 split_level = 7;
   */
  splitLevel = 0;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 6;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_TreeEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.TreeEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "from", kind: "message", T: TreePos },
    { no: 3, name: "to", kind: "message", T: TreePos },
    { no: 4, name: "created_at_map_by_actor", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TimeTicket} },
    { no: 5, name: "contents", kind: "message", T: TreeNodes, repeated: true },
    { no: 7, name: "split_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_TreeEdit {
    return new Operation_TreeEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_TreeEdit {
    return new Operation_TreeEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_TreeEdit {
    return new Operation_TreeEdit().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_TreeEdit | PlainMessage<Operation_TreeEdit> | undefined, b: Operation_TreeEdit | PlainMessage<Operation_TreeEdit> | undefined): boolean {
    return proto3.util.equals(Operation_TreeEdit, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.TreeStyle
 */
export class Operation_TreeStyle extends Message<Operation_TreeStyle> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TreePos from = 2;
   */
  from?: TreePos;

  /**
   * @generated from field: yorkie.v1.TreePos to = 3;
   */
  to?: TreePos;

  /**
   * @generated from field: map<string, string> attributes = 4;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 5;
   */
  executedAt?: TimeTicket;

  /**
   * @generated from field: repeated string attributes_to_remove = 6;
   */
  attributesToRemove: string[] = [];

  /**
   * @generated from field: map<string, yorkie.v1.TimeTicket> created_at_map_by_actor = 7;
   */
  createdAtMapByActor: { [key: string]: TimeTicket } = {};

  constructor(data?: PartialMessage<Operation_TreeStyle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.TreeStyle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "from", kind: "message", T: TreePos },
    { no: 3, name: "to", kind: "message", T: TreePos },
    { no: 4, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "executed_at", kind: "message", T: TimeTicket },
    { no: 6, name: "attributes_to_remove", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "created_at_map_by_actor", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TimeTicket} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_TreeStyle {
    return new Operation_TreeStyle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_TreeStyle {
    return new Operation_TreeStyle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_TreeStyle {
    return new Operation_TreeStyle().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_TreeStyle | PlainMessage<Operation_TreeStyle> | undefined, b: Operation_TreeStyle | PlainMessage<Operation_TreeStyle> | undefined): boolean {
    return proto3.util.equals(Operation_TreeStyle, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Operation.ArraySet
 */
export class Operation_ArraySet extends Message<Operation_ArraySet> {
  /**
   * @generated from field: yorkie.v1.TimeTicket parent_created_at = 1;
   */
  parentCreatedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.JSONElementSimple value = 3;
   */
  value?: JSONElementSimple;

  /**
   * @generated from field: yorkie.v1.TimeTicket executed_at = 4;
   */
  executedAt?: TimeTicket;

  constructor(data?: PartialMessage<Operation_ArraySet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Operation.ArraySet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "value", kind: "message", T: JSONElementSimple },
    { no: 4, name: "executed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation_ArraySet {
    return new Operation_ArraySet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation_ArraySet {
    return new Operation_ArraySet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation_ArraySet {
    return new Operation_ArraySet().fromJsonString(jsonString, options);
  }

  static equals(a: Operation_ArraySet | PlainMessage<Operation_ArraySet> | undefined, b: Operation_ArraySet | PlainMessage<Operation_ArraySet> | undefined): boolean {
    return proto3.util.equals(Operation_ArraySet, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElementSimple
 */
export class JSONElementSimple extends Message<JSONElementSimple> {
  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 1;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 2;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 3;
   */
  removedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.ValueType type = 4;
   */
  type = ValueType.NULL;

  /**
   * @generated from field: bytes value = 5;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<JSONElementSimple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElementSimple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 3, name: "removed_at", kind: "message", T: TimeTicket },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ValueType) },
    { no: 5, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElementSimple {
    return new JSONElementSimple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElementSimple {
    return new JSONElementSimple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElementSimple {
    return new JSONElementSimple().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElementSimple | PlainMessage<JSONElementSimple> | undefined, b: JSONElementSimple | PlainMessage<JSONElementSimple> | undefined): boolean {
    return proto3.util.equals(JSONElementSimple, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement
 */
export class JSONElement extends Message<JSONElement> {
  /**
   * @generated from oneof yorkie.v1.JSONElement.body
   */
  body: {
    /**
     * @generated from field: yorkie.v1.JSONElement.JSONObject json_object = 1;
     */
    value: JSONElement_JSONObject;
    case: "jsonObject";
  } | {
    /**
     * @generated from field: yorkie.v1.JSONElement.JSONArray json_array = 2;
     */
    value: JSONElement_JSONArray;
    case: "jsonArray";
  } | {
    /**
     * @generated from field: yorkie.v1.JSONElement.Primitive primitive = 3;
     */
    value: JSONElement_Primitive;
    case: "primitive";
  } | {
    /**
     * @generated from field: yorkie.v1.JSONElement.Text text = 5;
     */
    value: JSONElement_Text;
    case: "text";
  } | {
    /**
     * @generated from field: yorkie.v1.JSONElement.Counter counter = 6;
     */
    value: JSONElement_Counter;
    case: "counter";
  } | {
    /**
     * @generated from field: yorkie.v1.JSONElement.Tree tree = 7;
     */
    value: JSONElement_Tree;
    case: "tree";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<JSONElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "json_object", kind: "message", T: JSONElement_JSONObject, oneof: "body" },
    { no: 2, name: "json_array", kind: "message", T: JSONElement_JSONArray, oneof: "body" },
    { no: 3, name: "primitive", kind: "message", T: JSONElement_Primitive, oneof: "body" },
    { no: 5, name: "text", kind: "message", T: JSONElement_Text, oneof: "body" },
    { no: 6, name: "counter", kind: "message", T: JSONElement_Counter, oneof: "body" },
    { no: 7, name: "tree", kind: "message", T: JSONElement_Tree, oneof: "body" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement {
    return new JSONElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement {
    return new JSONElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement {
    return new JSONElement().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement | PlainMessage<JSONElement> | undefined, b: JSONElement | PlainMessage<JSONElement> | undefined): boolean {
    return proto3.util.equals(JSONElement, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.JSONObject
 */
export class JSONElement_JSONObject extends Message<JSONElement_JSONObject> {
  /**
   * @generated from field: repeated yorkie.v1.RHTNode nodes = 1;
   */
  nodes: RHTNode[] = [];

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 3;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 4;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_JSONObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.JSONObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: RHTNode, repeated: true },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 4, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_JSONObject {
    return new JSONElement_JSONObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_JSONObject {
    return new JSONElement_JSONObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_JSONObject {
    return new JSONElement_JSONObject().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_JSONObject | PlainMessage<JSONElement_JSONObject> | undefined, b: JSONElement_JSONObject | PlainMessage<JSONElement_JSONObject> | undefined): boolean {
    return proto3.util.equals(JSONElement_JSONObject, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.JSONArray
 */
export class JSONElement_JSONArray extends Message<JSONElement_JSONArray> {
  /**
   * @generated from field: repeated yorkie.v1.RGANode nodes = 1;
   */
  nodes: RGANode[] = [];

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 3;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 4;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_JSONArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.JSONArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: RGANode, repeated: true },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 4, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_JSONArray {
    return new JSONElement_JSONArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_JSONArray {
    return new JSONElement_JSONArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_JSONArray {
    return new JSONElement_JSONArray().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_JSONArray | PlainMessage<JSONElement_JSONArray> | undefined, b: JSONElement_JSONArray | PlainMessage<JSONElement_JSONArray> | undefined): boolean {
    return proto3.util.equals(JSONElement_JSONArray, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.Primitive
 */
export class JSONElement_Primitive extends Message<JSONElement_Primitive> {
  /**
   * @generated from field: yorkie.v1.ValueType type = 1;
   */
  type = ValueType.NULL;

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 3;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 4;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 5;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_Primitive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.Primitive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ValueType) },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "created_at", kind: "message", T: TimeTicket },
    { no: 4, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 5, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_Primitive {
    return new JSONElement_Primitive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_Primitive {
    return new JSONElement_Primitive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_Primitive {
    return new JSONElement_Primitive().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_Primitive | PlainMessage<JSONElement_Primitive> | undefined, b: JSONElement_Primitive | PlainMessage<JSONElement_Primitive> | undefined): boolean {
    return proto3.util.equals(JSONElement_Primitive, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.Text
 */
export class JSONElement_Text extends Message<JSONElement_Text> {
  /**
   * @generated from field: repeated yorkie.v1.TextNode nodes = 1;
   */
  nodes: TextNode[] = [];

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 3;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 4;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_Text>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.Text";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: TextNode, repeated: true },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 4, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_Text {
    return new JSONElement_Text().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_Text {
    return new JSONElement_Text().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_Text {
    return new JSONElement_Text().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_Text | PlainMessage<JSONElement_Text> | undefined, b: JSONElement_Text | PlainMessage<JSONElement_Text> | undefined): boolean {
    return proto3.util.equals(JSONElement_Text, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.Counter
 */
export class JSONElement_Counter extends Message<JSONElement_Counter> {
  /**
   * @generated from field: yorkie.v1.ValueType type = 1;
   */
  type = ValueType.NULL;

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 3;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 4;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 5;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_Counter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.Counter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ValueType) },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "created_at", kind: "message", T: TimeTicket },
    { no: 4, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 5, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_Counter {
    return new JSONElement_Counter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_Counter {
    return new JSONElement_Counter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_Counter {
    return new JSONElement_Counter().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_Counter | PlainMessage<JSONElement_Counter> | undefined, b: JSONElement_Counter | PlainMessage<JSONElement_Counter> | undefined): boolean {
    return proto3.util.equals(JSONElement_Counter, a, b);
  }
}

/**
 * @generated from message yorkie.v1.JSONElement.Tree
 */
export class JSONElement_Tree extends Message<JSONElement_Tree> {
  /**
   * @generated from field: repeated yorkie.v1.TreeNode nodes = 1;
   */
  nodes: TreeNode[] = [];

  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 2;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket moved_at = 3;
   */
  movedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 4;
   */
  removedAt?: TimeTicket;

  constructor(data?: PartialMessage<JSONElement_Tree>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.JSONElement.Tree";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: TreeNode, repeated: true },
    { no: 2, name: "created_at", kind: "message", T: TimeTicket },
    { no: 3, name: "moved_at", kind: "message", T: TimeTicket },
    { no: 4, name: "removed_at", kind: "message", T: TimeTicket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONElement_Tree {
    return new JSONElement_Tree().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONElement_Tree {
    return new JSONElement_Tree().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONElement_Tree {
    return new JSONElement_Tree().fromJsonString(jsonString, options);
  }

  static equals(a: JSONElement_Tree | PlainMessage<JSONElement_Tree> | undefined, b: JSONElement_Tree | PlainMessage<JSONElement_Tree> | undefined): boolean {
    return proto3.util.equals(JSONElement_Tree, a, b);
  }
}

/**
 * @generated from message yorkie.v1.RHTNode
 */
export class RHTNode extends Message<RHTNode> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: yorkie.v1.JSONElement element = 2;
   */
  element?: JSONElement;

  constructor(data?: PartialMessage<RHTNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.RHTNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "element", kind: "message", T: JSONElement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RHTNode {
    return new RHTNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RHTNode {
    return new RHTNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RHTNode {
    return new RHTNode().fromJsonString(jsonString, options);
  }

  static equals(a: RHTNode | PlainMessage<RHTNode> | undefined, b: RHTNode | PlainMessage<RHTNode> | undefined): boolean {
    return proto3.util.equals(RHTNode, a, b);
  }
}

/**
 * @generated from message yorkie.v1.RGANode
 */
export class RGANode extends Message<RGANode> {
  /**
   * @generated from field: yorkie.v1.RGANode next = 1;
   */
  next?: RGANode;

  /**
   * @generated from field: yorkie.v1.JSONElement element = 2;
   */
  element?: JSONElement;

  constructor(data?: PartialMessage<RGANode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.RGANode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: RGANode },
    { no: 2, name: "element", kind: "message", T: JSONElement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RGANode {
    return new RGANode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RGANode {
    return new RGANode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RGANode {
    return new RGANode().fromJsonString(jsonString, options);
  }

  static equals(a: RGANode | PlainMessage<RGANode> | undefined, b: RGANode | PlainMessage<RGANode> | undefined): boolean {
    return proto3.util.equals(RGANode, a, b);
  }
}

/**
 * @generated from message yorkie.v1.NodeAttr
 */
export class NodeAttr extends Message<NodeAttr> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: yorkie.v1.TimeTicket updated_at = 2;
   */
  updatedAt?: TimeTicket;

  /**
   * @generated from field: bool is_removed = 3;
   */
  isRemoved = false;

  constructor(data?: PartialMessage<NodeAttr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.NodeAttr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_at", kind: "message", T: TimeTicket },
    { no: 3, name: "is_removed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeAttr {
    return new NodeAttr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeAttr {
    return new NodeAttr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeAttr {
    return new NodeAttr().fromJsonString(jsonString, options);
  }

  static equals(a: NodeAttr | PlainMessage<NodeAttr> | undefined, b: NodeAttr | PlainMessage<NodeAttr> | undefined): boolean {
    return proto3.util.equals(NodeAttr, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TextNode
 */
export class TextNode extends Message<TextNode> {
  /**
   * @generated from field: yorkie.v1.TextNodeID id = 1;
   */
  id?: TextNodeID;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 3;
   */
  removedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TextNodeID ins_prev_id = 4;
   */
  insPrevId?: TextNodeID;

  /**
   * @generated from field: map<string, yorkie.v1.NodeAttr> attributes = 5;
   */
  attributes: { [key: string]: NodeAttr } = {};

  constructor(data?: PartialMessage<TextNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TextNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: TextNodeID },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "removed_at", kind: "message", T: TimeTicket },
    { no: 4, name: "ins_prev_id", kind: "message", T: TextNodeID },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeAttr} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextNode {
    return new TextNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextNode {
    return new TextNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextNode {
    return new TextNode().fromJsonString(jsonString, options);
  }

  static equals(a: TextNode | PlainMessage<TextNode> | undefined, b: TextNode | PlainMessage<TextNode> | undefined): boolean {
    return proto3.util.equals(TextNode, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TextNodeID
 */
export class TextNodeID extends Message<TextNodeID> {
  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 1;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<TextNodeID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TextNodeID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextNodeID {
    return new TextNodeID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextNodeID {
    return new TextNodeID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextNodeID {
    return new TextNodeID().fromJsonString(jsonString, options);
  }

  static equals(a: TextNodeID | PlainMessage<TextNodeID> | undefined, b: TextNodeID | PlainMessage<TextNodeID> | undefined): boolean {
    return proto3.util.equals(TextNodeID, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TreeNode
 */
export class TreeNode extends Message<TreeNode> {
  /**
   * @generated from field: yorkie.v1.TreeNodeID id = 1;
   */
  id?: TreeNodeID;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: yorkie.v1.TimeTicket removed_at = 4;
   */
  removedAt?: TimeTicket;

  /**
   * @generated from field: yorkie.v1.TreeNodeID ins_prev_id = 5;
   */
  insPrevId?: TreeNodeID;

  /**
   * @generated from field: yorkie.v1.TreeNodeID ins_next_id = 6;
   */
  insNextId?: TreeNodeID;

  /**
   * @generated from field: int32 depth = 7;
   */
  depth = 0;

  /**
   * @generated from field: map<string, yorkie.v1.NodeAttr> attributes = 8;
   */
  attributes: { [key: string]: NodeAttr } = {};

  constructor(data?: PartialMessage<TreeNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TreeNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: TreeNodeID },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "removed_at", kind: "message", T: TimeTicket },
    { no: 5, name: "ins_prev_id", kind: "message", T: TreeNodeID },
    { no: 6, name: "ins_next_id", kind: "message", T: TreeNodeID },
    { no: 7, name: "depth", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeAttr} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreeNode {
    return new TreeNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreeNode {
    return new TreeNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreeNode {
    return new TreeNode().fromJsonString(jsonString, options);
  }

  static equals(a: TreeNode | PlainMessage<TreeNode> | undefined, b: TreeNode | PlainMessage<TreeNode> | undefined): boolean {
    return proto3.util.equals(TreeNode, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TreeNodes
 */
export class TreeNodes extends Message<TreeNodes> {
  /**
   * @generated from field: repeated yorkie.v1.TreeNode content = 1;
   */
  content: TreeNode[] = [];

  constructor(data?: PartialMessage<TreeNodes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TreeNodes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: TreeNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreeNodes {
    return new TreeNodes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreeNodes {
    return new TreeNodes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreeNodes {
    return new TreeNodes().fromJsonString(jsonString, options);
  }

  static equals(a: TreeNodes | PlainMessage<TreeNodes> | undefined, b: TreeNodes | PlainMessage<TreeNodes> | undefined): boolean {
    return proto3.util.equals(TreeNodes, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TreeNodeID
 */
export class TreeNodeID extends Message<TreeNodeID> {
  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 1;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<TreeNodeID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TreeNodeID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreeNodeID {
    return new TreeNodeID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreeNodeID {
    return new TreeNodeID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreeNodeID {
    return new TreeNodeID().fromJsonString(jsonString, options);
  }

  static equals(a: TreeNodeID | PlainMessage<TreeNodeID> | undefined, b: TreeNodeID | PlainMessage<TreeNodeID> | undefined): boolean {
    return proto3.util.equals(TreeNodeID, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TreePos
 */
export class TreePos extends Message<TreePos> {
  /**
   * @generated from field: yorkie.v1.TreeNodeID parent_id = 1;
   */
  parentId?: TreeNodeID;

  /**
   * @generated from field: yorkie.v1.TreeNodeID left_sibling_id = 2;
   */
  leftSiblingId?: TreeNodeID;

  constructor(data?: PartialMessage<TreePos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TreePos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_id", kind: "message", T: TreeNodeID },
    { no: 2, name: "left_sibling_id", kind: "message", T: TreeNodeID },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreePos {
    return new TreePos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreePos {
    return new TreePos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreePos {
    return new TreePos().fromJsonString(jsonString, options);
  }

  static equals(a: TreePos | PlainMessage<TreePos> | undefined, b: TreePos | PlainMessage<TreePos> | undefined): boolean {
    return proto3.util.equals(TreePos, a, b);
  }
}

/**
 * @generated from message yorkie.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string public_key = 3;
   */
  publicKey = "";

  /**
   * @generated from field: string secret_key = 4;
   */
  secretKey = "";

  /**
   * @generated from field: string auth_webhook_url = 5;
   */
  authWebhookUrl = "";

  /**
   * @generated from field: repeated string auth_webhook_methods = 6;
   */
  authWebhookMethods: string[] = [];

  /**
   * @generated from field: string client_deactivate_threshold = 7;
   */
  clientDeactivateThreshold = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secret_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auth_webhook_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "auth_webhook_methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "client_deactivate_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message yorkie.v1.UpdatableProjectFields
 */
export class UpdatableProjectFields extends Message<UpdatableProjectFields> {
  /**
   * @generated from field: google.protobuf.StringValue name = 1;
   */
  name?: string;

  /**
   * @generated from field: google.protobuf.StringValue auth_webhook_url = 2;
   */
  authWebhookUrl?: string;

  /**
   * @generated from field: yorkie.v1.UpdatableProjectFields.AuthWebhookMethods auth_webhook_methods = 3;
   */
  authWebhookMethods?: UpdatableProjectFields_AuthWebhookMethods;

  /**
   * @generated from field: google.protobuf.StringValue client_deactivate_threshold = 4;
   */
  clientDeactivateThreshold?: string;

  constructor(data?: PartialMessage<UpdatableProjectFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.UpdatableProjectFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "message", T: StringValue },
    { no: 2, name: "auth_webhook_url", kind: "message", T: StringValue },
    { no: 3, name: "auth_webhook_methods", kind: "message", T: UpdatableProjectFields_AuthWebhookMethods },
    { no: 4, name: "client_deactivate_threshold", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatableProjectFields {
    return new UpdatableProjectFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatableProjectFields {
    return new UpdatableProjectFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatableProjectFields {
    return new UpdatableProjectFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatableProjectFields | PlainMessage<UpdatableProjectFields> | undefined, b: UpdatableProjectFields | PlainMessage<UpdatableProjectFields> | undefined): boolean {
    return proto3.util.equals(UpdatableProjectFields, a, b);
  }
}

/**
 * @generated from message yorkie.v1.UpdatableProjectFields.AuthWebhookMethods
 */
export class UpdatableProjectFields_AuthWebhookMethods extends Message<UpdatableProjectFields_AuthWebhookMethods> {
  /**
   * @generated from field: repeated string methods = 1;
   */
  methods: string[] = [];

  constructor(data?: PartialMessage<UpdatableProjectFields_AuthWebhookMethods>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.UpdatableProjectFields.AuthWebhookMethods";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatableProjectFields_AuthWebhookMethods {
    return new UpdatableProjectFields_AuthWebhookMethods().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatableProjectFields_AuthWebhookMethods {
    return new UpdatableProjectFields_AuthWebhookMethods().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatableProjectFields_AuthWebhookMethods {
    return new UpdatableProjectFields_AuthWebhookMethods().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatableProjectFields_AuthWebhookMethods | PlainMessage<UpdatableProjectFields_AuthWebhookMethods> | undefined, b: UpdatableProjectFields_AuthWebhookMethods | PlainMessage<UpdatableProjectFields_AuthWebhookMethods> | undefined): boolean {
    return proto3.util.equals(UpdatableProjectFields_AuthWebhookMethods, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DocumentSummary
 */
export class DocumentSummary extends Message<DocumentSummary> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string snapshot = 3;
   */
  snapshot = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp accessed_at = 5;
   */
  accessedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<DocumentSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DocumentSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "snapshot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "accessed_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentSummary {
    return new DocumentSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentSummary {
    return new DocumentSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentSummary {
    return new DocumentSummary().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentSummary | PlainMessage<DocumentSummary> | undefined, b: DocumentSummary | PlainMessage<DocumentSummary> | undefined): boolean {
    return proto3.util.equals(DocumentSummary, a, b);
  }
}

/**
 * @generated from message yorkie.v1.PresenceChange
 */
export class PresenceChange extends Message<PresenceChange> {
  /**
   * @generated from field: yorkie.v1.PresenceChange.ChangeType type = 1;
   */
  type = PresenceChange_ChangeType.UNSPECIFIED;

  /**
   * @generated from field: yorkie.v1.Presence presence = 2;
   */
  presence?: Presence;

  constructor(data?: PartialMessage<PresenceChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.PresenceChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PresenceChange_ChangeType) },
    { no: 2, name: "presence", kind: "message", T: Presence },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PresenceChange {
    return new PresenceChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PresenceChange {
    return new PresenceChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PresenceChange {
    return new PresenceChange().fromJsonString(jsonString, options);
  }

  static equals(a: PresenceChange | PlainMessage<PresenceChange> | undefined, b: PresenceChange | PlainMessage<PresenceChange> | undefined): boolean {
    return proto3.util.equals(PresenceChange, a, b);
  }
}

/**
 * @generated from enum yorkie.v1.PresenceChange.ChangeType
 */
export enum PresenceChange_ChangeType {
  /**
   * @generated from enum value: CHANGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHANGE_TYPE_PUT = 1;
   */
  PUT = 1,

  /**
   * @generated from enum value: CHANGE_TYPE_DELETE = 2;
   */
  DELETE = 2,

  /**
   * @generated from enum value: CHANGE_TYPE_CLEAR = 3;
   */
  CLEAR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PresenceChange_ChangeType)
proto3.util.setEnumType(PresenceChange_ChangeType, "yorkie.v1.PresenceChange.ChangeType", [
  { no: 0, name: "CHANGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "CHANGE_TYPE_PUT" },
  { no: 2, name: "CHANGE_TYPE_DELETE" },
  { no: 3, name: "CHANGE_TYPE_CLEAR" },
]);

/**
 * @generated from message yorkie.v1.Presence
 */
export class Presence extends Message<Presence> {
  /**
   * @generated from field: map<string, string> data = 1;
   */
  data: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Presence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Presence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Presence {
    return new Presence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Presence {
    return new Presence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Presence {
    return new Presence().fromJsonString(jsonString, options);
  }

  static equals(a: Presence | PlainMessage<Presence> | undefined, b: Presence | PlainMessage<Presence> | undefined): boolean {
    return proto3.util.equals(Presence, a, b);
  }
}

/**
 * @generated from message yorkie.v1.Checkpoint
 */
export class Checkpoint extends Message<Checkpoint> {
  /**
   * @generated from field: int64 server_seq = 1;
   */
  serverSeq = protoInt64.zero;

  /**
   * @generated from field: uint32 client_seq = 2;
   */
  clientSeq = 0;

  constructor(data?: PartialMessage<Checkpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.Checkpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_seq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "client_seq", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Checkpoint {
    return new Checkpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Checkpoint {
    return new Checkpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Checkpoint {
    return new Checkpoint().fromJsonString(jsonString, options);
  }

  static equals(a: Checkpoint | PlainMessage<Checkpoint> | undefined, b: Checkpoint | PlainMessage<Checkpoint> | undefined): boolean {
    return proto3.util.equals(Checkpoint, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TextNodePos
 */
export class TextNodePos extends Message<TextNodePos> {
  /**
   * @generated from field: yorkie.v1.TimeTicket created_at = 1;
   */
  createdAt?: TimeTicket;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: int32 relative_offset = 3;
   */
  relativeOffset = 0;

  constructor(data?: PartialMessage<TextNodePos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TextNodePos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: TimeTicket },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "relative_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextNodePos {
    return new TextNodePos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextNodePos {
    return new TextNodePos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextNodePos {
    return new TextNodePos().fromJsonString(jsonString, options);
  }

  static equals(a: TextNodePos | PlainMessage<TextNodePos> | undefined, b: TextNodePos | PlainMessage<TextNodePos> | undefined): boolean {
    return proto3.util.equals(TextNodePos, a, b);
  }
}

/**
 * @generated from message yorkie.v1.TimeTicket
 */
export class TimeTicket extends Message<TimeTicket> {
  /**
   * @generated from field: int64 lamport = 1;
   */
  lamport = protoInt64.zero;

  /**
   * @generated from field: uint32 delimiter = 2;
   */
  delimiter = 0;

  /**
   * @generated from field: bytes actor_id = 3;
   */
  actorId = new Uint8Array(0);

  constructor(data?: PartialMessage<TimeTicket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.TimeTicket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lamport", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "delimiter", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "actor_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeTicket {
    return new TimeTicket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeTicket {
    return new TimeTicket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeTicket {
    return new TimeTicket().fromJsonString(jsonString, options);
  }

  static equals(a: TimeTicket | PlainMessage<TimeTicket> | undefined, b: TimeTicket | PlainMessage<TimeTicket> | undefined): boolean {
    return proto3.util.equals(TimeTicket, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DocEventBody
 */
export class DocEventBody extends Message<DocEventBody> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * @generated from field: bytes payload = 2;
   */
  payload = new Uint8Array(0);

  constructor(data?: PartialMessage<DocEventBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DocEventBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocEventBody {
    return new DocEventBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocEventBody {
    return new DocEventBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocEventBody {
    return new DocEventBody().fromJsonString(jsonString, options);
  }

  static equals(a: DocEventBody | PlainMessage<DocEventBody> | undefined, b: DocEventBody | PlainMessage<DocEventBody> | undefined): boolean {
    return proto3.util.equals(DocEventBody, a, b);
  }
}

/**
 * @generated from message yorkie.v1.DocEvent
 */
export class DocEvent extends Message<DocEvent> {
  /**
   * @generated from field: yorkie.v1.DocEventType type = 1;
   */
  type = DocEventType.DOCUMENT_CHANGED;

  /**
   * @generated from field: string publisher = 2;
   */
  publisher = "";

  /**
   * @generated from field: yorkie.v1.DocEventBody body = 3;
   */
  body?: DocEventBody;

  constructor(data?: PartialMessage<DocEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "yorkie.v1.DocEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(DocEventType) },
    { no: 2, name: "publisher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "message", T: DocEventBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocEvent {
    return new DocEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocEvent {
    return new DocEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocEvent {
    return new DocEvent().fromJsonString(jsonString, options);
  }

  static equals(a: DocEvent | PlainMessage<DocEvent> | undefined, b: DocEvent | PlainMessage<DocEvent> | undefined): boolean {
    return proto3.util.equals(DocEvent, a, b);
  }
}

